<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Jason Yang: Math and Computer Science Notes</title>
    <link href="https://userjy.github.io/atom.xml" rel="self" />
    <link href="https://userjy.github.io" />
    <id>https://userjy.github.io/atom.xml</id>
    <author>
        <name>Jason Yang</name>
        <email>jasonyang299@gmail.com</email>
    </author>
    <updated>2022-09-02T00:00:00Z</updated>
    <entry>
    <title>Pyplot matplotlib</title>
    <link href="https://userjy.github.io/posts/2022-09-02-pyplot.html" />
    <id>https://userjy.github.io/posts/2022-09-02-pyplot.html</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  2, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;python&#39;." href="/tags/python.html">python</a>, <a title="All pages tagged &#39;AI&#39;." href="/tags/AI.html">AI</a>
    
</div>
<p><img src="/images/pyimage/pyplot.svg" /></p>
<section id="plt" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> plt</h1>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource python numberLines"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb1-3"><a href="#cb1-3"></a>arr <span class="op">=</span> np.arange(<span class="dv">6</span>)</span>
<span id="cb1-4"><a href="#cb1-4"></a>plt.plot(arr) <span class="co"># plot the points in the array a</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>plt.title(<span class="st">&quot;My first fitgure&quot;</span>)</span>
<span id="cb1-6"><a href="#cb1-6"></a>plt.xlabel(<span class="st">&quot;my x-axis&quot;</span>)</span>
<span id="cb1-7"><a href="#cb1-7"></a>plt.ylabel(<span class="st">&quot;y&quot;</span>)</span>
<span id="cb1-8"><a href="#cb1-8"></a>plt.show()</span></code></pre></div>
</section>
<section id="single-subplots" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> single subplots()</h1>
<p>Everytime we need to plot we must reinstantiate object with plt.subplots()</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>fig, ax <span class="op">=</span> plt.subplots()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>ax.plot(...) </span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>plt.show() </span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>fig, ax <span class="op">=</span> plt.subplots() </span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>ax.plot(...)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>fig, ax <span class="op">=</span> plt.subplots()</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>ax.set_xlabel(<span class="st">&quot;sigma aka Std&quot;</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>ax.set_ylabel(<span class="st">&quot;Prob&quot;</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>ax.plot(..)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div>
</section>
<section id="multiplot-subplot" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> multiplot subplot</h1>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>fig,ax <span class="op">=</span> plt.subplots(<span class="dv">2</span>,<span class="dv">2</span>)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>ax[<span class="dv">0</span>,<span class="dv">0</span>].plot(arr) <span class="co">#top left</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>ax[<span class="dv">0</span>,<span class="dv">1</span>].plot(arr) <span class="co">#top right</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>ax[<span class="dv">1</span>,<span class="dv">0</span>].plot(arr)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>ax[<span class="dv">1</span>,<span class="dv">1</span>].plot(arr)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>fig.show()</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>painting<span class="op">=</span>plt.imread(<span class="st">&quot;painting.png&quot;</span>)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>plt.imshow(painting)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>plt.imshow(painting[:,::<span class="op">-</span><span class="dv">1</span>]) <span class="co">#mirror image in x direction</span></span></code></pre></div>
</section>
<section id="subplots-quirk---axes-can-be-non-array-1d-2d" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> subplots quirk - axes can be: non-array, 1D, 2D</h1>
<p>axes parameter is usually a 2d array <code class="sourceCode python">ax[<span class="dv">2</span>,<span class="dv">3</span>].plot(arr)</code></p>
<p>When using subplots for (1,1) which is 1 graph, axes parmeter is not an array of subplots but a single plot <code class="sourceCode python">ax.plot(arr)</code></p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>fig,ax <span class="op">=</span> plt.subplots(<span class="dv">1</span>,<span class="dv">1</span>) <span class="co">#this same as line below</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co">#fig,ax = plt.subplots()</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>ax[<span class="dv">0</span>,<span class="dv">0</span>].plot(arr) <span class="co">###WILL RETURN ERROR</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>ax.plot(arr) <span class="co">###OK</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>fig.show()</span></code></pre></div>
<p>When using subplots where any parameter is (n,1) or (1,n), the axes parameter is a single array. <code class="sourceCode python">ax[<span class="dv">3</span>].plot(arr)</code></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>fig,ax <span class="op">=</span> plt.subplots(<span class="dv">1</span>,<span class="dv">2</span>) <span class="co">#this same as line below</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>ax[<span class="dv">0</span>,<span class="dv">0</span>].plot(arr) <span class="co">###WILL RETURN ERROR</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>ax[<span class="dv">0</span>].plot(arr) <span class="co">###OK</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>ax[<span class="dv">1</span>].plot(arr)</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>fig.show()</span></code></pre></div>
</section>
]]></summary>
</entry>
<entry>
    <title>Pandas</title>
    <link href="https://userjy.github.io/posts/2022-09-02-pandas.html" />
    <id>https://userjy.github.io/posts/2022-09-02-pandas.html</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  2, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;python&#39;." href="/tags/python.html">python</a>, <a title="All pages tagged &#39;AI&#39;." href="/tags/AI.html">AI</a>
    
</div>
<p>Pandas</p>
<ul>
<li>indexing
<ul>
<li>iloc for index</li>
<li>loc for key</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> s <span class="op">=</span> pd.Series(<span class="bu">list</span>(<span class="st">&quot;abcdef&quot;</span>), index<span class="op">=</span>[<span class="dv">49</span>, <span class="dv">48</span>, <span class="dv">47</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">2</span>]) </span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dv">49</span>    a</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dv">48</span>    b</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dv">47</span>    c</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dv">0</span>     d</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span>     e</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span>     f</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> s.loc[<span class="dv">0</span>]    <span class="co"># value at index label 0</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;d&#39;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> s.iloc[<span class="dv">0</span>]   <span class="co"># value at index location 0</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;a&#39;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> s.loc[<span class="dv">0</span>:<span class="dv">1</span>]  <span class="co"># rows at index labels between 0 and 1 (inclusive)</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="dv">0</span>    d</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span>    e</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> s.iloc[<span class="dv">0</span>:<span class="dv">1</span>] <span class="co"># rows at index location between 0 and 1 (exclusive)</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="dv">49</span>    a</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&quot;wage&quot;</span>]</span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode sql"><code class="sourceCode sql"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">SELECT</span> wage <span class="kw">from</span> Dataset;</span></code></pre></div>
<p>filtering</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>df[df.wage <span class="op">&gt;</span> <span class="dv">12</span>]</span></code></pre></div>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>wh[wh.isnull().<span class="bu">any</span>(axis<span class="op">=</span><span class="dv">1</span>)]</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>wh.dropna(axis<span class="op">=</span><span class="dv">1</span>).shape <span class="co"># Drops the columns containing missing values</span></span></code></pre></div>
<p>fillna parameter
* None - use position parameter to fill missing content
* ffill - use previous value to fill current value
* bfill - use next value to fill current value</p>
<div class="sourceCode" id="cb6" data-group="p1" data-glabel="sp500"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>url <span class="op">=</span> <span class="vs">r&#39;https://en.wikipedia.org/wiki/List_of_S%26P_500_companies&#39;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>tables <span class="op">=</span> pd.read_html(url) <span class="co"># Returns list of all tables on page</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>sp500_table <span class="op">=</span> tables[<span class="dv">0</span>] <span class="co"># Select table of interest</span></span></code></pre></div>
<div class="sourceCode" id="cb7" data-group="p1" data-glabel="margin"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>tables <span class="op">=</span> pd.read_html(<span class="st">&quot;https://www.finra.org/investors/learn-to-invest/advanced-investing/margin-statistics&quot;</span>)`</span></code></pre></div>
]]></summary>
</entry>
<entry>
    <title>makefile</title>
    <link href="https://userjy.github.io/posts/2022-09-02-makefile.html" />
    <id>https://userjy.github.io/posts/2022-09-02-makefile.html</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  2, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;C&#39;." href="/tags/C.html">C</a>, <a title="All pages tagged &#39;QuickCode&#39;." href="/tags/QuickCode.html">QuickCode</a>, <a title="All pages tagged &#39;OS&#39;." href="/tags/OS.html">OS</a>
    
</div>
<div class="sourceCode" id="cb1" data-filename="main.c" data-group="h1" data-glabel="main.c"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;mylib.h&quot;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span><span class="op">*</span> argv<span class="op">[]){</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>	<span class="dt">char</span> <span class="op">*</span>g<span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>	g <span class="op">=</span> <span class="st">&quot;hello</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>	cout<span class="op">(</span>g<span class="op">)</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb2" data-filename="mylib.h" data-group="h1" data-glabel="mylib.h"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> cout<span class="op">(</span><span class="dt">char</span><span class="op">*</span> str<span class="op">)</span></span></code></pre></div>
<div class="sourceCode" id="cb3" data-filename="prints.c" data-group="h1" data-glabel="prints.c"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> cout<span class="op">(</span><span class="dt">char</span><span class="op">*</span> str<span class="op">){</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>	printf<span class="op">(</span><span class="st">&quot;%s&quot;</span><span class="op">,</span>str<span class="op">);</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb4" data-filename="Makefile"><pre class="sourceCode mk"><code class="sourceCode makefile"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> compile link</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>	./a.out</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dv">compile:</span><span class="dt"> main.c prints.c</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>	gcc -c main.c</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>	gcc -c prints.c</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="dv">link:</span><span class="dt"> compile</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>	gcc main.o prints.o</span></code></pre></div>
<ul>
<li>all –depends-on–&gt; compile link
<ul>
<li>compile –depends-on–&gt; main.c prints.c
<ul>
<li>link –depends-on–&gt; compile</li>
</ul></li>
</ul></li>
</ul>
<p>Notice the only atomic or leaf dependencies are <code>main.c prints.c</code></p>
<ul>
<li><code>mylib.h</code> behaves like an interface, it holds the interface or placeholder of function <code>cout</code></li>
<li>How does <code>mylib.h</code> know <code>cout</code> function is located in <code>prints.c</code>?
<ul>
<li>ANSWER: It doesn’t, the <code>Makefile</code> is what links the placeholder of <code>cout</code> to it’s implementation in compiled <code>prints.o</code></li>
</ul></li>
</ul>
<p>Static analysis to find dependencies doesn’t work without also analyzing the <code>Makefile</code> linking the object files.<br />
Doxygen tells you that a function like <code>cout</code> exists somewhere but we dont know how or where it is implemented.</p>
]]></summary>
</entry>
<entry>
    <title>example page</title>
    <link href="https://userjy.github.io/posts/2022-09-02-example.html" />
    <id>https://userjy.github.io/posts/2022-09-02-example.html</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  2, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;musings&#39;." href="/tags/musings.html">musings</a>
    
</div>
<p>example page</p>
]]></summary>
</entry>
<entry>
    <title>TLA</title>
    <link href="https://userjy.github.io/posts/2022-09-02-TLA.html" />
    <id>https://userjy.github.io/posts/2022-09-02-TLA.html</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  2, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;mathcs&#39;." href="/tags/mathcs.html">mathcs</a>, <a title="All pages tagged &#39;musings&#39;." href="/tags/musings.html">musings</a>, <a title="All pages tagged &#39;functional&#39;." href="/tags/functional.html">functional</a>, <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>
    
</div>
<section id="summary" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Summary</h1>
<p>TLA+ is defined by:</p>
<ul>
<li>VARIABLES</li>
<li>INIT</li>
<li>TRANSITIONS</li>
</ul>
<p>Programs are state machines.
Execution of digital system is a sequence of states.
We want to describe all possible sequence of states of a system.</p>
</section>
<section id="part-1" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Part 1</h1>
<p>Every computer has a program counter register(PC) that points to the current line of instruction.
PC points to the current state.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> main<span class="op">()</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span>i<span class="op">=</span>someNumber<span class="op">();</span> <span class="co">//pc=&quot;start&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a> i<span class="op">=</span>i<span class="op">+</span><span class="dv">1</span><span class="op">;</span>          <span class="co">//pc=&quot;middle&quot;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>                <span class="co">//pc=&quot;done&quot;</span></span></code></pre></div>
<ul>
<li>VARIABLES: <span class="math inline">\(i\)</span></li>
<li>INIT: <span class="math inline">\(i \in \mathbb{N}\)</span></li>
<li>TRANSITIONS: <span class="math inline">\(i \rightarrow i + 1\)</span></li>
</ul>
<p>pc means current state pc pointer
pc’ means next state pc pointer</p>
<ul>
<li>IF pc==“start”
<ul>
<li>THEN pc’ == “middle” and i’ (0,1000)</li>
</ul></li>
<li>ELSEIF pc==“middle”
<ul>
<li>THEN (i’ = i + 1) and (pc’ ==“done”)</li>
</ul></li>
<li>ELSE FALSE</li>
</ul>
<p>Basically saying if we are at this section of code, then our next section of code must satisfy some constraint.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="cf">switch</span> </span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>   <span class="cf">case</span> pc <span class="op">==</span> <span class="st">&quot;start:</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>     Satisfy Constraint<span class="op">(</span>pc<span class="op">,</span>pc&#39;<span class="op">)</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>   <span class="cf">case</span> pc <span class="op">==</span> <span class="st">&quot;middle&quot;</span><span class="op">:</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     Satisfy Constraint<span class="op">(</span>pc<span class="op">,</span>pc&#39;<span class="op">)</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span></code></pre></div>
<p>TLA+ notation for arrays:</p>
<p>meta-thought: arrays are really just partial functions and TLA+ makes this explicit.</p>
<p>TLA+ Notation: sqr = [i  i^2 ]</p>
<p>code: sqrt[i] = i^2</p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a7469746c65204163746976697479204469616772616d205c6e0a73746172740a3a69203d20736f6d654e756d62657228293b3b0a6e6f7465206c6566740a202020207063203d20227374617274220a656e64206e6f74650a3a69203d20692b313b3b0a6e6f7465206c6566740a202020207063203d20226d6964646c65220a656e64206e6f74650a73746f700a6e6f7465206c6566740a202020207063203d2022646f6e65220a656e64206e6f74650a40656e64756d6c'></figure>
</section>
<section id="tla-template" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> TLA template</h1>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> trial1</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="fu">touch</span> trial1.tla</span></code></pre></div>
<div class="sourceCode" id="cb4" data-filename="trial1.tla" data-group="A31v" data-glabel="vanilla"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="op">------------------------------</span> MODULE trial1 <span class="op">-------------------------------</span> </span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="op">=============================================================================</span></span></code></pre></div>
<div class="sourceCode" id="cb5" data-filename="trial1.tla" data-group="A31v" data-glabel="TLC"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="op">------------------------------</span> MODULE trial1 <span class="op">-------------------------------</span> </span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>EXTENDS Naturals<span class="op">,</span> TLC</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="op">(*--</span>algorithm prog </span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>end algorithm<span class="op">;*)</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">=============================================================================</span></span></code></pre></div>
<p>ctrl+shift+P : Check model with TLC –&gt; generate trial1.cfg</p>
<div class="sourceCode" id="cb6" data-filename="trial1.cfg"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>SPECIFICATION Spec</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Add statements after this line<span class="op">.</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> SPECIFICATION</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Uncomment the previous line and provide the specification name <span class="cf">if</span> it&#39;s declared</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> in the specification file<span class="op">.</span> Comment INIT <span class="op">/</span> NEXT parameters <span class="cf">if</span> you use SPECIFICATION<span class="op">.</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> INIT people</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> NEXT Next</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> PROPERTY</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Uncomment the previous line and add property names</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> INVARIANT</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Uncomment the previous line and add invariant names</span></code></pre></div>
<section id="example-1" class="level2" data-number="3.1">
<h2 data-number="3.1"><span class="header-section-number">3.1</span> Example 1</h2>
<div class="sourceCode" id="cb7" data-filename="trial1.tla"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="op">------------------------------</span> MODULE trial1 <span class="op">-------------------------------</span> </span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>EXTENDS Integers</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="op">(*--</span>algorithm wire </span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    variables</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        people <span class="op">=</span> <span class="op">{</span><span class="st">&quot;a&quot;</span><span class="op">,</span><span class="st">&quot;b&quot;</span><span class="op">},</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        acc <span class="op">=</span> <span class="op">[</span>p \in people <span class="op">|-&gt;</span> <span class="dv">5</span><span class="op">],</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        sender <span class="op">=</span> <span class="st">&quot;a&quot;</span><span class="op">,</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        recv <span class="op">=</span> <span class="st">&quot;b&quot;</span><span class="op">,</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        cnt <span class="op">=</span> <span class="dv">3</span><span class="op">;</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>define </span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    NoOver <span class="op">==</span> \A p \in people<span class="op">:</span> acc<span class="op">[</span>p<span class="op">]</span> <span class="op">&gt;=</span> <span class="dv">0</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>end define<span class="op">;</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>end algorithm<span class="op">;*)</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="op">=============================================================================</span></span></code></pre></div>
<p>Ctrl+Shift+P &gt; Parse module —&gt; This will generate additional code in trial1.tla</p>
<div class="sourceCode" id="cb8" data-filename="trial1.cfg"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>INVARIANT</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>NoOver</span></code></pre></div>
</section>
</section>
<section id="example-2" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Example 2</h1>
<div class="sourceCode" id="cb9" data-filename="tutorial2.tla" data-group="3De4" data-glabel="unparsed"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="op">------------------------------</span> MODULE tutorial2 <span class="op">-------------------------------</span> </span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Below we show an example of bad specification<span class="op">,</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>EXTENDS Naturals<span class="op">,</span> TLC</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="op">(*--</span>algorithm prog </span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>variables </span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    a <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> </span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    critical_section <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>process Left<span class="op">=</span><span class="dv">0</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>begin</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    L1<span class="op">:</span> a <span class="op">:=</span> a <span class="op">+</span> <span class="dv">1</span><span class="op">;</span> \<span class="op">*</span> <span class="op">&lt;---</span> This is Bad </span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    L2<span class="op">:</span> <span class="cf">if</span> a <span class="op">=</span> <span class="dv">1</span> then </span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>        critical_section <span class="op">:=</span> critical_section <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>        L3<span class="op">:</span> critical_section <span class="op">:=</span> critical_section <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    end <span class="cf">if</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>end process</span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>process Right<span class="op">=</span><span class="dv">1</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>begin</span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    L1<span class="op">:</span> a <span class="op">:=</span> a <span class="op">+</span> <span class="dv">1</span><span class="op">;</span> \<span class="op">*</span> <span class="op">&lt;---</span> This is Bad</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>    L2<span class="op">:</span> <span class="cf">if</span> a <span class="op">=</span> <span class="dv">1</span> then </span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>        critical_section <span class="op">:=</span> critical_section <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>        L3<span class="op">:</span> critical_section <span class="op">:=</span> critical_section <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>    end <span class="cf">if</span></span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>end process</span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>end algorithm<span class="op">;*)</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>DeadlockCondition <span class="op">==</span> critical_section <span class="op">&lt;</span> <span class="dv">2</span> <span class="op">/</span>\ critical_section <span class="op">&gt;=</span> <span class="dv">0</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a><span class="op">=============================================================================</span></span></code></pre></div>
<div class="sourceCode" id="cb10" data-filename="tutorial2.tla" data-group="3De4" data-glabel="parsed"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="op">------------------------------</span> MODULE tutorial2 <span class="op">-------------------------------</span> </span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Below we show an example of bad specification<span class="op">,</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>EXTENDS Naturals<span class="op">,</span> TLC</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">(*--</span>algorithm prog </span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>variables </span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    a <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> </span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    critical_section <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>process Left<span class="op">=</span><span class="dv">0</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>begin</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    L1<span class="op">:</span> a <span class="op">:=</span> a <span class="op">+</span> <span class="dv">1</span><span class="op">;</span> \<span class="op">*</span> <span class="op">&lt;---</span> This is Bad </span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>    L2<span class="op">:</span> <span class="cf">if</span> a <span class="op">=</span> <span class="dv">1</span> then </span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>        critical_section <span class="op">:=</span> critical_section <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>        L3<span class="op">:</span> critical_section <span class="op">:=</span> critical_section <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>    end <span class="cf">if</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>end process</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>process Right<span class="op">=</span><span class="dv">1</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>begin</span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>    L1<span class="op">:</span> a <span class="op">:=</span> a <span class="op">+</span> <span class="dv">1</span><span class="op">;</span> \<span class="op">*</span> <span class="op">&lt;---</span> This is Bad</span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>    L2<span class="op">:</span> <span class="cf">if</span> a <span class="op">=</span> <span class="dv">1</span> then </span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>        critical_section <span class="op">:=</span> critical_section <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>        L3<span class="op">:</span> critical_section <span class="op">:=</span> critical_section <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>    end <span class="cf">if</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>end process</span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a>end algorithm<span class="op">;*)</span></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> BEGIN TRANSLATION <span class="op">(</span>chksum<span class="op">(</span>pcal<span class="op">)</span> <span class="op">=</span> <span class="st">&quot;48bb4a48&quot;</span> <span class="op">/</span>\ chksum<span class="op">(</span>tla<span class="op">)</span> <span class="op">=</span> <span class="st">&quot;2434b8da&quot;</span><span class="op">)</span></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Label L1 of process Left at line <span class="dv">11</span> col <span class="dv">9</span> changed to L1_</span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Label L2 of process Left at line <span class="dv">12</span> col <span class="dv">9</span> changed to L2_</span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Label L3 of process Left at line <span class="dv">14</span> col <span class="dv">13</span> changed to L3_</span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>VARIABLES a<span class="op">,</span> critical_section<span class="op">,</span> pc</span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a>vars <span class="op">==</span> <span class="op">&lt;&lt;</span> a<span class="op">,</span> critical_section<span class="op">,</span> pc <span class="op">&gt;&gt;</span></span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a>ProcSet <span class="op">==</span> <span class="op">{</span><span class="dv">0</span><span class="op">}</span> \cup <span class="op">{</span><span class="dv">1</span><span class="op">}</span></span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-38"><a href="#cb10-38" aria-hidden="true" tabindex="-1"></a>Init <span class="op">==</span> <span class="op">(*</span> Global variables <span class="op">*)</span></span>
<span id="cb10-39"><a href="#cb10-39" aria-hidden="true" tabindex="-1"></a>        <span class="op">/</span>\ a <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb10-40"><a href="#cb10-40" aria-hidden="true" tabindex="-1"></a>        <span class="op">/</span>\ critical_section <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb10-41"><a href="#cb10-41" aria-hidden="true" tabindex="-1"></a>        <span class="op">/</span>\ pc <span class="op">=</span> <span class="op">[</span>self \in ProcSet <span class="op">|-&gt;</span> CASE self <span class="op">=</span> <span class="dv">0</span> <span class="op">-&gt;</span> <span class="st">&quot;L1_&quot;</span></span>
<span id="cb10-42"><a href="#cb10-42" aria-hidden="true" tabindex="-1"></a>                                        <span class="op">[]</span> self <span class="op">=</span> <span class="dv">1</span> <span class="op">-&gt;</span> <span class="st">&quot;L1&quot;</span><span class="op">]</span></span>
<span id="cb10-43"><a href="#cb10-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-44"><a href="#cb10-44" aria-hidden="true" tabindex="-1"></a>L1_ <span class="op">==</span> <span class="op">/</span>\ pc<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;L1_&quot;</span></span>
<span id="cb10-45"><a href="#cb10-45" aria-hidden="true" tabindex="-1"></a>       <span class="op">/</span>\ a&#39; <span class="op">=</span> a <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb10-46"><a href="#cb10-46" aria-hidden="true" tabindex="-1"></a>       <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="op">[</span>pc EXCEPT <span class="op">![</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;L2_&quot;</span><span class="op">]</span></span>
<span id="cb10-47"><a href="#cb10-47" aria-hidden="true" tabindex="-1"></a>       <span class="op">/</span>\ UNCHANGED critical_section</span>
<span id="cb10-48"><a href="#cb10-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-49"><a href="#cb10-49" aria-hidden="true" tabindex="-1"></a>L2_ <span class="op">==</span> <span class="op">/</span>\ pc<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;L2_&quot;</span></span>
<span id="cb10-50"><a href="#cb10-50" aria-hidden="true" tabindex="-1"></a>       <span class="op">/</span>\ IF a <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb10-51"><a href="#cb10-51" aria-hidden="true" tabindex="-1"></a>             THEN <span class="op">/</span>\ critical_section&#39; <span class="op">=</span> critical_section <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb10-52"><a href="#cb10-52" aria-hidden="true" tabindex="-1"></a>                  <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="op">[</span>pc EXCEPT <span class="op">![</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;L3_&quot;</span><span class="op">]</span></span>
<span id="cb10-53"><a href="#cb10-53" aria-hidden="true" tabindex="-1"></a>             ELSE <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="op">[</span>pc EXCEPT <span class="op">![</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;Done&quot;</span><span class="op">]</span></span>
<span id="cb10-54"><a href="#cb10-54" aria-hidden="true" tabindex="-1"></a>                  <span class="op">/</span>\ UNCHANGED critical_section</span>
<span id="cb10-55"><a href="#cb10-55" aria-hidden="true" tabindex="-1"></a>       <span class="op">/</span>\ a&#39; <span class="op">=</span> a</span>
<span id="cb10-56"><a href="#cb10-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-57"><a href="#cb10-57" aria-hidden="true" tabindex="-1"></a>L3_ <span class="op">==</span> <span class="op">/</span>\ pc<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;L3_&quot;</span></span>
<span id="cb10-58"><a href="#cb10-58" aria-hidden="true" tabindex="-1"></a>       <span class="op">/</span>\ critical_section&#39; <span class="op">=</span> critical_section <span class="op">-</span> <span class="dv">1</span></span>
<span id="cb10-59"><a href="#cb10-59" aria-hidden="true" tabindex="-1"></a>       <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="op">[</span>pc EXCEPT <span class="op">![</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;Done&quot;</span><span class="op">]</span></span>
<span id="cb10-60"><a href="#cb10-60" aria-hidden="true" tabindex="-1"></a>       <span class="op">/</span>\ a&#39; <span class="op">=</span> a</span>
<span id="cb10-61"><a href="#cb10-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-62"><a href="#cb10-62" aria-hidden="true" tabindex="-1"></a>Left <span class="op">==</span> L1_ \<span class="op">/</span> L2_ \<span class="op">/</span> L3_</span>
<span id="cb10-63"><a href="#cb10-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-64"><a href="#cb10-64" aria-hidden="true" tabindex="-1"></a>L1 <span class="op">==</span> <span class="op">/</span>\ pc<span class="op">[</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;L1&quot;</span></span>
<span id="cb10-65"><a href="#cb10-65" aria-hidden="true" tabindex="-1"></a>      <span class="op">/</span>\ a&#39; <span class="op">=</span> a <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb10-66"><a href="#cb10-66" aria-hidden="true" tabindex="-1"></a>      <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="op">[</span>pc EXCEPT <span class="op">![</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;L2&quot;</span><span class="op">]</span></span>
<span id="cb10-67"><a href="#cb10-67" aria-hidden="true" tabindex="-1"></a>      <span class="op">/</span>\ UNCHANGED critical_section</span>
<span id="cb10-68"><a href="#cb10-68" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-69"><a href="#cb10-69" aria-hidden="true" tabindex="-1"></a>L2 <span class="op">==</span> <span class="op">/</span>\ pc<span class="op">[</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;L2&quot;</span></span>
<span id="cb10-70"><a href="#cb10-70" aria-hidden="true" tabindex="-1"></a>      <span class="op">/</span>\ IF a <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb10-71"><a href="#cb10-71" aria-hidden="true" tabindex="-1"></a>            THEN <span class="op">/</span>\ critical_section&#39; <span class="op">=</span> critical_section <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb10-72"><a href="#cb10-72" aria-hidden="true" tabindex="-1"></a>                 <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="op">[</span>pc EXCEPT <span class="op">![</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;L3&quot;</span><span class="op">]</span></span>
<span id="cb10-73"><a href="#cb10-73" aria-hidden="true" tabindex="-1"></a>            ELSE <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="op">[</span>pc EXCEPT <span class="op">![</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;Done&quot;</span><span class="op">]</span></span>
<span id="cb10-74"><a href="#cb10-74" aria-hidden="true" tabindex="-1"></a>                 <span class="op">/</span>\ UNCHANGED critical_section</span>
<span id="cb10-75"><a href="#cb10-75" aria-hidden="true" tabindex="-1"></a>      <span class="op">/</span>\ a&#39; <span class="op">=</span> a</span>
<span id="cb10-76"><a href="#cb10-76" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-77"><a href="#cb10-77" aria-hidden="true" tabindex="-1"></a>L3 <span class="op">==</span> <span class="op">/</span>\ pc<span class="op">[</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;L3&quot;</span></span>
<span id="cb10-78"><a href="#cb10-78" aria-hidden="true" tabindex="-1"></a>      <span class="op">/</span>\ critical_section&#39; <span class="op">=</span> critical_section <span class="op">-</span> <span class="dv">1</span></span>
<span id="cb10-79"><a href="#cb10-79" aria-hidden="true" tabindex="-1"></a>      <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="op">[</span>pc EXCEPT <span class="op">![</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="st">&quot;Done&quot;</span><span class="op">]</span></span>
<span id="cb10-80"><a href="#cb10-80" aria-hidden="true" tabindex="-1"></a>      <span class="op">/</span>\ a&#39; <span class="op">=</span> a</span>
<span id="cb10-81"><a href="#cb10-81" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-82"><a href="#cb10-82" aria-hidden="true" tabindex="-1"></a>Right <span class="op">==</span> L1 \<span class="op">/</span> L2 \<span class="op">/</span> L3</span>
<span id="cb10-83"><a href="#cb10-83" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-84"><a href="#cb10-84" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> Allow infinite stuttering to prevent deadlock on termination<span class="op">.</span> <span class="op">*)</span></span>
<span id="cb10-85"><a href="#cb10-85" aria-hidden="true" tabindex="-1"></a>Terminating <span class="op">==</span> <span class="op">/</span>\ \A self \in ProcSet<span class="op">:</span> pc<span class="op">[</span>self<span class="op">]</span> <span class="op">=</span> <span class="st">&quot;Done&quot;</span></span>
<span id="cb10-86"><a href="#cb10-86" aria-hidden="true" tabindex="-1"></a>               <span class="op">/</span>\ UNCHANGED vars</span>
<span id="cb10-87"><a href="#cb10-87" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-88"><a href="#cb10-88" aria-hidden="true" tabindex="-1"></a>Next <span class="op">==</span> Left \<span class="op">/</span> Right</span>
<span id="cb10-89"><a href="#cb10-89" aria-hidden="true" tabindex="-1"></a>           \<span class="op">/</span> Terminating</span>
<span id="cb10-90"><a href="#cb10-90" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-91"><a href="#cb10-91" aria-hidden="true" tabindex="-1"></a>Spec <span class="op">==</span> Init <span class="op">/</span>\ <span class="op">[][</span>Next<span class="op">]</span>_vars</span>
<span id="cb10-92"><a href="#cb10-92" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-93"><a href="#cb10-93" aria-hidden="true" tabindex="-1"></a>Termination <span class="op">==</span> <span class="op">&lt;&gt;(</span>\A self \in ProcSet<span class="op">:</span> pc<span class="op">[</span>self<span class="op">]</span> <span class="op">=</span> <span class="st">&quot;Done&quot;</span><span class="op">)</span></span>
<span id="cb10-94"><a href="#cb10-94" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-95"><a href="#cb10-95" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> END TRANSLATION </span>
<span id="cb10-96"><a href="#cb10-96" aria-hidden="true" tabindex="-1"></a>DeadlockCondition <span class="op">==</span> critical_section <span class="op">&lt;</span> <span class="dv">2</span> <span class="op">/</span>\ critical_section <span class="op">&gt;=</span> <span class="dv">0</span></span>
<span id="cb10-97"><a href="#cb10-97" aria-hidden="true" tabindex="-1"></a><span class="op">=============================================================================</span></span></code></pre></div>
<div class="sourceCode" id="cb11" data-filename="tutorial2.cfg"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>INVARIANT</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>DeadlockCondition</span></code></pre></div>
<p>Ctrl+Shift+P &gt; Parse module</p>
</section>
<section id="example-3" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Example 3</h1>
<section id="original-program" class="level2" data-number="5.1">
<h2 data-number="5.1"><span class="header-section-number">5.1</span> Original program</h2>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> i<span class="op">;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> main<span class="op">()</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a> <span class="op">{</span>i <span class="op">=</span>someNumber<span class="op">();</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>  i <span class="op">=</span> i<span class="op">+</span><span class="dv">1</span><span class="op">;}</span></span></code></pre></div>
</section>
<section id="draft-of-spec" class="level2" data-number="5.2">
<h2 data-number="5.2"><span class="header-section-number">5.2</span> draft of spec</h2>
<div class="sourceCode" id="cb13"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">(</span><span class="ex">pc</span> = <span class="st">&quot;start&quot;</span><span class="kw">)</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">then</span> <span class="kw">(</span> <span class="ex">i</span> <span class="dt">\i</span>n 0..1000<span class="kw">)</span> </span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>       <span class="kw">(</span><span class="ex">pc</span><span class="st">&#39; = &quot;middle&quot;)</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="st">  elif ( pc = &quot;middle&quot; )</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="st">       then (i&#39;</span> = i+1<span class="kw">)</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">(</span><span class="ex">pc</span><span class="st">&#39; = &quot;done&quot;)</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="st">       else (FALSE)</span></span></code></pre></div>
</section>
<section id="spec" class="level2" data-number="5.3">
<h2 data-number="5.3"><span class="header-section-number">5.3</span> Spec</h2>
<div class="sourceCode" id="cb14" data-filename="simple.cfg"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> SPECIFICATION</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Uncomment the previous line and provide the specification name <span class="cf">if</span> it&#39;s declared</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> in the specification file<span class="op">.</span> Comment INIT <span class="op">/</span> NEXT parameters <span class="cf">if</span> you use SPECIFICATION<span class="op">.</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>INIT Init</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>NEXT Next</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> PROPERTY</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Uncomment the previous line and add property names</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> INVARIANT</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>\<span class="op">*</span> Uncomment the previous line and add invariant names</span></code></pre></div>
<div class="sourceCode" id="cb15" data-filename="simple.tla"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="op">------------------------------</span> MODULE simple <span class="op">-------------------------------</span> </span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> First<span class="op">,</span> we write a spec that describes all allowable behaviors of our    <span class="op">*)</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> heros<span class="op">.</span>                                                                  <span class="op">*)</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>EXTENDS Naturals</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">(*************************************************************************)</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">(*</span> This statement imports the definitions of the ordinary operators on   <span class="op">*)</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">(*</span> natural numbers<span class="op">,</span> such as <span class="op">+.</span>                                           <span class="op">*)</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">(*************************************************************************)</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> We next declare the specification&#39;s variables<span class="op">.</span>                          <span class="op">*)</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>VARIABLES i<span class="op">,</span> pc</span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> We now define TypeOK to be the type invariant<span class="op">,</span> asserting that the value <span class="op">*)</span></span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> of each variable is an element of the appropriate set<span class="op">.</span>  A type          <span class="op">*)</span></span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> invariant like this is not part of the specification<span class="op">,</span> but it&#39;s          <span class="op">*)</span></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> generally a good idea to include it because it helps the reader         <span class="op">*)</span></span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> understand the spec<span class="op">.</span>  Moreover<span class="op">,</span> having TLC check that it is an          <span class="op">*)</span></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> invariant of the spec catches errors that<span class="op">,</span> in a typed language<span class="op">,</span> are     <span class="op">*)</span></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> caught by type checking<span class="op">.</span>                                                <span class="op">*)</span></span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span>                                                                         <span class="op">*)</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> Note<span class="op">:</span> TLA<span class="op">+</span> uses the convention that a list of formulas bulleted by <span class="op">/</span>\   <span class="op">*)</span></span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> or \<span class="op">/</span> denotes the conjunction or disjunction of those formulas<span class="op">.</span>         <span class="op">*)</span></span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> Indentation of subitems is significant<span class="op">,</span> allowing one to eliminate lots  <span class="op">*)</span></span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> of parentheses<span class="op">.</span>  This makes a large formula much easier to read<span class="op">.</span>        <span class="op">*)</span></span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> However<span class="op">,</span> it does mean that you have to be careful with your indentation<span class="op">.*)</span></span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a>TypeOK <span class="op">==</span> <span class="op">/</span>\ i \in <span class="fl">0.</span><span class="er">.1000</span></span>
<span id="cb15-34"><a href="#cb15-34" aria-hidden="true" tabindex="-1"></a>          </span>
<span id="cb15-35"><a href="#cb15-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-36"><a href="#cb15-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-37"><a href="#cb15-37" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-38"><a href="#cb15-38" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> Now we define of the initial predicate<span class="op">,</span> that specifies the initial      <span class="op">*)</span></span>
<span id="cb15-39"><a href="#cb15-39" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> values of the variables<span class="op">.</span>  I like to name this predicate Init<span class="op">,</span> but the   <span class="op">*)</span></span>
<span id="cb15-40"><a href="#cb15-40" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> name doesn&#39;t matter<span class="op">.</span>                                                    <span class="op">*)</span></span>
<span id="cb15-41"><a href="#cb15-41" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-42"><a href="#cb15-42" aria-hidden="true" tabindex="-1"></a>Init <span class="op">==</span>  <span class="op">/</span>\ <span class="op">(</span>pc <span class="op">=</span> <span class="st">&quot;start&quot;</span><span class="op">)</span> </span>
<span id="cb15-43"><a href="#cb15-43" aria-hidden="true" tabindex="-1"></a>         <span class="op">/</span>\ <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb15-44"><a href="#cb15-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-45"><a href="#cb15-45" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-46"><a href="#cb15-46" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> Now we define the actions that our hero can perform<span class="op">.</span>  There are three   <span class="op">*)</span></span>
<span id="cb15-47"><a href="#cb15-47" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> things they can <span class="cf">do</span><span class="op">:</span>                                                     <span class="op">*)</span></span>
<span id="cb15-48"><a href="#cb15-48" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span>                                                                         <span class="op">*)</span></span>
<span id="cb15-49"><a href="#cb15-49" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span>   <span class="op">-</span> At Starting state we can pick any number from <span class="dv">0</span> to <span class="dv">1000</span>             <span class="op">*)</span></span>
<span id="cb15-50"><a href="#cb15-50" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span>                                                                         <span class="op">*)</span></span>
<span id="cb15-51"><a href="#cb15-51" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span>   <span class="op">-</span> At middle state we can add <span class="dv">1</span>                                        <span class="op">*)</span></span>
<span id="cb15-52"><a href="#cb15-52" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span>                                                                         <span class="op">*)</span></span>
<span id="cb15-53"><a href="#cb15-53" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span>   <span class="op">-</span> At middle state we can add <span class="dv">99</span>                                       <span class="op">*)</span></span>
<span id="cb15-54"><a href="#cb15-54" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span>                                                                         <span class="op">*)</span></span>
<span id="cb15-55"><a href="#cb15-55" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-56"><a href="#cb15-56" aria-hidden="true" tabindex="-1"></a>Pick <span class="op">==</span> \<span class="op">/</span> <span class="op">/</span>\ pc <span class="op">=</span> <span class="st">&quot;start&quot;</span></span>
<span id="cb15-57"><a href="#cb15-57" aria-hidden="true" tabindex="-1"></a>           <span class="op">/</span>\ i&#39; \in <span class="fl">0.</span><span class="er">.1000</span></span>
<span id="cb15-58"><a href="#cb15-58" aria-hidden="true" tabindex="-1"></a>           <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="st">&quot;middle&quot;</span></span>
<span id="cb15-59"><a href="#cb15-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-60"><a href="#cb15-60" aria-hidden="true" tabindex="-1"></a>Add1 <span class="op">==</span> \<span class="op">/</span> <span class="op">/</span>\ pc <span class="op">=</span> <span class="st">&quot;middle&quot;</span></span>
<span id="cb15-61"><a href="#cb15-61" aria-hidden="true" tabindex="-1"></a>           <span class="op">/</span>\ i&#39; <span class="op">=</span> i <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb15-62"><a href="#cb15-62" aria-hidden="true" tabindex="-1"></a>           <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="st">&quot;done&quot;</span></span>
<span id="cb15-63"><a href="#cb15-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-64"><a href="#cb15-64" aria-hidden="true" tabindex="-1"></a>Add2 <span class="op">==</span> \<span class="op">/</span> <span class="op">/</span>\ pc <span class="op">=</span> <span class="st">&quot;middle&quot;</span></span>
<span id="cb15-65"><a href="#cb15-65" aria-hidden="true" tabindex="-1"></a>           <span class="op">/</span>\ i&#39; <span class="op">=</span> i <span class="op">+</span> <span class="dv">99</span></span>
<span id="cb15-66"><a href="#cb15-66" aria-hidden="true" tabindex="-1"></a>           <span class="op">/</span>\ pc&#39; <span class="op">=</span> <span class="st">&quot;yum&quot;</span></span>
<span id="cb15-67"><a href="#cb15-67" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-68"><a href="#cb15-68" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-69"><a href="#cb15-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-70"><a href="#cb15-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-71"><a href="#cb15-71" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-72"><a href="#cb15-72" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> We define the next<span class="op">-</span>state relation<span class="op">,</span> which I like to call Next<span class="op">.</span>  A Next   <span class="op">*)</span></span>
<span id="cb15-73"><a href="#cb15-73" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> step is a step of one of the six actions defined above<span class="op">.</span>  Hence<span class="op">,</span> Next is <span class="op">*)</span></span>
<span id="cb15-74"><a href="#cb15-74" aria-hidden="true" tabindex="-1"></a><span class="op">(*</span> the disjunction of those actions<span class="op">.</span>                                       <span class="op">*)</span></span>
<span id="cb15-75"><a href="#cb15-75" aria-hidden="true" tabindex="-1"></a><span class="op">(***************************************************************************)</span></span>
<span id="cb15-76"><a href="#cb15-76" aria-hidden="true" tabindex="-1"></a>Next <span class="op">==</span> Pick \<span class="op">/</span> Add1 \<span class="op">/</span> Add2</span></code></pre></div>
<div class="sourceCode" id="cb16"><pre class="sourceCode .txt"><code class="sourceCode default"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>Status</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>Checking coinchange.tla / coinchange.cfg</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>Errors 1 error(s)</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>Start: 15:01:27 (Oct 20), end: 15:01:27 (Oct 20)</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>States</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>Time	    Diameter	Found	  Distinct	Queue</span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>00:00:00	3	        3,004	  3,004	    2,001</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>Coverage</span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>Module	    Action  Total   Distinct</span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>coinchange  Init	  2	      2</span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>Errors</span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a>Deadlock reached.</span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>Error Trace</span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a>1: Initial predicate</span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>  i     0</span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>  pc    &quot;start&quot;</span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a>2: Pick in simple</span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>  i     0</span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>  pc M  &quot;middle&quot;</span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a>3: Add1 in coinchange</span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a>  i M   1</span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a>  pc M  &quot;done&quot;</span></code></pre></div>
<ul>
<li>The error trace will only show the most recent error.
<ul>
<li>Notice <code>i</code> couldve been any number from 0 to 1000 in <code>"start"</code> but the error trace only showed 0.</li>
<li>Notice how <code>Add2</code> doesnt show up since it takes the most recent error which is <code>Add1</code></li>
</ul></li>
</ul>
</section>
</section>
<section id="deadlock" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Deadlock</h1>
<ul>
<li>Deadlock means there is no successor state
<ul>
<li>All terminating program Deadlocks by definition since last state is the deadlock state</li>
</ul></li>
</ul>
</section>
<section id="combining-models" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Combining models</h1>
<p>model A:</p>
<ul>
<li>VARIABLES: <span class="math inline">\(i\)</span></li>
<li>INIT: <span class="math inline">\(i=0\)</span></li>
<li>TRANSITIONS: <span class="math inline">\((i \rightarrow i + 1) \lor (i \rightarrow i)\)</span></li>
</ul>
<p>model B:</p>
<ul>
<li>VARIABLES: <span class="math inline">\(j\)</span></li>
<li>INIT: <span class="math inline">\(j=0\)</span></li>
<li>TRANSITIONS: <span class="math inline">\((j \rightarrow j + 1) \lor (j \rightarrow j)\)</span></li>
</ul>
<p>model A + B:</p>
<ul>
<li>VARIABLES: <span class="math inline">\(i,j\)</span></li>
<li>INIT: <span class="math inline">\(i=0, j=0\)</span></li>
<li>TRANSITIONS: <span class="math inline">\((i \rightarrow i,j \rightarrow j) \lor (i \rightarrow i + 1,j \rightarrow j) \lor (i \rightarrow i,j \rightarrow j + 1) \lor (i \rightarrow i +1 ,j \rightarrow j+1)\)</span></li>
</ul>
<div class="sourceCode" id="cb17"><pre class="sourceCode .txt"><code class="sourceCode default"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>  0,0 ---&gt; 1,0 ---&gt; 2,0 ... </span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  |   \     |  \     |</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  |      \  V    \   |</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  0,1 --- &gt; 1,1 ---&gt; 2,1 ...</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>  |  \      |  \     |</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>  |     \   V    \   |</span></code></pre></div>
<p><span class="math inline">\(\bigcirc P\)</span> : P is true in the SUCCESSOR step</p>
<div class='mermaid'>graph LR;
    A[" "]-->B[" "];
    B-->C["P"];
    C-->D[" "];
    D-->E[" "];</div>
<p><span class="math inline">\(\square P\)</span> : P is true at ALL times</p>
<div class='mermaid'>graph LR;
    A["P"]-->B["P"];
    B-->C["P"];
    C-->D["P"];
    D-->E["P"];</div>
<p><span class="math inline">\(\diamond P\)</span>: P is EVENTUALLY true</p>
<div class='mermaid'>graph LR;
    A[" "]-->B[" "];
    B-->C[" "];
    C-->D["P"];
    D-->E[" "];
</div>
<p><span class="math inline">\(P u Q\)</span> : P will be true UNTIL Q is true</p>
<div class='mermaid'>graph LR;
    A["P"]-->B["P"];
    B-->C["P"];
    C-->D["Q"];
    D-->E[" "];
</div>
<p><span class="math inline">\(P \leadsto Q\)</span> : When P is true, Q WILL EVENTUALLY be TRUE</p>
<div class='mermaid'>graph LR;
    A[" "]-->B["P"];
    B-->C["P"];
    C-->D[" "];
    D-->E["Q"];
</div>
</section>
]]></summary>
</entry>
<entry>
    <title>SVG</title>
    <link href="https://userjy.github.io/posts/2022-09-02-SVG.html" />
    <id>https://userjy.github.io/posts/2022-09-02-SVG.html</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  2, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;cloud&#39;." href="/tags/cloud.html">cloud</a>, <a title="All pages tagged &#39;frontend&#39;." href="/tags/frontend.html">frontend</a>
    
</div>
<div class="sourceCode" id="cb1" data-filename="spritesheet.svg"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;?xml</span> version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;<span class="kw">?&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;svg&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- SVG asset 1 --&gt;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;symbol</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;bleh&quot;</span> <span class="er">x</span><span class="ot">=</span><span class="st">&quot;2.5vh&quot;</span> <span class="er">y</span><span class="ot">=</span><span class="st">&quot;8.5vh&quot;</span> </span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ot">    width=</span><span class="st">&quot;5vw&quot;</span> <span class="er">height</span><span class="ot">=</span><span class="st">&quot;5vh&quot;</span> </span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="ot">    viewBox=</span><span class="st">&quot;0 0 50 20&quot;</span> <span class="er">style</span> <span class="ot">=</span> <span class="st">&quot;filter:invert(100)&quot;</span> </span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ot">    xmlns=</span><span class="st">&quot;http://www.w3.org/2000/svg&quot;</span><span class="kw">&gt;</span>&gt;</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;g&gt;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;path</span> <span class="er">d</span><span class="ot">=</span><span class="st">&quot;...&quot;</span><span class="kw">&gt;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;path</span> <span class="er">d</span><span class="ot">=</span><span class="st">&quot;...&quot;</span><span class="kw">&gt;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="kw">&lt;/g&gt;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/symbol&gt;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- SVG asset 2 --&gt;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;symbol</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;hilo&quot;</span><span class="kw">&gt;</span> </span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>        ...</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/symbol&gt;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/svg&gt;</span></span></code></pre></div>
<div class="sourceCode" id="cb2" data-filename="index.html"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;svg&gt;&lt;use</span> <span class="er">href</span> <span class="ot">=</span> <span class="st">&quot;/spritesheet.svg#bleh&quot;</span> <span class="kw">&gt;&lt;/use&gt;&lt;/svg&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;svg&gt;&lt;use</span> <span class="er">href</span> <span class="ot">=</span> <span class="st">&quot;/spritesheet.svg#hilo&quot;</span> <span class="kw">&gt;&lt;/use&gt;&lt;/svg&gt;</span></span></code></pre></div>
<section id="symbol" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> symbol</h1>
<ul>
<li>Instead of having multiple .svg files we can combine all of them into one .svg file</li>
<li>Each <code>&lt;symbol&gt;</code> is a separate svg graphic
<ul>
<li>Just swap <code>&lt;svg&gt;</code> tag to <code>&lt;symbol&gt;</code> to convert individual .svg</li>
</ul></li>
<li>To use the symbol svg in your HTML doc:
<ul>
<li><code>&lt;svg&gt;&lt;use href= "...svgsheet.svg#theIDname&gt;</code></li>
</ul></li>
</ul>
</section>
<section id="position" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> position</h1>
<ul>
<li>move the entire svg using <code>x</code> <code>y</code>
<ul>
<li><code>&lt;symbol...x="2.5vh" y="8.5vh"</code></li>
</ul></li>
</ul>
</section>
<section id="viewbox-for-panning-zooming" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> viewBox for Panning Zooming</h1>
<ul>
<li>viewBox <strong>DOES NOT move the position of the SVG</strong></li>
<li>viewBox only allows zooming and panning of the current svg
<ul>
<li><code>viewBox=" panRight panDown zoomOutWidth zoomOutHeight"</code>
<ul>
<li>1st param: Increase/Decrease =&gt; Pan Right/Left</li>
<li>2nd param: Increase/Decrease =&gt; Pan Down/Up</li>
<li>3rd param: Increase/Decrease =&gt; Zoom Out/In width</li>
<li>4rth param: Increase/Decrease =&gt; Zoom Out/In height
<!--  --></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="group-g" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Group g</h1>
<ul>
<li><code>&lt;g&gt;</code> stands for group which lets us group <code>&lt;path&gt;</code> elements
<ul>
<li><code>&lt;path&gt;</code> elements hold the drawings</li>
</ul></li>
</ul>
</section>
<section id="pixel-to-vwvh" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> pixel to vw,vh</h1>
<ul>
<li>say you have 66px height element and want to convert it to vh
<ul>
<li>100*66/window.outerHeight</li>
</ul></li>
</ul>
</section>
]]></summary>
</entry>
<entry>
    <title>Rosetta 2</title>
    <link href="https://userjy.github.io/posts/2022-09-02-Rosetta2.html" />
    <id>https://userjy.github.io/posts/2022-09-02-Rosetta2.html</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  2, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>
    
</div>
<section id="build-datatype" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> build datatype</h1>
<div class="sourceCode" id="cb1"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Bitcoin <span class="dt">int</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>x <span class="op">:=</span> Bitcoin<span class="op">(</span><span class="dv">10</span><span class="op">)</span></span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Bitcoin</span> <span class="ot">=</span> <span class="dt">Bitcoin</span> <span class="dt">Int</span></span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">int</span> Bitcoin<span class="op">;</span></span></code></pre></div>
</section>
<section id="insertion-sort" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Insertion sort</h1>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>insertionSort[a_List] :<span class="op">=</span> Module[</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    {A <span class="op">=</span> a},</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    For[i <span class="op">=</span> <span class="dv">2</span>, i <span class="op">&lt;=</span> Length[A], i<span class="op">++</span>,</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        value <span class="op">=</span> A[[i]]<span class="op">;</span>    </span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        j <span class="op">=</span> i <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        While[j <span class="op">&gt;=</span> <span class="dv">1</span> <span class="op">&amp;&amp;</span> A[[j]] <span class="op">&gt;</span> value, </span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>            A[[j <span class="op">+</span> <span class="dv">1</span>]] <span class="op">=</span> A[[j]]<span class="op">;</span> </span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>            j<span class="op">--;</span>]<span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>            A[[j <span class="op">+</span> <span class="dv">1</span>]] <span class="op">=</span> value<span class="op">;</span>]<span class="op">;</span> </span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    A</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>]</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>insertionSort<span class="op">@</span>{ <span class="dv">2</span>, <span class="dv">1</span>, <span class="dv">3</span>, <span class="dv">5</span>}</span></code></pre></div>
<div class="sourceCode" id="cb5"><pre class="sourceCode c++"><code class="sourceCode cpp"></code></pre></div>
</section>
<section id="http-server" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Http server</h1>
<div class="sourceCode" id="cb6"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span> main</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span><span class="op">(</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;net/http&quot;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;fmt&quot;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;strings&quot;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> MyServer <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> <span class="op">(</span>p <span class="op">*</span>MyServer<span class="op">)</span> ServeHTTP<span class="op">(</span>w http<span class="op">.</span>ResponseWriter<span class="op">,</span> r <span class="op">*</span>http<span class="op">.</span>Request<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>	player <span class="op">:=</span> strings<span class="op">.</span>TrimPrefix<span class="op">(</span>r<span class="op">.</span>URL<span class="op">.</span>Path<span class="op">,</span> <span class="st">&quot;/players/&quot;</span><span class="op">)</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>    s <span class="op">:=</span> fmt<span class="op">.</span>Sprintf<span class="op">(</span><span class="st">&quot;&lt;h1&gt; %s &lt;/h1&gt;&quot;</span><span class="op">,</span> player<span class="op">)</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>	fmt<span class="op">.</span>Fprint<span class="op">(</span>w<span class="op">,</span> s<span class="op">)</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">(){</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>	server <span class="op">:=</span> <span class="op">&amp;</span>MyServer<span class="op">{}</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>	http<span class="op">.</span>ListenAndServe<span class="op">(</span><span class="st">&quot;:5000&quot;</span><span class="op">,</span> server<span class="op">)</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>override Muxer</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span> main</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span><span class="op">(</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;net/http&quot;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;fmt&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;strings&quot;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> MyServer <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> <span class="op">(</span>p MyServer<span class="op">)</span> ServeHTTP<span class="op">(</span>w http<span class="op">.</span>ResponseWriter<span class="op">,</span> r <span class="op">*</span>http<span class="op">.</span>Request<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>	</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>	router <span class="op">:=</span> http<span class="op">.</span>NewServeMux<span class="op">()</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>	router<span class="op">.</span>Handle<span class="op">(</span><span class="st">&quot;/&quot;</span><span class="op">,</span> http<span class="op">.</span>HandlerFunc<span class="op">(</span><span class="kw">func</span><span class="op">(</span>w http<span class="op">.</span>ResponseWriter<span class="op">,</span> r <span class="op">*</span>http<span class="op">.</span>Request<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>		content <span class="op">:=</span> <span class="st">&quot;AHHH&quot;</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>		s <span class="op">:=</span> fmt<span class="op">.</span>Sprintf<span class="op">(</span><span class="st">&quot;&lt;h1&gt; %s &lt;/h1&gt;&quot;</span><span class="op">,</span> content<span class="op">)</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>		w<span class="op">.</span>WriteHeader<span class="op">(</span>http<span class="op">.</span>StatusOK<span class="op">)</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>		fmt<span class="op">.</span>Fprint<span class="op">(</span>w<span class="op">,</span> s<span class="op">)</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>	<span class="op">}))</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>	router<span class="op">.</span>Handle<span class="op">(</span><span class="st">&quot;/players/&quot;</span><span class="op">,</span> http<span class="op">.</span>HandlerFunc<span class="op">(</span><span class="kw">func</span><span class="op">(</span>w http<span class="op">.</span>ResponseWriter<span class="op">,</span> r <span class="op">*</span>http<span class="op">.</span>Request<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>		player <span class="op">:=</span> strings<span class="op">.</span>TrimPrefix<span class="op">(</span>r<span class="op">.</span>URL<span class="op">.</span>Path<span class="op">,</span> <span class="st">&quot;/players/&quot;</span><span class="op">)</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>		s <span class="op">:=</span> fmt<span class="op">.</span>Sprintf<span class="op">(</span><span class="st">&quot;&lt;h1&gt; %s &lt;/h1&gt;&quot;</span><span class="op">,</span> player<span class="op">)</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>		w<span class="op">.</span>WriteHeader<span class="op">(</span>http<span class="op">.</span>StatusOK<span class="op">)</span></span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>		fmt<span class="op">.</span>Fprint<span class="op">(</span>w<span class="op">,</span> s<span class="op">)</span></span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>	<span class="op">}))</span></span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>	</span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>	router<span class="op">.</span>ServeHTTP<span class="op">(</span>w<span class="op">,</span> r<span class="op">)</span></span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">(){</span></span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>	server <span class="op">:=</span> MyServer<span class="op">{}</span></span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>	http<span class="op">.</span>ListenAndServe<span class="op">(</span><span class="st">&quot;:5000&quot;</span><span class="op">,</span> server<span class="op">)</span></span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<section id="dapr" class="level2" data-number="3.1">
<h2 data-number="3.1"><span class="header-section-number">3.1</span> Dapr</h2>
<div class="sourceCode" id="cb8"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span> main</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span><span class="op">(</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;net/http&quot;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>	<span class="co">// &quot;fmt&quot;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>	<span class="co">// &quot;strings&quot;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;encoding/json&quot;</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Subscription <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>	PubSubName <span class="dt">string</span> <span class="st">`json:&quot;pubsubname&quot;`</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>	Topic <span class="dt">string</span> <span class="st">`json:&quot;topic&quot;`</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>	Route <span class="dt">string</span> <span class="st">`json:&quot;route&quot;`</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> MyServer <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> <span class="op">(</span>p MyServer<span class="op">)</span> ServeHTTP<span class="op">(</span>w http<span class="op">.</span>ResponseWriter<span class="op">,</span> r <span class="op">*</span>http<span class="op">.</span>Request<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>    subscriptions <span class="op">:=</span> <span class="op">[]</span>Subscription<span class="op">{</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>			<span class="op">{</span><span class="st">&quot;a&quot;</span><span class="op">,</span><span class="st">&quot;b&quot;</span><span class="op">,</span><span class="st">&quot;c&quot;</span><span class="op">},</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span><span class="st">&quot;d&quot;</span><span class="op">,</span><span class="st">&quot;e&quot;</span><span class="op">,</span><span class="st">&quot;f&quot;</span><span class="op">},</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>	router <span class="op">:=</span> http<span class="op">.</span>NewServeMux<span class="op">()</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>	router<span class="op">.</span>Handle<span class="op">(</span><span class="st">&quot;/dapr/subscribe/&quot;</span><span class="op">,</span> http<span class="op">.</span>HandlerFunc<span class="op">(</span><span class="kw">func</span><span class="op">(</span>w http<span class="op">.</span>ResponseWriter<span class="op">,</span> r <span class="op">*</span>http<span class="op">.</span>Request<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>		</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>		json<span class="op">.</span>NewEncoder<span class="op">(</span>w<span class="op">).</span>Encode<span class="op">(</span>subscriptions<span class="op">)</span></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>	<span class="op">}))</span></span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>	</span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>	router<span class="op">.</span>ServeHTTP<span class="op">(</span>w<span class="op">,</span> r<span class="op">)</span></span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">(){</span></span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a>	server <span class="op">:=</span> MyServer<span class="op">{}</span></span>
<span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>	http<span class="op">.</span>ListenAndServe<span class="op">(</span><span class="st">&quot;:5000&quot;</span><span class="op">,</span> server<span class="op">)</span></span>
<span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb9"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span> main</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span><span class="op">(</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;net/http&quot;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;log&quot;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>	<span class="co">// &quot;fmt&quot;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>	<span class="co">// &quot;strings&quot;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;encoding/json&quot;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Subscription <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>	PubSubName <span class="dt">string</span> <span class="st">`json:&quot;pubsubname&quot;`</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>	Topic <span class="dt">string</span> <span class="st">`json:&quot;topic&quot;`</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>	Route <span class="dt">string</span> <span class="st">`json:&quot;route&quot;`</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> MyServer <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> <span class="op">(</span>p MyServer<span class="op">)</span> ServeHTTP<span class="op">(</span>w http<span class="op">.</span>ResponseWriter<span class="op">,</span> r <span class="op">*</span>http<span class="op">.</span>Request<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    subscriptions <span class="op">:=</span> <span class="op">[]</span>Subscription<span class="op">{</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>		<span class="op">{</span><span class="st">&quot;a&quot;</span><span class="op">,</span><span class="st">&quot;b&quot;</span><span class="op">,</span><span class="st">&quot;c&quot;</span><span class="op">},</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>		<span class="op">{</span><span class="st">&quot;d&quot;</span><span class="op">,</span><span class="st">&quot;e&quot;</span><span class="op">,</span><span class="st">&quot;f&quot;</span><span class="op">},</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>	router <span class="op">:=</span> http<span class="op">.</span>NewServeMux<span class="op">()</span></span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>	router<span class="op">.</span>Handle<span class="op">(</span><span class="st">&quot;/dapr/subscribe/&quot;</span><span class="op">,</span> http<span class="op">.</span>HandlerFunc<span class="op">(</span><span class="kw">func</span><span class="op">(</span>w http<span class="op">.</span>ResponseWriter<span class="op">,</span> r <span class="op">*</span>http<span class="op">.</span>Request<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>		<span class="kw">switch</span> r<span class="op">.</span>Method <span class="op">{</span></span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>			<span class="kw">case</span> http<span class="op">.</span>MethodGet<span class="op">:</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>				json<span class="op">.</span>NewEncoder<span class="op">(</span>w<span class="op">).</span>Encode<span class="op">(</span>subscriptions<span class="op">)</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span></span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>	<span class="op">}))</span></span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a>	<span class="kw">for</span> _<span class="op">,</span>i <span class="op">:=</span> <span class="kw">range</span> subscriptions<span class="op">{</span></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>		router<span class="op">.</span>Handle<span class="op">(</span>i<span class="op">.</span>PubSubName<span class="op">,</span> http<span class="op">.</span>HandlerFunc<span class="op">(</span><span class="kw">func</span><span class="op">(</span>w http<span class="op">.</span>ResponseWriter<span class="op">,</span> r <span class="op">*</span>http<span class="op">.</span>Request<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a>			<span class="kw">switch</span> r<span class="op">.</span>Method <span class="op">{</span></span>
<span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a>				<span class="kw">case</span> http<span class="op">.</span>MethodPost<span class="op">:</span></span>
<span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a>					log<span class="op">.</span>Println<span class="op">(</span>r<span class="op">.</span>Body<span class="op">)</span></span>
<span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a>			<span class="op">}</span></span>
<span id="cb9-37"><a href="#cb9-37" aria-hidden="true" tabindex="-1"></a>		<span class="op">}))</span></span>
<span id="cb9-38"><a href="#cb9-38" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb9-39"><a href="#cb9-39" aria-hidden="true" tabindex="-1"></a>	router<span class="op">.</span>ServeHTTP<span class="op">(</span>w<span class="op">,</span> r<span class="op">)</span></span>
<span id="cb9-40"><a href="#cb9-40" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-41"><a href="#cb9-41" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">(){</span></span>
<span id="cb9-42"><a href="#cb9-42" aria-hidden="true" tabindex="-1"></a>	server <span class="op">:=</span> MyServer<span class="op">{}</span></span>
<span id="cb9-43"><a href="#cb9-43" aria-hidden="true" tabindex="-1"></a>	http<span class="op">.</span>ListenAndServe<span class="op">(</span><span class="st">&quot;:5000&quot;</span><span class="op">,</span> server<span class="op">)</span></span>
<span id="cb9-44"><a href="#cb9-44" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
</section>
]]></summary>
</entry>
<entry>
    <title>Rosetta 1</title>
    <link href="https://userjy.github.io/posts/2022-09-02-Rosetta1.html" />
    <id>https://userjy.github.io/posts/2022-09-02-Rosetta1.html</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  2, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>
    
</div>
<div id="TOC"><ul>
<li><a href="#oop"><span class="toc-section-number">1</span> OOP</a></li>
<li><a href="#basics"><span class="toc-section-number">2</span> Basics</a></li>
<li><a href="#array"><span class="toc-section-number">3</span> Array</a></li>
<li><a href="#listvectorslice"><span class="toc-section-number">4</span> List/Vector/Slice</a></li>
<li><a href="#references"><span class="toc-section-number">5</span> References</a>
<ul>
<li><a href="#ownership"><span class="toc-section-number">5.1</span> Ownership</a></li>
</ul></li>
<li><a href="#struct"><span class="toc-section-number">6</span> Struct</a></li>
<li><a href="#strings"><span class="toc-section-number">7</span> Strings</a></li>
<li><a href="#hashmapdict"><span class="toc-section-number">8</span> Hashmap,Dict</a></li>
<li><a href="#error"><span class="toc-section-number">9</span> Error</a></li>
<li><a href="#typescript"><span class="toc-section-number">10</span> Typescript</a></li>
</ul></div>
<section id="oop" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> OOP</h1>
<ul>
<li>Plain JS classes only allow <code>extends</code> with concrete classes</li>
<li>Plain JS do not have interfaces nor abstract classes/methods</li>
<li>C only has structs, not classes</li>
</ul>
</section>
<section id="basics" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Basics</h1>
<div data-group="a1" data-glabel="ts">
<div class="sourceCode" id="cb1"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>let bleh <span class="op">:</span> <span class="dt">any</span> <span class="op">=</span> <span class="dv">5</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>let msg <span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> <span class="st">&quot;hello&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>let two <span class="op">:</span> <span class="dt">number</span> <span class="op">=</span> <span class="dv">2</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>let flag <span class="op">:</span> bool <span class="op">=</span> false</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>let kids <span class="op">:</span> <span class="dt">string</span>[] <span class="op">=</span> [<span class="st">&quot;bob&quot;</span><span class="op">,</span><span class="st">&quot;rex&quot;</span><span class="op">,</span><span class="st">&quot;luke&quot;</span>]</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>let coproduct <span class="op">:</span> (<span class="dt">string</span> <span class="op">|</span> <span class="dt">number</span>) <span class="op">=</span> <span class="dv">6</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>let listCoproduct <span class="op">:</span> (<span class="dt">string</span> <span class="op">|</span> <span class="dt">number</span>)[] <span class="op">=</span> [<span class="dv">4</span><span class="op">,</span><span class="st">&quot;hi&quot;</span><span class="op">,</span><span class="dv">6</span><span class="op">,</span><span class="st">&quot;no&quot;</span>]</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>interface BlogEntry <span class="op">=</span> {</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    id<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    content<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">somethn</span> <span class="op">&lt;</span>Type<span class="op">&gt;</span>(x <span class="op">:</span> Type) <span class="op">:</span> Type[] {</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    return [x<span class="op">,</span>x]<span class="op">;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>const hi <span class="op">=</span> <span class="op">&lt;</span>T<span class="op">,&gt;</span>(x<span class="op">:</span> T) <span class="op">:</span> T <span class="kw">=&gt;</span> {</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    return x<span class="op">;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<ul>
<li>We intentionally add a comma after T, in <code>&lt;T,&gt;(x: T)</code> otherwise it will conflict with jsx dom tags.</li>
</ul>
</div>
<div data-group="a1" data-glabel="go">
<div class="sourceCode" id="cb2"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> bleh any</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>bleh <span class="op">=</span> <span class="dv">2</span> </span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>blehX <span class="op">:=</span> <span class="dv">3</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> s <span class="dt">string</span> <span class="op">=</span> <span class="st">&quot;hello&quot;</span></span></code></pre></div>
</div>
<div data-group="a1" data-glabel="rust">
<ul>
<li>Variables in rust are by default <code>const</code> in C</li>
</ul>
<div class="sourceCode" id="cb3"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> <span class="kw">mut</span> hah <span class="op">:</span> <span class="dt">i32</span> <span class="op">=</span> <span class="dv">99</span><span class="op">;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>hah <span class="op">=</span> <span class="dv">43</span><span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> bleh<span class="op">:</span> string <span class="op">=</span> <span class="st">&quot;Ha&quot;</span><span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> AHH<span class="op">:</span> <span class="dt">char</span> <span class="op">=</span> <span class="ch">&#39;h&#39;</span><span class="op">;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> <span class="kw">mut</span> v <span class="op">:</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;=</span> <span class="pp">vec!</span>[<span class="dv">10</span><span class="op">,</span><span class="dv">20</span><span class="op">,</span><span class="dv">30</span><span class="op">,</span><span class="dv">40</span>]<span class="op">;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="pp">println!</span>(<span class="st">&quot;Hello {}!&quot;</span><span class="op">,</span><span class="st">&quot;hi&quot;</span>)<span class="op">;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>#destructuring</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> kittycat <span class="op">=</span> (<span class="st">&quot;Furry McFurson&quot;</span><span class="op">,</span> <span class="dv">3.5</span>)<span class="op">;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> (name<span class="op">,</span>age) <span class="op">=</span> kittycat<span class="op">;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> numbers <span class="op">=</span> (<span class="dv">1</span><span class="op">,</span> <span class="dv">9</span><span class="op">,</span> <span class="dv">3</span>)<span class="op">;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="pp">assert_eq!</span>(<span class="dv">9</span><span class="op">,</span> numbers<span class="op">.</span><span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="co">//if-let while-let syntax for pattern matching</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> maybe4<span class="op">:</span> <span class="dt">Option</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;</span> <span class="op">=</span> <span class="cn">Some</span>(<span class="dv">4</span>)<span class="op">;</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="kw">if</span> <span class="kw">let</span> <span class="cn">Some</span>(x) <span class="op">=</span> maybe4<span class="op">{...};</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="kw">while</span> <span class="kw">let</span> <span class="cn">Some</span>(x) <span class="op">=</span> maybe4<span class="op">{...};</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> sale_price(price<span class="op">:</span> <span class="dt">i32</span>) <span class="op">-&gt;</span> <span class="dt">i32</span><span class="op">{</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> is_even(price) <span class="op">{</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>        price <span class="op">-</span> <span class="dv">10</span> #w<span class="op">/</span>o semi<span class="op">-</span>colon </span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        #return price <span class="op">-</span> <span class="dv">10</span><span class="op">;</span>  #w<span class="op">/</span> semi<span class="op">-</span>colon</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="kw">else</span> <span class="op">{</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>        price <span class="op">-</span> <span class="dv">3</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> bigger(a<span class="op">:</span> <span class="dt">i32</span><span class="op">,</span> b<span class="op">:</span> <span class="dt">i32</span>) <span class="op">-&gt;</span> <span class="dt">i32</span> <span class="op">{</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> a <span class="op">&gt;</span> b<span class="op">{</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>        a</span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span><span class="kw">else</span> <span class="kw">if</span> a <span class="op">&lt;=</span> b<span class="op">{</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>        b</span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<table>
<thead>
<tr class="header">
<th>Type</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>int</td>
<td>i32</td>
</tr>
<tr class="even">
<td>bool</td>
<td><code>bool</code></td>
</tr>
<tr class="odd">
<td>char</td>
<td><code>char</code></td>
</tr>
</tbody>
</table>
<ul>
<li>Assignment of <strong>non-trivial</strong> objects in Rust is actually consume/move</li>
</ul>
</div>
</section>
<section id="array" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Array</h1>
<div class="sourceCode" id="cb4"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> main() <span class="op">{</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> a  <span class="op">=</span> [<span class="st">&quot;hi&quot;</span><span class="op">;</span><span class="dv">100</span>]<span class="op">;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> a<span class="op">.</span>len() <span class="op">&gt;=</span> <span class="dv">100</span> <span class="op">{</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="pp">println!</span>(<span class="st">&quot;Wow, that&#39;s a big array!&quot;</span>)<span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="kw">else</span> <span class="op">{</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>        <span class="pp">println!</span>(<span class="st">&quot;Meh, I eat arrays like that for breakfast.&quot;</span>)<span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb5"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> slice_out_of_array() <span class="op">{</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> a <span class="op">=</span> [<span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span>]<span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> nice_slice <span class="op">=</span> <span class="op">&amp;</span>a[<span class="dv">1</span><span class="op">..</span><span class="dv">4</span>]<span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>([<span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span>]<span class="op">,</span> nice_slice)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
<section id="listvectorslice" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> List/Vector/Slice</h1>
<div class="sourceCode" id="cb6"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> a <span class="op">=</span> [<span class="dv">10</span><span class="op">,</span> <span class="dv">20</span><span class="op">,</span> <span class="dv">30</span><span class="op">,</span> <span class="dv">40</span>]<span class="op">;</span> <span class="co">// a plain array</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> v <span class="op">:</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;=</span> <span class="pp">vec!</span>[<span class="dv">10</span><span class="op">,</span><span class="dv">20</span><span class="op">,</span><span class="dv">30</span><span class="op">,</span><span class="dv">40</span>]<span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> vec_loop(<span class="kw">mut</span> v<span class="op">:</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;</span>) <span class="op">-&gt;</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">for</span> i <span class="kw">in</span> v<span class="op">.</span>iter_mut() <span class="op">{</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">// </span><span class="al">TODO</span><span class="co">: Fill this up so that each element in the Vec `v` is</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// multiplied by 2.</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>i <span class="op">=</span> <span class="op">*</span>i <span class="op">*</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">// At this point, `v` should be equal to [4, 8, 12, 16, 20].</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>    v</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> vec_map(v<span class="op">:</span> <span class="op">&amp;</span><span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;</span>) <span class="op">-&gt;</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>    v<span class="op">.</span>iter()<span class="op">.</span>map(<span class="op">|</span>num<span class="op">|</span> <span class="op">{</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>        <span class="co">// </span><span class="al">TODO</span><span class="co">: Do the same thing as above - but instead of mutating the</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Vec, you can just return the new number!</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>        num <span class="op">*</span> <span class="dv">2</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)<span class="op">.</span>collect()</span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>cfg<span class="at">(</span>test<span class="at">)]</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="kw">mod</span> tests <span class="op">{</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a>    <span class="kw">use</span> <span class="kw">super</span><span class="pp">::</span><span class="op">*;</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>    <span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> test_vec_loop() <span class="op">{</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> v<span class="op">:</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;</span> <span class="op">=</span> (<span class="dv">1</span><span class="op">..</span>)<span class="op">.</span>filter(<span class="op">|</span>x<span class="op">|</span> x <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>)<span class="op">.</span>take(<span class="dv">5</span>)<span class="op">.</span>collect()<span class="op">;</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> ans <span class="op">=</span> vec_loop(v<span class="op">.</span>clone())<span class="op">;</span></span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>        <span class="pp">assert_eq!</span>(ans<span class="op">,</span> v<span class="op">.</span>iter()<span class="op">.</span>map(<span class="op">|</span>x<span class="op">|</span> x <span class="op">*</span> <span class="dv">2</span>)<span class="op">.</span><span class="pp">collect::</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;&gt;</span>())<span class="op">;</span></span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a>    <span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> test_vec_map() <span class="op">{</span></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> v<span class="op">:</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;</span> <span class="op">=</span> (<span class="dv">1</span><span class="op">..</span>)<span class="op">.</span>filter(<span class="op">|</span>x<span class="op">|</span> x <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>)<span class="op">.</span>take(<span class="dv">5</span>)<span class="op">.</span>collect()<span class="op">;</span></span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> ans <span class="op">=</span> vec_map(<span class="op">&amp;</span>v)<span class="op">;</span></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-42"><a href="#cb6-42" aria-hidden="true" tabindex="-1"></a>        <span class="pp">assert_eq!</span>(ans<span class="op">,</span> v<span class="op">.</span>iter()<span class="op">.</span>map(<span class="op">|</span>x<span class="op">|</span> x <span class="op">*</span> <span class="dv">2</span>)<span class="op">.</span><span class="pp">collect::</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;&gt;</span>())<span class="op">;</span></span>
<span id="cb6-43"><a href="#cb6-43" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb6-44"><a href="#cb6-44" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
<section id="references" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> References</h1>
<ul>
<li>init Pointers in rust using <code>let &amp; a : i32;</code>
<ul>
<li>deref pointer in rust using <code>*a</code></li>
</ul></li>
<li>init Pointers in C using <code>int* a;     * deref pointer in C using</code>*a`</li>
</ul>
<section id="ownership" class="level2" data-number="5.1">
<h2 data-number="5.1"><span class="header-section-number">5.1</span> Ownership</h2>
<div class="sourceCode" id="cb7"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> main() <span class="op">{</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> vec0 <span class="op">=</span> <span class="dt">Vec</span><span class="pp">::</span>new()<span class="op">;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> vec1 <span class="op">=</span> fill_vec(vec0)<span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">//ERROR below</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Do not change the following line!</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">println!</span>(<span class="st">&quot;{} has length {} content `{:?}`&quot;</span><span class="op">,</span> <span class="st">&quot;vec0&quot;</span><span class="op">,</span> vec0<span class="op">.</span>len()<span class="op">,</span> vec0)<span class="op">;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    vec1<span class="op">.</span>push(<span class="dv">88</span>)<span class="op">;</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="pp">println!</span>(<span class="st">&quot;{} has length {} content `{:?}`&quot;</span><span class="op">,</span> <span class="st">&quot;vec1&quot;</span><span class="op">,</span> vec1<span class="op">.</span>len()<span class="op">,</span> vec1)<span class="op">;</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> fill_vec(vec<span class="op">:</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;</span>) <span class="op">-&gt;</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">i32</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> vec <span class="op">=</span> vec<span class="op">;</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>    vec<span class="op">.</span>push(<span class="dv">22</span>)<span class="op">;</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>    vec<span class="op">.</span>push(<span class="dv">44</span>)<span class="op">;</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>    vec<span class="op">.</span>push(<span class="dv">66</span>)<span class="op">;</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>    vec</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb8"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>#numbers and characters are trivial literals that <span class="kw">do</span> get copied</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> <span class="kw">mut</span> a <span class="op">=</span> <span class="dv">5</span><span class="op">;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> <span class="kw">mut</span> b <span class="op">=</span> a<span class="op">;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="pp">println!</span>(<span class="st">&quot;{}&quot;</span><span class="op">,</span>a)<span class="op">;</span> #<span class="dv">5</span></span></code></pre></div>
<ul>
<li>vectors, strings, etc are non-trivial objects that do not get copied but moved</li>
<li>Rust is pass-by-destructive_move compared to C++ pass-by-value which copies a value into the function.
<ul>
<li>destructive_move from a “everything is a pointer perspective” is copying content of the pointer then NULLING the content of the older pointer.</li>
<li>visually a rust assignment is 2 arrows pointing to the same object, but then erasing the older arrow.</li>
</ul></li>
<li>Rust pass-by-reference from a “everything is a pointer perspective” is taking the address of the pointer, meaning we are taking the pointer itself.<br />
In rust they call this <strong>borrowing</strong> AKA we are borrowing the pointer.</li>
</ul>
<div class="sourceCode" id="cb9"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> A<span class="op">;</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> move_to(x<span class="op">:</span> A) <span class="op">{</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span><span class="co">//Rust auto Drops a here</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> test() <span class="op">{</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> a <span class="op">=</span> A<span class="op">;</span> <span class="co">//`a` is a pointer to 0x123 = addr(A)</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    move_to(a)<span class="op">;</span> <span class="co">// function parameter `x` is now the pointer to 0x123 = addr(A)</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>                <span class="co">// `a` is now not a pointer to 0x123 = addr(A)</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> c <span class="op">=</span> a<span class="op">;</span> <span class="co">// error, `a` does not point to anything anymore</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">//example in C</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> A <span class="op">=</span> <span class="dv">9</span><span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> <span class="op">*</span>a<span class="op">;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> <span class="op">&amp;</span>A<span class="op">;</span>    <span class="co">//let a = A; in rust</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> <span class="op">*</span>x<span class="op">;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> a<span class="op">;</span>     <span class="co">//move_to(a); in rust</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> NULL<span class="op">;</span></span></code></pre></div>
<div class="sourceCode" id="cb11"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> s <span class="op">=</span> <span class="pp">vec!</span>[<span class="st">&quot;udon&quot;</span><span class="op">.</span>to_string()<span class="op">,</span> <span class="st">&quot;ramen&quot;</span><span class="op">.</span>to_string()<span class="op">,</span> <span class="st">&quot;soba&quot;</span><span class="op">.</span>to_string()]<span class="op">;</span></span></code></pre></div>
<p><img src="https://i.stack.imgur.com/5Qk8q.png" /></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> t <span class="op">=</span> s<span class="op">;</span></span></code></pre></div>
<p><img src="https://i.stack.imgur.com/bYDqf.png" /></p>
</section>
</section>
<section id="struct" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Struct</h1>
<p>In rust a tuple is a struct. Below we have a struct, tuple and unit type.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> ColorClassicStruct <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// </span><span class="al">TODO</span><span class="co">: Something goes here</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    red <span class="op">:</span> <span class="dt">i32</span> <span class="op">,</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    green <span class="op">:</span> <span class="dt">i32</span><span class="op">,</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    blue <span class="op">:</span> <span class="dt">i32</span><span class="op">,</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> ColorTupleStruct(<span class="dt">i32</span><span class="op">,</span><span class="dt">i32</span><span class="op">,</span><span class="dt">i32</span>)<span class="op">;</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> UnitLikeStruct<span class="op">;</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="co">// </span><span class="al">TODO</span><span class="co">: Instantiate a classic c struct!</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> green <span class="op">=</span> ColorClassicStruct<span class="op">{</span>red<span class="op">:</span> <span class="dv">0</span><span class="op">,</span> green<span class="op">:</span> <span class="dv">255</span><span class="op">,</span> blue<span class="op">:</span> <span class="dv">0</span><span class="op">};</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="co">// </span><span class="al">TODO</span><span class="co">: Instantiate a tuple struct!</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> green <span class="op">=</span> ColorTupleStruct(<span class="dv">0</span><span class="op">,</span><span class="dv">255</span><span class="op">,</span><span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="co">// </span><span class="al">TODO</span><span class="co">: Instantiate a unit-like struct!</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> unit_like_struct <span class="op">=</span> UnitLikeStruct<span class="op">;</span></span></code></pre></div>
<p>Comments below show how the enum constructors would be defined as an inductive type in lean or coq.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> Message <span class="op">{</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    Echo(<span class="dt">String</span>)<span class="op">,</span> <span class="co">//Echo :: String -&gt; Message</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    Move <span class="op">{</span>x<span class="op">:</span> <span class="dt">i32</span><span class="op">,</span> y<span class="op">:</span><span class="dt">i32</span><span class="op">},</span> <span class="co">// Move :: Struct{i32,i32} -&gt; Message</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    ChangeColor(<span class="dt">i32</span><span class="op">,</span><span class="dt">i32</span><span class="op">,</span><span class="dt">i32</span>)<span class="op">,</span> <span class="co">// ChangeColor :: Tuple(i32,i32,i32) -&gt; Message</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    Quit<span class="op">,</span> <span class="co">// Quit :: Message</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="kw">match</span> Message<span class="op">{</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>    <span class="pp">Message::</span>Echo(p) <span class="op">=&gt;</span> <span class="op">...,</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>    <span class="pp">Message::</span>Move(s) <span class="op">=&gt;</span> <span class="op">...,</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>    <span class="pp">Message::</span>ChangeColor(a<span class="op">,</span>b<span class="op">,</span>c) <span class="op">=&gt;...,</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="pp">Message::</span>Quit <span class="op">=&gt;</span> <span class="op">...,</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
</section>
<section id="strings" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Strings</h1>
<ul>
<li>Rust <code>String</code> vs <code>&amp;str</code></li>
<li>Rust <code>&amp;str</code> is like C <code>*char</code></li>
<li>Rust <code>String</code> is like C <code>std::string</code></li>
</ul>
</section>
<section id="hashmapdict" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Hashmap,Dict</h1>
<p>2 ways to insert items into hashmap if item doesnt exist.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode rs"><code class="sourceCode rust"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">//method 1</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="kw">if</span> basket<span class="op">.</span>get(<span class="op">&amp;</span>fruit) <span class="op">==</span> <span class="cn">None</span> <span class="op">{</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>        basket<span class="op">.</span>insert(fruit<span class="op">,</span><span class="dv">11</span>)<span class="op">;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="co">//method2</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>basket<span class="op">.</span>entry(fruit)<span class="op">.</span>or_insert(<span class="dv">0</span>)<span class="op">;</span> <span class="co">//init if does not exist</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>basket<span class="op">.</span>entry(fruit) <span class="op">+=</span> <span class="dv">11</span><span class="op">;</span> <span class="co">//then modify</span></span></code></pre></div>
</section>
<section id="error" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> Error</h1>
<ul>
<li>Rust uses <code>Result&lt;S,T&gt;</code> types for error handling</li>
</ul>
</section>
<section id="typescript" class="level1" data-number="10">
<h1 data-number="10"><span class="header-section-number">10</span> Typescript</h1>
<div class="sourceCode" id="cb16"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>let message <span class="op">:</span> <span class="dt">any</span> <span class="op">=</span> <span class="st">&quot;Hello World&quot;</span><span class="op">;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>let messageA <span class="op">=</span> <span class="st">&quot;Hello World&quot;</span><span class="op">;</span> <span class="co">//same</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="co">//var message in vanilla JS</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(message)<span class="op">;</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="co">//string type</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>let StringA <span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>StringA <span class="op">=</span> <span class="st">&quot;hello&quot;</span><span class="op">;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="co">//number type</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>let numA <span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>numA <span class="op">=</span> <span class="dv">4</span><span class="op">;</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a><span class="co">//boolean type</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>let boolA <span class="op">:</span> <span class="dt">boolean</span><span class="op">;</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a>boolA <span class="op">=</span> false<span class="op">;</span></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a><span class="co">//list functor</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a>let arrStr <span class="op">:</span> <span class="dt">string</span>[] <span class="op">=</span> [<span class="st">&#39;a&#39;</span><span class="op">,</span><span class="st">&#39;b&#39;</span><span class="op">,</span><span class="st">&#39;c&#39;</span>]<span class="op">;</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>arrStr[<span class="dv">0</span>] <span class="op">=</span> <span class="st">&#39;e&#39;</span><span class="op">;</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>arrStr<span class="op">.</span><span class="fu">push</span>(<span class="st">&#39;e&#39;</span>)<span class="op">;</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a><span class="co">//Coproduct</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>let coproductA <span class="op">:</span> <span class="dt">string</span> <span class="op">|</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a>coproductA <span class="op">=</span> <span class="dv">4</span><span class="op">;</span></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(coproductA)<span class="op">;</span></span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a>coproductA <span class="op">=</span> <span class="st">&quot;hi&quot;</span><span class="op">;</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(coproductA)<span class="op">;</span></span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a><span class="co">//list functor applied to coproduct</span></span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true" tabindex="-1"></a>let listcoproduct <span class="op">:</span> (<span class="dt">string</span> <span class="op">|</span> <span class="dt">number</span>)[] <span class="op">=</span> [<span class="dv">1</span><span class="op">,</span><span class="st">&quot;a&quot;</span><span class="op">,</span><span class="dv">3</span>]<span class="op">;</span></span>
<span id="cb16-31"><a href="#cb16-31" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(listcoproduct)<span class="op">;</span></span>
<span id="cb16-32"><a href="#cb16-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-33"><a href="#cb16-33" aria-hidden="true" tabindex="-1"></a><span class="co">//Product type</span></span>
<span id="cb16-34"><a href="#cb16-34" aria-hidden="true" tabindex="-1"></a>let dog <span class="op">=</span> {</span>
<span id="cb16-35"><a href="#cb16-35" aria-hidden="true" tabindex="-1"></a>    name<span class="op">:</span> <span class="st">&quot;fido&quot;</span><span class="op">,</span></span>
<span id="cb16-36"><a href="#cb16-36" aria-hidden="true" tabindex="-1"></a>    age<span class="op">:</span> <span class="dv">10</span></span>
<span id="cb16-37"><a href="#cb16-37" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-38"><a href="#cb16-38" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(dog)<span class="op">;</span></span>
<span id="cb16-39"><a href="#cb16-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-40"><a href="#cb16-40" aria-hidden="true" tabindex="-1"></a><span class="co">//type alias</span></span>
<span id="cb16-41"><a href="#cb16-41" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> AnotherType <span class="op">=</span> <span class="dt">string</span> <span class="op">|</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb16-42"><a href="#cb16-42" aria-hidden="true" tabindex="-1"></a>let SomeObj <span class="op">:</span> AnotherType<span class="op">;</span></span>
<span id="cb16-43"><a href="#cb16-43" aria-hidden="true" tabindex="-1"></a>SomeObj <span class="op">=</span> <span class="dv">3</span><span class="op">;</span></span>
<span id="cb16-44"><a href="#cb16-44" aria-hidden="true" tabindex="-1"></a>SomeObj <span class="op">=</span> <span class="st">&quot;a&quot;</span><span class="op">;</span></span>
<span id="cb16-45"><a href="#cb16-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-46"><a href="#cb16-46" aria-hidden="true" tabindex="-1"></a><span class="co">//function</span></span>
<span id="cb16-47"><a href="#cb16-47" aria-hidden="true" tabindex="-1"></a>let mult <span class="op">=</span> (x<span class="op">:</span><span class="dt">number</span><span class="op">,</span> y<span class="op">:</span><span class="dt">number</span>)<span class="op">:</span><span class="dt">number</span> <span class="kw">=&gt;</span>{</span>
<span id="cb16-48"><a href="#cb16-48" aria-hidden="true" tabindex="-1"></a>    return x <span class="op">*</span> y<span class="op">;</span></span>
<span id="cb16-49"><a href="#cb16-49" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-50"><a href="#cb16-50" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="fu">mult</span>(<span class="dv">2</span><span class="op">,</span><span class="dv">4</span>))<span class="op">;</span></span>
<span id="cb16-51"><a href="#cb16-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-52"><a href="#cb16-52" aria-hidden="true" tabindex="-1"></a>let sum<span class="op">:</span> (x<span class="op">:</span><span class="dt">number</span><span class="op">,</span> y<span class="op">:</span><span class="dt">number</span>) <span class="kw">=&gt;</span> <span class="dt">number</span><span class="op">;</span> <span class="co">//predeclare type</span></span>
<span id="cb16-53"><a href="#cb16-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-54"><a href="#cb16-54" aria-hidden="true" tabindex="-1"></a>sum <span class="op">=</span> (p<span class="op">:</span><span class="dt">number</span><span class="op">,</span>q<span class="op">:</span> <span class="dt">number</span>) <span class="kw">=&gt;</span> {</span>
<span id="cb16-55"><a href="#cb16-55" aria-hidden="true" tabindex="-1"></a>    return p <span class="op">+</span> q<span class="op">;</span></span>
<span id="cb16-56"><a href="#cb16-56" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-57"><a href="#cb16-57" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="fu">sum</span>(<span class="dv">2</span><span class="op">,</span><span class="dv">4</span>))<span class="op">;</span></span>
<span id="cb16-58"><a href="#cb16-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-59"><a href="#cb16-59" aria-hidden="true" tabindex="-1"></a><span class="co">//generics or templates in C++</span></span>
<span id="cb16-60"><a href="#cb16-60" aria-hidden="true" tabindex="-1"></a>let somethn<span class="op">=</span> <span class="op">&lt;</span>T<span class="op">&gt;</span>(x <span class="op">:</span> T)<span class="op">:</span> T[] <span class="kw">=&gt;</span> {</span>
<span id="cb16-61"><a href="#cb16-61" aria-hidden="true" tabindex="-1"></a>    return [x<span class="op">,</span>x]<span class="op">;</span></span>
<span id="cb16-62"><a href="#cb16-62" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-63"><a href="#cb16-63" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="fu">somethn</span><span class="op">&lt;</span><span class="dt">string</span><span class="op">&gt;</span>(<span class="st">&quot;somethn&quot;</span>))<span class="op">;</span></span>
<span id="cb16-64"><a href="#cb16-64" aria-hidden="true" tabindex="-1"></a><span class="co">//another form</span></span>
<span id="cb16-65"><a href="#cb16-65" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">somethn2</span><span class="op">&lt;</span>T<span class="op">&gt;</span>(x <span class="op">:</span> T) <span class="op">:</span> T[] {</span>
<span id="cb16-66"><a href="#cb16-66" aria-hidden="true" tabindex="-1"></a>    return [x<span class="op">,</span>x]<span class="op">;</span></span>
<span id="cb16-67"><a href="#cb16-67" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-68"><a href="#cb16-68" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="fu">somethn2</span><span class="op">&lt;</span><span class="dt">string</span><span class="op">&gt;</span>(<span class="st">&quot;somethn2&quot;</span>))</span>
<span id="cb16-69"><a href="#cb16-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-70"><a href="#cb16-70" aria-hidden="true" tabindex="-1"></a><span class="co">//Unit type function</span></span>
<span id="cb16-71"><a href="#cb16-71" aria-hidden="true" tabindex="-1"></a>const hey <span class="op">=</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb16-72"><a href="#cb16-72" aria-hidden="true" tabindex="-1"></a>    <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="st">&quot;hey&quot;</span>)<span class="op">;</span></span>
<span id="cb16-73"><a href="#cb16-73" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-74"><a href="#cb16-74" aria-hidden="true" tabindex="-1"></a><span class="co">//Interface</span></span>
<span id="cb16-75"><a href="#cb16-75" aria-hidden="true" tabindex="-1"></a>interface CarInterface {</span>
<span id="cb16-76"><a href="#cb16-76" aria-hidden="true" tabindex="-1"></a>    model<span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb16-77"><a href="#cb16-77" aria-hidden="true" tabindex="-1"></a>    year<span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb16-78"><a href="#cb16-78" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-79"><a href="#cb16-79" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-80"><a href="#cb16-80" aria-hidden="true" tabindex="-1"></a>let somecar<span class="op">:</span> CarInterface <span class="op">=</span> {</span>
<span id="cb16-81"><a href="#cb16-81" aria-hidden="true" tabindex="-1"></a>    model <span class="op">:</span> <span class="st">&quot;Honda&quot;</span><span class="op">,</span></span>
<span id="cb16-82"><a href="#cb16-82" aria-hidden="true" tabindex="-1"></a>    year <span class="op">:</span> <span class="dv">1996</span></span>
<span id="cb16-83"><a href="#cb16-83" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-84"><a href="#cb16-84" aria-hidden="true" tabindex="-1"></a><span class="co">//Class</span></span>
<span id="cb16-85"><a href="#cb16-85" aria-hidden="true" tabindex="-1"></a>class electricCar implements CarInterface {</span>
<span id="cb16-86"><a href="#cb16-86" aria-hidden="true" tabindex="-1"></a>    model <span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb16-87"><a href="#cb16-87" aria-hidden="true" tabindex="-1"></a>    year <span class="op">:</span> <span class="dt">number</span><span class="op">;</span></span>
<span id="cb16-88"><a href="#cb16-88" aria-hidden="true" tabindex="-1"></a>    private msg <span class="op">:</span> <span class="dt">string</span><span class="op">;</span></span>
<span id="cb16-89"><a href="#cb16-89" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constructor</span>(x<span class="op">:</span> <span class="dt">string</span><span class="op">,</span> y <span class="op">:</span> <span class="dt">number</span><span class="op">,</span> z <span class="op">:</span> <span class="dt">string</span>){</span>
<span id="cb16-90"><a href="#cb16-90" aria-hidden="true" tabindex="-1"></a>        this<span class="op">.</span><span class="at">model</span> <span class="op">=</span> x<span class="op">;</span></span>
<span id="cb16-91"><a href="#cb16-91" aria-hidden="true" tabindex="-1"></a>        this<span class="op">.</span><span class="at">year</span> <span class="op">=</span> y<span class="op">;</span> </span>
<span id="cb16-92"><a href="#cb16-92" aria-hidden="true" tabindex="-1"></a>        this<span class="op">.</span><span class="at">msg</span> <span class="op">=</span> z<span class="op">;</span></span>
<span id="cb16-93"><a href="#cb16-93" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb16-94"><a href="#cb16-94" aria-hidden="true" tabindex="-1"></a>    outp <span class="op">=</span> ()<span class="op">:</span><span class="dt">string</span> <span class="kw">=&gt;</span> {</span>
<span id="cb16-95"><a href="#cb16-95" aria-hidden="true" tabindex="-1"></a>        return this<span class="op">.</span><span class="at">msg</span><span class="op">;</span></span>
<span id="cb16-96"><a href="#cb16-96" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb16-97"><a href="#cb16-97" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb16-98"><a href="#cb16-98" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-99"><a href="#cb16-99" aria-hidden="true" tabindex="-1"></a>let tesla <span class="op">=</span> <span class="kw">new</span> <span class="fu">electricCar</span>(<span class="st">&quot;model E&quot;</span><span class="op">,</span><span class="dv">2012</span><span class="op">,</span><span class="st">&quot;Honk Honk&quot;</span>)</span>
<span id="cb16-100"><a href="#cb16-100" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(tesla<span class="op">.</span><span class="fu">outp</span>())<span class="op">;</span></span>
<span id="cb16-101"><a href="#cb16-101" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-102"><a href="#cb16-102" aria-hidden="true" tabindex="-1"></a><span class="co">//Typescript with HTML</span></span>
<span id="cb16-103"><a href="#cb16-103" aria-hidden="true" tabindex="-1"></a><span class="co">//---------------------------------------------------------------------------mini project [START]</span></span>
<span id="cb16-104"><a href="#cb16-104" aria-hidden="true" tabindex="-1"></a><span class="co">//hook html inputform to javascript, ! tells compiler it will not be empty</span></span>
<span id="cb16-105"><a href="#cb16-105" aria-hidden="true" tabindex="-1"></a>const inputform <span class="op">=</span> document<span class="op">.</span><span class="fu">querySelector</span>(<span class="st">&#39;form&#39;</span>)<span class="op">!;</span></span>
<span id="cb16-106"><a href="#cb16-106" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(inputform)<span class="op">;</span></span>
<span id="cb16-107"><a href="#cb16-107" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-108"><a href="#cb16-108" aria-hidden="true" tabindex="-1"></a><span class="co">//get textbox text by the id</span></span>
<span id="cb16-109"><a href="#cb16-109" aria-hidden="true" tabindex="-1"></a>const modelxinput <span class="op">=</span> document<span class="op">.</span><span class="fu">querySelector</span>(<span class="st">&#39;#modelid&#39;</span>) <span class="im">as</span> HTMLInputElement<span class="op">;</span></span>
<span id="cb16-110"><a href="#cb16-110" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(modelxinput)<span class="op">;</span> <span class="co">//&lt;input type=&quot;text&quot; name=&quot;modelx&quot; id=&quot;modelid&quot;&gt;</span></span>
<span id="cb16-111"><a href="#cb16-111" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(modelxinput<span class="op">.</span><span class="at">value</span>)<span class="op">;</span> <span class="co">//outputs the textbox text</span></span>
<span id="cb16-112"><a href="#cb16-112" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-113"><a href="#cb16-113" aria-hidden="true" tabindex="-1"></a><span class="co">//change innerHTML of &quot;someclass&quot; class which is inside &lt;div&gt;</span></span>
<span id="cb16-114"><a href="#cb16-114" aria-hidden="true" tabindex="-1"></a>const someclassA <span class="op">=</span> document<span class="op">.</span><span class="fu">querySelector</span>(<span class="st">&#39;.someclass&#39;</span>) <span class="im">as</span> HTMLDivElement<span class="op">;</span></span>
<span id="cb16-115"><a href="#cb16-115" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-116"><a href="#cb16-116" aria-hidden="true" tabindex="-1"></a>inputform<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&quot;submit&quot;</span><span class="op">,</span> (msg) <span class="kw">=&gt;</span> {</span>
<span id="cb16-117"><a href="#cb16-117" aria-hidden="true" tabindex="-1"></a>    msg<span class="op">.</span><span class="fu">preventDefault</span>()<span class="op">;</span></span>
<span id="cb16-118"><a href="#cb16-118" aria-hidden="true" tabindex="-1"></a>    someclassA<span class="op">.</span><span class="at">innerText</span> <span class="op">=</span> modelxinput<span class="op">.</span><span class="at">value</span><span class="op">;</span></span>
<span id="cb16-119"><a href="#cb16-119" aria-hidden="true" tabindex="-1"></a>    inputform<span class="op">.</span><span class="fu">reset</span>()<span class="op">;</span></span>
<span id="cb16-120"><a href="#cb16-120" aria-hidden="true" tabindex="-1"></a>})</span>
<span id="cb16-121"><a href="#cb16-121" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-122"><a href="#cb16-122" aria-hidden="true" tabindex="-1"></a><span class="co">//---------------------------------------------------------------------------mini project [</span><span class="re">END</span><span class="co">]</span></span></code></pre></div>
</section>
]]></summary>
</entry>
<entry>
    <title>Quirky Python Traps</title>
    <link href="https://userjy.github.io/posts/2022-09-02-QuirkyPythonTraps.html" />
    <id>https://userjy.github.io/posts/2022-09-02-QuirkyPythonTraps.html</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  2, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;QuickCode&#39;." href="/tags/QuickCode.html">QuickCode</a>, <a title="All pages tagged &#39;python&#39;." href="/tags/python.html">python</a>
    
</div>
<div id="TOC"><ul>
<li><a href="#d-array"><span class="toc-section-number">1</span> 2d array</a></li>
</ul></div>
<section id="d-array" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> 2d array</h1>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>dp2 <span class="op">=</span> [[<span class="dv">99999</span>] <span class="op">*</span> <span class="dv">3</span>] <span class="op">*</span> <span class="dv">4</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>dp2[<span class="dv">0</span>][<span class="dv">0</span>] <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">#you expect it to change one cell but WRONG</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>[[<span class="dv">1</span>, <span class="dv">99999</span>, <span class="dv">99999</span>], </span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>, <span class="dv">99999</span>, <span class="dv">99999</span>], </span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>, <span class="dv">99999</span>, <span class="dv">99999</span>], </span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>[<span class="dv">1</span>, <span class="dv">99999</span>, <span class="dv">99999</span>]]</span></code></pre></div>
<p>The list object we actually created is <strong>4 references to the same 3-length list</strong></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span> <span class="op">--&gt;</span> listX: [<span class="dv">99999</span>,<span class="dv">99999</span>,<span class="dv">99999</span>]</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dv">2</span> <span class="op">--&gt;</span> listX: [<span class="dv">99999</span>,<span class="dv">99999</span>,<span class="dv">99999</span>]</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dv">3</span> <span class="op">--&gt;</span> listX: [<span class="dv">99999</span>,<span class="dv">99999</span>,<span class="dv">99999</span>]</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dv">4</span> <span class="op">--&gt;</span> listX: [<span class="dv">99999</span>,<span class="dv">99999</span>,<span class="dv">99999</span>]</span></code></pre></div>
<p><code>dp2[0][0]</code> causes to change listX object which means all 4 references now point to a changed object.</p>
</section>
]]></summary>
</entry>
<entry>
    <title>Quick Setup</title>
    <link href="https://userjy.github.io/posts/2022-09-02-QuickSetup.html" />
    <id>https://userjy.github.io/posts/2022-09-02-QuickSetup.html</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  2, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;C&#39;." href="/tags/C.html">C</a>, <a title="All pages tagged &#39;QuickCode&#39;." href="/tags/QuickCode.html">QuickCode</a>, <a title="All pages tagged &#39;OS&#39;." href="/tags/OS.html">OS</a>
    
</div>
<section id="haskell" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Haskell</h1>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h090a40737461727473616c740a7b0a7b540a202b2068656c6c6f776f726c640a202b2b206170700a202b2b2b204d61696e2e68730a202b2b207372630a202b2b2b204c69622e68730a202b2b20746573740a202b2b2b20537065632e68730a202b2b2068656c6c6f776f726c642e636162616c0a202b2b207061636b6167652e79616d6c0a202b2b20737461636b2e79616d6c0a7d0a7d0a40656e6473616c74'></figure>
<p>Creates a new folder helloworld at current directory</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> new helloworld new-template</span></code></pre></div>
<section id="running" class="level2" data-number="1.1">
<h2 data-number="1.1"><span class="header-section-number">1.1</span> running</h2>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> run ./app/Main.hs</span></code></pre></div>
<section id="running-interactive" class="level5" data-number="1.1.0.0.1">
<h5 data-number="1.1.0.0.1"><span class="header-section-number">1.1.0.0.1</span> running interactive</h5>
<p>runs an interactive env</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> ghci ./app/Main.hs</span></code></pre></div>
</section>
<section id="buildexecute" class="level5" data-number="1.1.0.0.2">
<h5 data-number="1.1.0.0.2"><span class="header-section-number">1.1.0.0.2</span> build+execute</h5>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> build</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ex">stack</span> exec hello-world</span></code></pre></div>
<hr />
</section>
<section id="go" class="level3" data-number="1.1.1">
<h3 data-number="1.1.1"><span class="header-section-number">1.1.1</span> Go</h3>
<div class="sourceCode" id="cb5" data-filename="hello.go"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span> main</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="op">(</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;fmt&quot;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>	<span class="kw">var</span> a <span class="dt">string</span> <span class="op">=</span> <span class="st">&quot;hello&quot;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>	<span class="kw">var</span> bb <span class="op">[]</span><span class="dt">byte</span> <span class="op">=</span> <span class="op">[]</span><span class="dt">byte</span><span class="op">(</span>a<span class="op">[</span><span class="dv">0</span><span class="op">:</span><span class="dv">3</span><span class="op">])</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>	<span class="kw">var</span> c <span class="dt">string</span> <span class="op">=</span> a<span class="op">[</span><span class="dv">1</span><span class="op">:</span><span class="dv">3</span><span class="op">]</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>	fmt<span class="op">.</span>Printf<span class="op">(</span><span class="st">&quot;%s</span><span class="ch">\n</span><span class="st">&quot;</span><span class="op">,</span> a<span class="op">)</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>	fmt<span class="op">.</span>Printf<span class="op">(</span><span class="st">&quot;%s</span><span class="ch">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="dt">string</span><span class="op">(</span>bb<span class="op">))</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>	fmt<span class="op">.</span>Printf<span class="op">(</span><span class="st">&quot;%s</span><span class="ch">\n</span><span class="st">&quot;</span><span class="op">,</span> c<span class="op">)</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">go</span> run hello.go</span></code></pre></div>
</section>
<section id="go-modules" class="level3" data-number="1.1.2">
<h3 data-number="1.1.2"><span class="header-section-number">1.1.2</span> Go Modules</h3>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h090a40737461727473616c740a7b0a7b540a202b20676f776f726c640a202b2b206772656574696e67730a202b2b2b20676f2e6d6f640a202b2b2b206772656574696e67732e676f0a202b2b2068656c6c6f0a202b2b2b20676f2e6d6f640a202b2b2b2068656c6c6f2e676f0a7d0a7d0a40656e6473616c74'></figure>
<ol type="1">
<li><h5 id="project-folder">project folder</h5></li>
</ol>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> goworld</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> goworld</span></code></pre></div>
<ol start="2" type="1">
<li><h5 id="create-greetings-modules">Create greetings modules</h5></li>
</ol>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> greetings</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> greetings</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ex">go</span> mod init example.com/greetings</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="co">#this creates go.mod</span></span></code></pre></div>
<p>create a file called greetings.go</p>
<div class="sourceCode" id="cb9" data-filename="greetings.go"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span> greetings</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="st">&quot;fmt&quot;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="co">// Hello returns a greeting for the named person.</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> Hello<span class="op">(</span>name <span class="dt">string</span><span class="op">)</span> <span class="dt">string</span> <span class="op">{</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Return a greeting that embeds the name in a message.</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    message <span class="op">:=</span> fmt<span class="op">.</span>Sprintf<span class="op">(</span><span class="st">&quot;Hi, %v. Welcome!&quot;</span><span class="op">,</span> name<span class="op">)</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">return</span> message</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<ol start="3" type="1">
<li><h5 id="executable-folder">executable folder</h5></li>
</ol>
<div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> ..</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> hello</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> hello</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="ex">go</span> mod init example.com/hello</span></code></pre></div>
<div class="sourceCode" id="cb11" data-filename="hello.go"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span> main</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="op">(</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;fmt&quot;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;example.com/greetings&quot;</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Get a greeting message and print it.</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>    message <span class="op">:=</span> greetings<span class="op">.</span>Hello<span class="op">(</span><span class="st">&quot;Gladys&quot;</span><span class="op">)</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>    fmt<span class="op">.</span>Println<span class="op">(</span>message<span class="op">)</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<ol start="4" type="1">
<li><h5 id="setup-local">setup local</h5>
typically our modules will be held on our webserver at (in this case) “example.com/greetings”<br />
To run locally</li>
</ol>
<p>in your hello dir</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ex">go</span> mod edit <span class="at">-replace</span> example.com/greetings=../greetings</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ex">go</span> mod tidy</span></code></pre></div>
<ol start="5" type="1">
<li><h5 id="running-1">running</h5></li>
</ol>
<p>inside hello dir</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">go</span> run .</span></code></pre></div>
<hr />
</section>
<section id="c" class="level3" data-number="1.1.3">
<h3 data-number="1.1.3"><span class="header-section-number">1.1.3</span> C</h3>
<p><strong>running</strong></p>
<div class="sourceCode" id="cb14"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="fu">gcc</span> <span class="at">-o</span> bleh main.c</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="ex">./bleh</span></span></code></pre></div>
</section>
</section>
</section>
]]></summary>
</entry>

</feed>
