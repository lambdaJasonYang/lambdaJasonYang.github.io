---
title: HTTP TLS(SSL) Certificates 
tags: prog
toc: y
---


# HTTP vs HTTPS

* HTTP  : HTTP ----------------- TCP -- IP -- Ethernet  
* HTTPS:HTTP -- TLS(SSL) -- TCP -- IP -- Ethernet

HTTPS linked terms: SSL, Root Authority, Certificate Authority, TLS, 443

# HTTPS Certificate Authority

## Cert confirm identity

We want to talk to a website but how do we are not talking to a faker?  
A website needs to confirm it's identity using a Cert.   
But how do we know to trust the Cert?  
Using Certificate Authorities(CA) like LetsEncrypt

```plantuml
@startuml
skinparam shadowing false
Browser -> Website : Get example.com
Website --> Browser: ok, here is my SSL cert \ncontaining my publickey\nsigned by LetsEncrypt
note over Browser
Use pre-installed LetsEncrypt
PublicKey in Browser to
verify the SSL cert signed using
LetsEncrypt's PrivateKey
endnote
Browser -> Website: I trust LetsEncrypt\nTherefore I trust your cert.\nI made a SecretKey \nencrypted it w/ your PublicKey
note over Website
Website can reveal 
the SecretKey 
by decrypting the message 
w/ Website's PrivateKey 
endnote
Website <-> Browser: Communication w/ SecretKey
@enduml
```

## Cert Signing Request

  * CA public key is pre-installed in most Client browsers
  * CA private key: Every month you may ask let's encrypt to sign your SSL Cert.

  Example CA: LetsEncrypt




```plantuml
@startuml
skinparam shadowing false
class Website {
  PrivateKey
__
  PublicKey
}

object Browser



class LetsEncrypt {
   PrivateKey
__
  PublicKey
}


Browser -- LetsEncrypt::PublicKey : pre-installed\nPublicKey
LetsEncrypt::PrivateKey <-- Website : 1)Certificate Signing Request\nSend Key-pair to be signed
LetsEncrypt --> Website : 2)Signed Request Sent back.\nAnyone \nw/ LetsEncrypt PublicKey \ncan verify authenticity
@enduml
```


# HTTP/1.1 

Sequential

  * can only send 1 request at time
  * must wait for response before sending a new request


```plantuml
@startuml
skinparam shadowing false
== TCP ==

Client -> Server: SYN
Server --> Client: SYN-ACK
Client -> Server: ACK

== TLS ==

Client -> Server: Client Hello
Server --> Client: Server Hello
Client -> Server: Client Key Exchange Start
Server --> Client: Server finished
Client --> Server: Client finished

== HTTP ==

Client -> Server: HTTP req
Server --> Client: HTTP resp
@enduml
```

# HTTP/2

Multiplex(Async) implemented as "SPDY by Google" 

  * send multiple requests
  * wait for response in any order

# HTTP/3



# Practical

Using chrome inspect > Network can find which version of HTML you're using