---
title: Quick Go
tags: prog, QuickCode
---

* Go func pass-by-value

# Running or Building

```bash
go build main.go
./main
```

```bash
go run main.go
```

# typical go file

```go
package main
import (
	"fmt"
)
func main(){...}
```

# Some surprises

for loops and if statements conditions do not have parenthesis.

* `if(x == 2){..}`{.C} $\Rightarrow$ `if x == 2 {..}`{.go}
* `for(int i=0;i<5;i++){..}`{.C} $\Rightarrow$ `for i:=0;i<5;i++ {..}`{.go}


## := vs =

`var bleh int = 3`{.go} equivalent `bleh := 3`{.go} 

`:=`{.go} is shorthand to create new variable implicity then assign it.

```{.go}
//Shorthand
bleh := 2

//Expanded
var bleh int
bleh = 2
```

# Use slice(list) instead of arrays

I will just call slice a list due to preference

* list is just an array without inputting the len arg
* Only use arrays if you know the exact length ahead of time  


| Def | list | Array |
| --- | --- | --- |
| init | `var x = []int{4,5,6}`{.go}<br>`var x = make([]int,3)`{.go} | `var x = [3]int{4,5,6}`{.go} |
|comparison `>=`{.go} `==`{.go} | Only with `nil`{.go} | Yes |

```go 
//ARRAY
var x = [6]int{1,3:4,7,5:9} //4 at pos 3, 9 at pos 5
  //[1,0,0,4,7,9]
var x2 = [...]int{6,4,3,3}
x == x2 //false

//SLICE
var z = make([]int,5) // [0,0,0,0,0]
var x = []int{1,2,3,4}
var y = [][]int
x == y //ERROR
y == nil //true
```

`append`{.go} returns a new array or slice.

## Slicing lists 

* same as in Python **BUT sublists SHARE THE SAME MEMORY**

```go
x = []int{1,2,3,4}
y = x[1:3]
y = []int{9,9}
//x is [1,9,9,4]
```

**Never use Append with sublists**

How to do the Pythonic subslice? Use `copy`{.go}  
Warning if len doesn't fit, it will NOT autoexpand the list; it will get cut off.

```go
x = []int{1,2,3,4}
y = make([]int,2)
copy(y,x[1:3])
```


# Strings

 * A string is a sequence of UTF-8 **code-points**
* Go strings are immutable meaning when sliced, they automatically make copy; they behave like pythonic strings

```go
var s string = "Hello"
s[0] = "p" //ERROR - immutable

var e string = s[1:3] //Slice
e[0] = "p" //ERROR - immutable 
```

* Go uses a sequence of bytes to represent a string 

```go
var b byte = s[2] // b = l
fmt.Printf("%s\n", string(b)) // output: l

var bb []byte = []byte(s[0:3])
fmt.Printf("%s\n", string(bb)) // output: Hel
```

# Hashmap aka Dictionaries

```go
var exMap1 map[string]int // value: nil

exMap2 := map[string][]int {
  "even": []int{0,2,4,6},
   "odd": []int{1,3,5,7},
}

val, ok := exMap2["none"] //ok = false, val = 0
val, ok := exMap2["even"]

exMap3 := make(map[string][]int,4)
```

# Functions

```go
func typicalfunction() string{
 return "simple function"
}

var mylambda = func() string { return "this is lambda string func" }
fmt.Println(mylambda())
```

# Struct and API

```go
type person struct{
  name string
  age int
}

bob := person{
  name: "Joe",
  age: 2
}
```
## Anonymous Struct

```go
blob := struct {
  name string
  age int
}{
  name: "bob"
  age: 4
}

```

---

# Scoping 

```{.go filename="BAD_Shadowing.go"}
func main(){
  x := 5
  if x > 0 {
      fmt.Println(x) //OUT: 5
      x := 3 
      fmt.Println(x) //OUT: 3 
  }
  fmt.Println(x) //OUT: 5
} 
```
```bash
go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest
go vet
```

# Learn by doing


```go
gofunc Hello(name string) string {
  var bleh string
  var sentinel string
  arr := [3]int{1,2,3}
  const heh int = 3;
  var (
    target = 9
    curr = 3
  )
  const (
    pi = 3.14
    e = 2.718
  )
	if name == "bob" {
		sentinel = "pie"
	} else if name == "annie" {
		sentinel = "cola"
	}
	switch sentinel {
	case "bob":
		bleh = "bob likes pie"
		fmt.Println(bleh)
	}
  fmt.Println(arr[0])
  fmt.Println(heh)
	return "Hello World"
}
```

# loops



```go

func main() {
  arr := [3]int{1,2,3}
  arr2 := arr[0:2]
  sum := 0
  for i:=0; i < 5; i++ {
	  sum += i
  }
  for keyX, ValX := range arr {
    fmt.Println(keyX)
    fmt.Println(ValX)
  }
	fmt.Println(arr[0])
	fmt.Println(sum)
}

```

# Switch statement

```go
if i == 0 {
  fmt.Println("Zero")
}else if i == 1 {
  fmt.Println("One")
}else if i == 2{
  fmt.Println("Two")
}else {
  fmt.Println("default")
}
```

```go
switch i {
  case 0: fmt.Println("Zero")
  case 1: fmt.Println("One")
  case 2: fmt.Println("Two")
  default: fmt.Println("default")
}
```
# struct

```go

type Rectangle struct {
    Width float64
    Height float64
}

funct (r *Rectangle) AreaX int {
 return 5
}

func (r Rectangle) Area() int {
	return 5
}

func main(){
  rect := Rectangle{12, 6}
  outp := rect.Area()
  outpX := AreaX(&Rect)
  fmt.Println(outp)
  //5
}
```
Just by passing in the Rectangle argument for a method 'Area()', the method automatically is attached to struct 'Rectangle'


```go
type Shape interface {
    Area() float64
}

```


# Pointer
Just as in our "Quick C" , 

* think of passing pointers in args as passing addresses. 
* The temporary `ptr *int`{.go} will bind to the passed address `&x`{.go}.

```{.go }
func trans(ptr *int){
  *ptr = 0
}
func main(){
  x := 5
  trans(&x)

}
```


---


| type | range |
|---|---|
| int8 | [-128,127] |
| int16 | [-32768,32767] |
| int32 | [-2147483648,2147483647] |
| int64 | [â€“9223372036854775808,9223372036854775807] |
| uint8 | [0,255] |
| uint16 | [0,65536] |
| uint32 | [0,4294967295] |
| uint64 | [0,18446744073709551615] |


---

Style

```go
//BAD
name := "bob"
name := name + " ross"
//GOOD
const fstname = "bob"
const lstname = " ross"
const name = fstname + lstname
```

```go
//BAD
arr := [3]int{7}
arr[1] = 8
arr[2] = 9
//GOOD
arr := [3]int{7}
arr2 := append(arr,[2]int{8,9})
```

