---
title: Docker
tags: prog, cloud, DevOps
---

## image

| Command| Shortcut |Defined | 
| --- | --- | --- |
| docker image ls| docker images |ls images | 
| docker image rm \<image\> | docker rmi \<image\> |removes image |
| docker image pull \<image\> | docker pull \<image\> |pull image from docker registry |

## container

| Command| Shortcut |Defined | 
| --- | --- | --- |
| docker container ls -a | docker ps -a|list all containers (-a includes stopped) |
| docker container run \<image\> | docker run \<image\> |runs container from an image |
| docker container rm \<containerID or name\> | docker rm \<containerID or name\> |removes container |
| docker container stop \<containerID or name\> | docker stop \<containerID or name\> |stop container |

> Docker containers don't remove themselves when they terminate, they enter a stopped state.



### Run detached container and removing containers

```bash
docker container run -d --name bleh nginx
#>d89war8wf0489fwa08498w0atr48q0g8949a439w0

docker container ls -a
 #>CONTAINER ID   IMAGE   COMMAND                  CREATED             STATUS         PORTS     NAMES
 #>d89war8wf048   nginx  "nginx -g 'daemon of…"   35 seconds ago      Up 34 seconds   80/tcp    bleh

#docker container kill d89war 
docker container stop d89war 
docker container rm d89war
#docker container stop "bleh"
#docker container rm "bleh"
```
\<containerID\> = d89war8wf048  
`--name bleh`{.bash} means we can refer to "bleh" instead of "d89war8wf048"

`docker container kill d89war`{.bash} is faster than `docker container stop d89war`{.bash}

### Prune

```bash
docker container prune #removes stopped containers
docker image prune
```

### pause/unpause container

```bash
docker pause <containerID or name>
docker unpause <containerID or name>
```

### container flags

| Command| Defined | 
| --- | --- |
| docker run -d ubuntu | detach running container from current terminal |
| docker run -it ubuntu | -i lets you write commands to container, -t run terminal inside container |
| docker run ubuntu --rm | --rm Removes container instead of stopped state on termination|
| docker run --name Bleh ubuntu | we can refer to "Bleh" instead of \<containerID or name\>  |
| docker logs -f Bleh | Outputs the log of "Bleh" |



### --name for containers , -t for naming images
```bash
docker container run -d -it --name looperA ubuntu sh -c 'while true; do date; sleep 1; done'
docker logs -f looperA

```

### logs

```bash
docker logs -f looperA
```

### attach current terminal to container
```bash
docker attach looperA
#hit Ctrl-C to terminate the container looperA
```

```bash
docker attach --no-stdin looperA
#will not terminate container if hit Ctrl-C
```

### execute terminal inside container

```bash
docker exec -it <containerID or name> bash 
docker exec -it looperA bash
  #>root@d89war8wf048 we are now in as bash inside the container
  exit #this won't stop the container, let's us exit terminal
```

---

## Dockerfile docker build => outputs image

```{.Dockerfile filename=Dockerfile}
# Start from the alpine image
FROM alpine:3.13

# Use /usr/src/app as our workdir. The following instructions will be executed in this location.
WORKDIR /usr/src/app

#Set the environment variable LC_ALL
ENV LC_ALL=C.UTF-8 

# Copy the hello.sh file from this location to /usr/src/app/ creating /usr/src/app/hello.sh.
COPY hello.sh .

# Execute a command with `/bin/sh -c` prefix.
RUN touch additional.txt

# When running docker run the command will be ./hello.sh
CMD ./hello.sh
```

* /usr/src/app/
  * Dockerfile
  * hello.sh

```bash
docker build . -t bleh
# REPOSITORY   TAG        IMAGE ID       CREATED          SIZE
# bleh         latest     b396ac3611b3   21 seconds ago   5.61MB
```

`docker build . -t bleh:v2`{.bash} add the `:v2`{.bash} to give it a v2 TAG.


> Docker build caches from top down.  
Best practice: Use commands that change less at the top and   
change more at the bottom of the Dockerfile file.


#### WORKDIR

* `WORKDIR`{.Dockerfile} sets the execution directory of commands:  
  * `RUN CMD ADD COPY ENTRYPOINT`{.Dockerfile}
  * `CMD`{.Dockerfile} is executed when we call "docker run"
    * All other commands are ran before during build time

---

## Docker run

#### ENTRYPOINT 

Entrypoint is the main binary ran when you call  
`docker run <containerID or name> args`{.bash}

default `ENTRYPOINT ["/bin/sh"]`{.Dockerfile}  



Example  

  * Create an image called "youtubeDL"
  * `ENTRYPOINT ["/usr/local/bin/youtube-dl"]`{.Dockerfile} in Dockerfile
  * `docker run youtubeDL http://imgur.com/asf`{.bash} =>  
  Executing `/usr/local/bin/youtube-dl http://imgur.com/asf`{.bash} inside the container

#### docker run \<containerID\> sh -c 'echo hi'

we use `sh -c`{.bash} because it allows us to run shell with $PATH and Environment vars. 

We can have our Dockerfile use `sh -c`{.bash} by **unbracketing** the ENTRYPOINT or CMD



1. Both w/o Bracket

* `ENTRYPOINT /bin/ping -c 3`{.Dockerfile}
*  `CMD localhost`{.Dockerfile}
   * `/bin/sh -c ‘/bin/ping -c 3’ /bin/sh -c localhost`{.bash}

2. Entrypoint w/ Bracket

* `ENTRYPOINT [“/bin/ping”,”-c”,”3”]`{.Dockerfile}
*  `CMD localhost`{.Dockerfile}
   * `/bin/ping -c 3 /bin/sh -c localhost`{.bash}

3. CMD w/ Bracket

* `ENTRYPOINT /bin/ping -c 3`{.Dockerfile}
*  `CMD [“localhost”]`{.Dockerfile}
   * `/bin/sh -c ‘/bin/ping -c 3’ localhost`{.bash}

4. Both w/ Bracket

* `ENTRYPOINT [“/bin/ping”,”-c”,”3”]`{.Dockerfile}
*  `CMD [“localhost”]`{.Dockerfile}
   * `/bin/ping -c 3 localhost`{.bash}




---

### Copy files from local to container

```bash
touch bleh.txt
docker cp ./bleh.txt \<containerID or name\>:/usr/src/app/
```

### docker diff - Check what our container did

```bash
docker diff \<containerID or name\>
    # C /usr
    # C /usr/src
    # C /usr/src/app
    # A /usr/src/app/bleh.txt
    # C /root
    # A /root/.ash_history
```
A = Added  
C = Changed  
D = Deleted  




### CMD and docker run

Some containers take commands on "docker run"

```bash
docker run blehImage:latest startserver
```

we can instead recreate the image so we don't need to input a command

```Dockerfile
FROM blehImage:latest
RUN startserver
```


---

### -v Volume for shared access

Allow your local machine and container to access the same resource
```bash
docker run -v "$(pwd)/localdir:/remotedir" ubuntu 
```
`-v <localpath>:<remotepath>`{.bash}

## Ports and Network

Expose port - tell container to listen to a certain port(doesn't do much but helps for documentation)
`EXPOSE <port>`{.Dockerfile} in Dockerfile

Publish port - map local port to container port  
`-p <local-port>:<remote-container-port>`{.bash}

```bash
docker run -p 3000:5000 ubuntu
```

