<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Jason Yang: Math and Computer Science Notes</title>
        <link>https://userjy.github.io</link>
        <description><![CDATA[Programming language theory, haskell, induction, combinatorics, Energy based models, time series analysis, differential equations, stochastic calculus]]></description>
        <atom:link href="https://userjy.github.io/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 15 Aug 2022 00:00:00 UT</lastBuildDate>
        <item>
    <title>Load Testing Vegeta Locust</title>
    <link>https://userjy.github.io/posts/2022-08-15-LoadTesting.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 15, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>
    
</div>
<div id="TOC"><ul>
<li><a href="#vegeta"><span class="toc-section-number">1</span> vegeta</a>
<ul>
<li><a href="#install"><span class="toc-section-number">1.1</span> Install</a></li>
<li><a href="#hits-per-second"><span class="toc-section-number">1.2</span> 100 hits per second</a></li>
<li><a href="#as-much-as-possible-hits"><span class="toc-section-number">1.3</span> As much as possible hits</a></li>
<li><a href="#plotting"><span class="toc-section-number">1.4</span> Plotting</a></li>
<li><a href="#report"><span class="toc-section-number">1.5</span> Report</a></li>
</ul></li>
<li><a href="#locust"><span class="toc-section-number">2</span> Locust</a></li>
</ul></div>
<section id="vegeta" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> vegeta</h1>
<section id="install" class="level2" data-number="1.1">
<h2 data-number="1.1"><span class="header-section-number">1.1</span> Install</h2>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> Vegeta</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> Vegeta</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="fu">wget</span> https://github.com/tsenart/vegeta/releases/download/v12.8.4/vegeta_12.8.4_linux_amd64.tar.gz</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="fu">tar</span> <span class="at">-xvzf</span> vegeta_12.8.4_linux_amd64.tar.gz </span></code></pre></div>
</section>
<section id="hits-per-second" class="level2" data-number="1.2">
<h2 data-number="1.2"><span class="header-section-number">1.2</span> 100 hits per second</h2>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">echo</span> <span class="st">&quot;GET http://192.168.1.245:3300&quot;</span> <span class="kw">|</span> <span class="ex">./vegeta</span> attack <span class="at">-name</span><span class="op">=</span>bleh <span class="at">-rate</span><span class="op">=</span>100 <span class="at">-duration</span><span class="op">=</span>5s <span class="op">&gt;</span> results.100qps.bin</span></code></pre></div>
</section>
<section id="as-much-as-possible-hits" class="level2" data-number="1.3">
<h2 data-number="1.3"><span class="header-section-number">1.3</span> As much as possible hits</h2>
<ul>
<li>Set <code>-rate=0</code> representing infinity. Set <code>max-workers=100</code> to num of virtual threads.</li>
</ul>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">echo</span> <span class="st">&quot;GET http://192.168.1.245:3300&quot;</span> <span class="kw">|</span> <span class="ex">./vegeta</span> attack <span class="at">-name</span><span class="op">=</span>1000qps <span class="at">-rate</span><span class="op">=</span>0 <span class="at">-duration</span><span class="op">=</span>15s <span class="at">-max-workers</span><span class="op">=</span>100</span></code></pre></div>
</section>
<section id="plotting" class="level2" data-number="1.4">
<h2 data-number="1.4"><span class="header-section-number">1.4</span> Plotting</h2>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./vegeta</span> plot results.100qps.bin <span class="op">&gt;</span> plot.html</span></code></pre></div>
</section>
<section id="report" class="level2" data-number="1.5">
<h2 data-number="1.5"><span class="header-section-number">1.5</span> Report</h2>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">./vegeta</span> report results.100qps.bin</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co"># Requests      [total, rate, throughput]         405037, 6696.28, 5508.40</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co"># Duration      [total, attack, wait]             1m7s, 1m0s, 6.869s</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co"># Latencies     [min, mean, 50, 90, 95, 99, max]  1.101ms, 6.598s, 4.256s, 16.925s, 21.484s, 26.89s, 51.645s</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co"># Bytes In      [total, mean]                     5936336, 14.66</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="co"># Bytes Out     [total, mean]                     0, 0.00</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Success       [ratio]                           91.60%</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="co"># Status Codes  [code:count]                      0:34016  200:371021</span></span></code></pre></div>
</section>
</section>
<section id="locust" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Locust</h1>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pip3</span> install locust</span></code></pre></div>
<div class="sourceCode" id="cb7" data-filename="locustfile.py"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> locust <span class="im">import</span> HttpUser, task</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> HelloWorldUser(HttpUser):</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="at">@task</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> hello_world(<span class="va">self</span>):</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.client.post(<span class="st">&quot;/api/authenticate&quot;</span>, json<span class="op">=</span>{<span class="st">&quot;username&quot;</span>:<span class="st">&quot;user&quot;</span>, <span class="st">&quot;password&quot;</span>:<span class="st">&quot;user&quot;</span>, <span class="st">&quot;rememberMe&quot;</span>: <span class="st">&quot;false&quot;</span>})</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a> </span></code></pre></div>
</section>
]]></description>
    <pubDate>Mon, 15 Aug 2022 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2022-08-15-LoadTesting.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Setup Kubernetes Cluster k3</title>
    <link>https://userjy.github.io/posts/2022-08-15-KubernetesSetup.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 15, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>
    
</div>
<div id="TOC"><ul>
<li><a href="#install-docker"><span class="toc-section-number">1</span> Install docker</a></li>
<li><a href="#install-kubernetes-master-node"><span class="toc-section-number">2</span> Install kubernetes master node</a></li>
<li><a href="#kube-commands"><span class="toc-section-number">3</span> Kube commands</a>
<ul>
<li><a href="#stopping-kubernetes-cluster"><span class="toc-section-number">3.1</span> Stopping Kubernetes Cluster</a></li>
<li><a href="#starting-kubernetes-cluster"><span class="toc-section-number">3.2</span> Starting Kubernetes Cluster</a></li>
</ul></li>
<li><a href="#kube-worker"><span class="toc-section-number">4</span> Kube worker</a></li>
<li><a href="#autocomplete-kube-yaml"><span class="toc-section-number">5</span> Autocomplete kube yaml</a></li>
<li><a href="#k3"><span class="toc-section-number">6</span> k3</a></li>
</ul></div>
<section id="install-docker" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Install docker</h1>
</section>
<section id="install-kubernetes-master-node" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Install kubernetes master node</h1>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">curl</span> <span class="at">-sfL</span> https://get.k3s.io <span class="kw">|</span> <span class="fu">sh</span> <span class="at">-</span></span></code></pre></div>
<p>You will encounter an error:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode .txt"><code class="sourceCode default"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>WARN[0000] Unable to read /etc/rancher/k3s/k3s.yaml, please start server with --write-kubeconfig-mode to modify kube config permissions </span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>error: error loading config file &quot;/etc/rancher/k3s/k3s.yaml&quot;: open /etc/rancher/k3s/k3s.yaml: permission denied</span></code></pre></div>
<p>If on homeserver, just follow instructions below, but note that doing do exposes the k3s.yaml file to other users on the server.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> sh <span class="at">-c</span> <span class="st">&quot;echo &quot;</span>K3S_KUBECONFIG_MODE=<span class="dt">\&quot;</span>644<span class="dt">\&quot;</span><span class="st">&quot; &gt;&gt; /etc/systemd/system/k3s.service.env&quot;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> systemctl restart k3s</span></code></pre></div>
<ul>
<li>kubectl, crictl, ctr, k3s-killall.sh, and k3s-uninstall.sh are installed</li>
<li>kubeconfig is in /etc/rancher/k3s/k3s.yaml</li>
</ul>
</section>
<section id="kube-commands" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Kube commands</h1>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">kubectl</span> get nodes</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co"># NAME     STATUS   ROLES                  AGE     VERSION</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co"># debian   Ready    control-plane,master   8m19s   v1.24.6+k3s1</span></span></code></pre></div>
<section id="stopping-kubernetes-cluster" class="level2" data-number="3.1">
<h2 data-number="3.1"><span class="header-section-number">3.1</span> Stopping Kubernetes Cluster</h2>
<ul>
<li>The file came installed in your <code>/usr/local/bin/k3s-killall.sh</code></li>
</ul>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">k3s-killall.sh</span></span></code></pre></div>
<p>WARN: <code>systemctl stop k3s</code> will not stop the pods/containers.</p>
</section>
<section id="starting-kubernetes-cluster" class="level2" data-number="3.2">
<h2 data-number="3.2"><span class="header-section-number">3.2</span> Starting Kubernetes Cluster</h2>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">k3s</span> server</span></code></pre></div>
<p>or</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> systemctl restart k3s</span></code></pre></div>
</section>
</section>
<section id="kube-worker" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Kube worker</h1>
<ul>
<li>get token</li>
</ul>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">cat</span> /var/lib/rancher/k3s/server/node-token</span></code></pre></div>
</section>
<section id="autocomplete-kube-yaml" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Autocomplete kube yaml</h1>
<p>install kubernetes support on vscode.<br />
type <code>Kubernetes Deployment</code></p>
</section>
<section id="k3" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> k3</h1>
<p>config</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">cp</span> /etc/rancher/k3s/k3s.yaml ~/.kube/config</span></code></pre></div>
</section>
]]></description>
    <pubDate>Mon, 15 Aug 2022 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2022-08-15-KubernetesSetup.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Setup Kubernetes Cluster</title>
    <link>https://userjy.github.io/posts/2022-08-01-BookKubernetes.html</link>
    <description><![CDATA[<div class="info">
    Posted on August  1, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>
    
</div>
<div id="TOC"><ul>
<li><a href="#running-postgres-pod-in-a-docker-like-manner"><span class="toc-section-number">1</span> Running postgres pod in a docker-like manner</a></li>
</ul></div>
<p><img src="/images/2208_fe3uwoj.png" /></p>
<section id="running-postgres-pod-in-a-docker-like-manner" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Running postgres pod in a docker-like manner</h1>
<p>In a .yaml file the <code>- containerPort=5432</code> (your program determines this port)</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># --port=5432 aka containerPort determines the local port INSIDE the pod </span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co"># hitting 127.0.0.1:5432 wont work</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">kubectl</span> run postgrespod <span class="at">--image</span><span class="op">=</span>postgres <span class="at">--restart</span><span class="op">=</span>Never <span class="at">--port</span><span class="op">=</span>5432 <span class="at">--env</span><span class="op">=</span><span class="st">&quot;POSTGRES_PASSWORD=root&quot;</span> <span class="at">--labels</span><span class="op">=</span><span class="st">&quot;app=mypostgres,env=prod&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co"># container port 5432 ==&gt; 127.0.0.1:8098</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ex">kubectl</span> port-forward postgres 8098:5432</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co"># container port 5432 ==&gt; postgres on 0.0.0.0:8098</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ex">kubectl</span> port-forward postgres 8098:5432 <span class="at">--address</span><span class="op">=</span><span class="st">&#39;0.0.0.0&#39;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="co">#demo</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="ex">psql</span> <span class="at">-h</span> 127.0.0.1 <span class="at">-p</span> 8098 <span class="at">-U</span> postgres</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">kubectl</span> run cockroachdb <span class="at">--image</span><span class="op">=</span>cockroachdb/cockroach <span class="at">--restart</span><span class="op">=</span>Never <span class="at">--port</span><span class="op">=</span>26257 <span class="at">--</span> start-single-node <span class="at">--insecure</span> <span class="at">--logtostderr</span></span></code></pre></div>
</section>
]]></description>
    <pubDate>Mon, 01 Aug 2022 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2022-08-01-BookKubernetes.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Haskell prog lang</title>
    <link>https://userjy.github.io/posts/2022-07-01-TypeTheoryInterpreter.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  1, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;musings&#39;." href="/tags/musings.html">musings</a>
    
</div>
<section id="overview" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Overview</h1>
<ul>
<li>Type-Checker: Takes code as input, Returns Boolean based on whether code has consistent typing</li>
<li>verifier: Takes code as input, Returns Boolean based on whether some invariant is satisfied</li>
<li>Compiler: Converts code in one lang to code in another lang</li>
</ul>
</section>
<section id="tokenizer" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Tokenizer</h1>
<p>Converts code string to tokens</p>
</section>
<section id="parser" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Parser</h1>
<p>Converts sets of tokens to AST.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Day</span> <span class="ot">=</span> <span class="dt">Monday</span> </span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span><span class="dt">Tuesday</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span><span class="dt">Wednesday</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span><span class="dt">Thursday</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span><span class="dt">Friday</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span><span class="dt">Saturday</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span><span class="dt">Sunday</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>          <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ot">next_weekday ::</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Day</span> </span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>next_weekday d <span class="ot">=</span> <span class="kw">case</span> d <span class="kw">of</span> <span class="dt">Monday</span> <span class="ot">-&gt;</span> <span class="dt">Tuesday</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>                           <span class="dt">Tuesday</span> <span class="ot">-&gt;</span> <span class="dt">Wednesday</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>                           <span class="dt">Wednesday</span> <span class="ot">-&gt;</span> <span class="dt">Thursday</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>                           <span class="dt">Thursday</span> <span class="ot">-&gt;</span> <span class="dt">Friday</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>                           <span class="dt">Friday</span> <span class="ot">-&gt;</span> <span class="dt">Saturday</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>                           <span class="dt">Saturday</span> <span class="ot">-&gt;</span> <span class="dt">Sunday</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>                           <span class="dt">Sunday</span> <span class="ot">-&gt;</span> <span class="dt">Monday</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>t next_weekday <span class="dt">Friday</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>next_weekday <span class="dt">Friday</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>next_weekday (next_weekday <span class="dt">Saturday</span>)</span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- untyped lambda calculus values are functions</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Value</span> <span class="ot">=</span> <span class="dt">FunVal</span> (<span class="dt">Value</span> <span class="ot">-&gt;</span> <span class="dt">Value</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- we write expressions where variables take string-based names, but we&#39;ll</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- also just assume that nobody ever shadows names to avoid having to do</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- capture-avoiding substitutions</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">Var</span> <span class="dt">String</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Apply</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Lam</span> <span class="dt">String</span> <span class="dt">Expr</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co">-- We model the environment as function from strings to values, </span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co">-- notably ignoring any kind of smooth lookup failures</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Name</span> <span class="ot">-&gt;</span> <span class="dt">Value</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="co">-- The empty environment</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="ot">env0 ::</span> <span class="dt">Env</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>env0 _ <span class="ot">=</span> <span class="fu">error</span> <span class="st">&quot;Nope!&quot;</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="co">-- Augmenting the environment with a value, &quot;closing over&quot; it!</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a><span class="ot">addEnv ::</span> <span class="dt">Name</span> <span class="ot">-&gt;</span> <span class="dt">Value</span> <span class="ot">-&gt;</span> <span class="dt">Env</span> <span class="ot">-&gt;</span> <span class="dt">Env</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>addEnv nm v e nm&#39; <span class="op">|</span> nm&#39; <span class="op">==</span> nm <span class="ot">=</span> v</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>                  <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> e nm</span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a><span class="co">-- And finally the interpreter itself</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a><span class="ot">interp ::</span> <span class="dt">Env</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Value</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>interp e (<span class="dt">Var</span> name) <span class="ot">=</span> e name          <span class="co">-- variable lookup in the env</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>interp e (<span class="dt">App</span> ef ex) <span class="ot">=</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> <span class="dt">FunVal</span> f <span class="ot">=</span> interp e ef</span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>      x        <span class="ot">=</span> interp e ex</span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span> f x                              <span class="co">-- application to lambda terms</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>interp e (<span class="dt">Abs</span> name expr) <span class="ot">=</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- augmentation of a local (lexical) environment</span></span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>  <span class="dt">FunVal</span> (\value <span class="ot">-&gt;</span> interp (addEnv name value e) expr)</span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">--A faithful haskell implementation of Pierce&#39;s Types and Programming Languages TAPL book for Untyped ARITH Ch 3</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">--without using external Haskell libraries or advanced Haskell constructs.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Term</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> <span class="dt">T</span> <span class="co">--True</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">F</span> <span class="co">--False</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">O</span> <span class="co">--ZERO</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">IfThenElse</span> <span class="dt">Term</span> <span class="dt">Term</span> <span class="dt">Term</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">S</span> <span class="dt">Term</span> <span class="co">--Succ</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">P</span> <span class="dt">Term</span> <span class="co">--Pred</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">IsZ</span> <span class="dt">Term</span> <span class="co">--IsZero</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">Error</span> </span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="ot">isNumericVal ::</span> <span class="dt">Term</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>isNumericVal t <span class="ot">=</span> <span class="kw">case</span> t <span class="kw">of</span> <span class="dt">O</span> <span class="ot">-&gt;</span> <span class="dt">True</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>                           <span class="dt">S</span> t <span class="ot">-&gt;</span> isNumericVal t</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>                           _ <span class="ot">-&gt;</span> <span class="dt">False</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>isNumericVal <span class="dt">T</span> <span class="co">-- Output: True </span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>isNumericVal (<span class="dt">S</span> <span class="dt">O</span>) <span class="co">-- Output: False</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="ot">isVal ::</span> <span class="dt">Term</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>isVal t <span class="ot">=</span> <span class="kw">case</span> t <span class="kw">of</span> <span class="dt">T</span> <span class="ot">-&gt;</span> <span class="dt">True</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">F</span> <span class="ot">-&gt;</span> <span class="dt">True</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>                    t1 <span class="ot">-&gt;</span> <span class="kw">if</span> (isNumericVal t1) <span class="kw">then</span> <span class="dt">True</span> <span class="kw">else</span> <span class="dt">False</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>                    _ <span class="ot">-&gt;</span> <span class="dt">False</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="co">--------------------------------------------------------------------- Small Step Evaluator</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a><span class="co">-- if true then t2 else t3 -&gt; t2                    {E-IfTrue}</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a><span class="co">-- if false then t2 else t3 -&gt; t3                   {E-IfFalse}</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a><span class="co">--                     t1 -&gt; t1&#39;</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a><span class="co">-- ------------------------------------------------  {E-If}</span></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a><span class="co">--  if t1 then t2 else t3 -&gt; if t1&#39; then t2 else t3</span></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a><span class="co">--       t1 -&gt; t1&#39; </span></span>
<span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a><span class="co">-- -------------------           {E-Succ}</span></span>
<span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a><span class="co">--  succ t1 -&gt; succ t1&#39;</span></span>
<span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a><span class="co">-- pred 0 -&gt; 0                   {E-PredZERO}</span></span>
<span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a><span class="co">-- pred (succ nv1) -&gt; nv1        {E-PredSucc}</span></span>
<span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a><span class="co">--        t1 -&gt; t1&#39;</span></span>
<span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a><span class="co">-- ----------------------        {E-Pred}</span></span>
<span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a><span class="co">--   pred t1 -&gt; pred t1&#39;</span></span>
<span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a><span class="co">-- iszero 0 -&gt; true              {E-IsZeroZERO}</span></span>
<span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a><span class="co">-- iszero (succ nv1) -&gt; false    {E-IsZeroSucc}</span></span>
<span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a><span class="co">--         t1 -&gt; t1&#39;</span></span>
<span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a><span class="co">-- -------------------------     {E-IsZero}</span></span>
<span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a><span class="co">--  iszero t1 -&gt; iszero t1&#39;</span></span>
<span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a><span class="ot">eval ::</span> <span class="dt">Term</span> <span class="ot">-&gt;</span> <span class="dt">Term</span> </span>
<span id="cb3-61"><a href="#cb3-61" aria-hidden="true" tabindex="-1"></a>eval t <span class="ot">=</span> <span class="kw">case</span> t <span class="kw">of</span> </span>
<span id="cb3-62"><a href="#cb3-62" aria-hidden="true" tabindex="-1"></a>               <span class="dt">IfThenElse</span> <span class="dt">T</span> t2 t3 <span class="ot">-&gt;</span> t2 <span class="co">--{E-IfTrue}</span></span>
<span id="cb3-63"><a href="#cb3-63" aria-hidden="true" tabindex="-1"></a>               <span class="dt">IfThenElse</span> <span class="dt">F</span> t2 t3 <span class="ot">-&gt;</span> t3 <span class="co">--{E-IfFalse}</span></span>
<span id="cb3-64"><a href="#cb3-64" aria-hidden="true" tabindex="-1"></a>               <span class="dt">IfThenElse</span> t1 t2 t3 <span class="ot">-&gt;</span> <span class="kw">let</span> t1&#39; <span class="ot">=</span> eval t1 <span class="kw">in</span> <span class="dt">IfThenElse</span> t1&#39; t2 t3 <span class="co">--{E-If}</span></span>
<span id="cb3-65"><a href="#cb3-65" aria-hidden="true" tabindex="-1"></a>               <span class="dt">S</span> t1 <span class="ot">-&gt;</span> <span class="kw">let</span> t1&#39; <span class="ot">=</span> eval t1 <span class="kw">in</span> <span class="dt">S</span> t1&#39;  <span class="co">--{E-Succ}</span></span>
<span id="cb3-66"><a href="#cb3-66" aria-hidden="true" tabindex="-1"></a>               <span class="dt">P</span> <span class="dt">O</span> <span class="ot">-&gt;</span> <span class="dt">O</span>  <span class="co">--{E-PredZERO}</span></span>
<span id="cb3-67"><a href="#cb3-67" aria-hidden="true" tabindex="-1"></a>               <span class="dt">P</span> (<span class="dt">S</span> nv1) <span class="ot">-&gt;</span> <span class="kw">if</span> (isNumericVal nv1) <span class="kw">then</span> nv1 <span class="kw">else</span> <span class="dt">Error</span> <span class="co">--{E-PredSucc}</span></span>
<span id="cb3-68"><a href="#cb3-68" aria-hidden="true" tabindex="-1"></a>               <span class="dt">P</span> t1 <span class="ot">-&gt;</span> <span class="kw">let</span> t1&#39; <span class="ot">=</span> eval t1 <span class="kw">in</span> <span class="dt">P</span> t1&#39;  <span class="co">--{E-Pred}</span></span>
<span id="cb3-69"><a href="#cb3-69" aria-hidden="true" tabindex="-1"></a>               <span class="dt">IsZ</span> <span class="dt">O</span> <span class="ot">-&gt;</span> <span class="dt">T</span>  <span class="co">--{E-IsZeroZERO}</span></span>
<span id="cb3-70"><a href="#cb3-70" aria-hidden="true" tabindex="-1"></a>               <span class="dt">IsZ</span> (<span class="dt">S</span> nv1) <span class="ot">-&gt;</span> <span class="kw">if</span> (isNumericVal nv1) <span class="kw">then</span> <span class="dt">F</span> <span class="kw">else</span> <span class="dt">Error</span> <span class="co">--{E-IsZeroSucc}</span></span>
<span id="cb3-71"><a href="#cb3-71" aria-hidden="true" tabindex="-1"></a>               <span class="dt">IsZ</span> t1 <span class="ot">-&gt;</span> <span class="kw">let</span> t1&#39; <span class="ot">=</span> eval t1 <span class="kw">in</span> <span class="dt">IsZ</span> t1&#39; <span class="co">--{E-IsZero}</span></span>
<span id="cb3-72"><a href="#cb3-72" aria-hidden="true" tabindex="-1"></a>               _ <span class="ot">-&gt;</span> <span class="dt">Error</span></span>
<span id="cb3-73"><a href="#cb3-73" aria-hidden="true" tabindex="-1"></a>                   </span>
<span id="cb3-74"><a href="#cb3-74" aria-hidden="true" tabindex="-1"></a>eval (<span class="dt">O</span>)   <span class="co">-- Output: Error             </span></span>
<span id="cb3-75"><a href="#cb3-75" aria-hidden="true" tabindex="-1"></a><span class="co">--  apparently the evaluator from the book did not account for evaluating just ZERO </span></span>
<span id="cb3-76"><a href="#cb3-76" aria-hidden="true" tabindex="-1"></a>eval (<span class="dt">S</span> <span class="op">$</span> <span class="dt">S</span> <span class="op">$</span> <span class="dt">O</span>) <span class="co">-- Output: S ( S Error)</span></span>
<span id="cb3-77"><a href="#cb3-77" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-78"><a href="#cb3-78" aria-hidden="true" tabindex="-1"></a>eval (<span class="dt">P</span> <span class="op">$</span> <span class="dt">S</span> <span class="op">$</span> <span class="dt">S</span> <span class="op">$</span> <span class="dt">O</span>) <span class="co">-- Output: S O</span></span>
<span id="cb3-79"><a href="#cb3-79" aria-hidden="true" tabindex="-1"></a><span class="co">-- we are forced to insert a Pred &#39;P&#39; somewhere for it to properly evaluate</span></span>
<span id="cb3-80"><a href="#cb3-80" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-81"><a href="#cb3-81" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-82"><a href="#cb3-82" aria-hidden="true" tabindex="-1"></a><span class="co">--------------------------------------------------------------------- Big Step Evaluator</span></span>
<span id="cb3-83"><a href="#cb3-83" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-84"><a href="#cb3-84" aria-hidden="true" tabindex="-1"></a><span class="co">-- v=&gt;v                          {B-Value}</span></span>
<span id="cb3-85"><a href="#cb3-85" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-86"><a href="#cb3-86" aria-hidden="true" tabindex="-1"></a><span class="co">-- t1 =&gt; true   t2 =&gt; v2 </span></span>
<span id="cb3-87"><a href="#cb3-87" aria-hidden="true" tabindex="-1"></a><span class="co">-- ----------------------------  {B-IfTrue}</span></span>
<span id="cb3-88"><a href="#cb3-88" aria-hidden="true" tabindex="-1"></a><span class="co">--  if t1 then t2 else t3 =&gt; v2</span></span>
<span id="cb3-89"><a href="#cb3-89" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-90"><a href="#cb3-90" aria-hidden="true" tabindex="-1"></a><span class="co">--    t1 =&gt; false   t3 =&gt; v3</span></span>
<span id="cb3-91"><a href="#cb3-91" aria-hidden="true" tabindex="-1"></a><span class="co">-- ----------------------------  {B-IfFalse}</span></span>
<span id="cb3-92"><a href="#cb3-92" aria-hidden="true" tabindex="-1"></a><span class="co">--  if t1 then t2 else t3 =&gt; v3</span></span>
<span id="cb3-93"><a href="#cb3-93" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-94"><a href="#cb3-94" aria-hidden="true" tabindex="-1"></a><span class="co">--       t1 =&gt; nv1</span></span>
<span id="cb3-95"><a href="#cb3-95" aria-hidden="true" tabindex="-1"></a><span class="co">-- --------------------          {B-Succ}</span></span>
<span id="cb3-96"><a href="#cb3-96" aria-hidden="true" tabindex="-1"></a><span class="co">--  succ t1 =&gt; succ nv1</span></span>
<span id="cb3-97"><a href="#cb3-97" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-98"><a href="#cb3-98" aria-hidden="true" tabindex="-1"></a><span class="co">--       t1 =&gt; 0</span></span>
<span id="cb3-99"><a href="#cb3-99" aria-hidden="true" tabindex="-1"></a><span class="co">-- --------------------          {B-PredZERO}</span></span>
<span id="cb3-100"><a href="#cb3-100" aria-hidden="true" tabindex="-1"></a><span class="co">--    pred t1 =&gt; 0</span></span>
<span id="cb3-101"><a href="#cb3-101" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-102"><a href="#cb3-102" aria-hidden="true" tabindex="-1"></a><span class="co">--    t1 =&gt; succ nv1</span></span>
<span id="cb3-103"><a href="#cb3-103" aria-hidden="true" tabindex="-1"></a><span class="co">-- --------------------          {B-PredSucc}</span></span>
<span id="cb3-104"><a href="#cb3-104" aria-hidden="true" tabindex="-1"></a><span class="co">--    pred t1 =&gt; nv1</span></span>
<span id="cb3-105"><a href="#cb3-105" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-106"><a href="#cb3-106" aria-hidden="true" tabindex="-1"></a><span class="co">--        t1 =&gt; 0</span></span>
<span id="cb3-107"><a href="#cb3-107" aria-hidden="true" tabindex="-1"></a><span class="co">-- --------------------          {B-IsZeroZERO}</span></span>
<span id="cb3-108"><a href="#cb3-108" aria-hidden="true" tabindex="-1"></a><span class="co">--   iszero t1 =&gt; true</span></span>
<span id="cb3-109"><a href="#cb3-109" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-110"><a href="#cb3-110" aria-hidden="true" tabindex="-1"></a><span class="co">--    t1 =&gt; succ nv1</span></span>
<span id="cb3-111"><a href="#cb3-111" aria-hidden="true" tabindex="-1"></a><span class="co">-- --------------------          {B-IsZeroSucc}</span></span>
<span id="cb3-112"><a href="#cb3-112" aria-hidden="true" tabindex="-1"></a><span class="co">--   iszero t1 =&gt; false</span></span>
<span id="cb3-113"><a href="#cb3-113" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-114"><a href="#cb3-114" aria-hidden="true" tabindex="-1"></a><span class="co">-- Why I was forced to fuse two case patterns into 1 for {B-PredZERO} {B-PredSucc} and also for {B-IsZeroSUCC} {B-IsZeroZERO}</span></span>
<span id="cb3-115"><a href="#cb3-115" aria-hidden="true" tabindex="-1"></a><span class="co">-- bigstep_eval ( S $ P $ O ) would get recursively stuck on the earliest {B-PredSucc} pattern </span></span>
<span id="cb3-116"><a href="#cb3-116" aria-hidden="true" tabindex="-1"></a><span class="co">-- bigstep_eval ( P $ S $ O ) would get recursively stuck on the earliest {B-PredZERO} pattern </span></span>
<span id="cb3-117"><a href="#cb3-117" aria-hidden="true" tabindex="-1"></a><span class="co">-- My original intent to keep faithful was to have each evaluation rule be represented by it&#39;s own case pattern.</span></span>
<span id="cb3-118"><a href="#cb3-118" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-119"><a href="#cb3-119" aria-hidden="true" tabindex="-1"></a><span class="ot">bigstep_eval ::</span> <span class="dt">Term</span> <span class="ot">-&gt;</span> <span class="dt">Term</span></span>
<span id="cb3-120"><a href="#cb3-120" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-121"><a href="#cb3-121" aria-hidden="true" tabindex="-1"></a>bigstep_eval t <span class="ot">=</span> <span class="kw">case</span> t <span class="kw">of</span> </span>
<span id="cb3-122"><a href="#cb3-122" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">T</span> <span class="ot">-&gt;</span> <span class="dt">T</span> <span class="co">--{B-Value}</span></span>
<span id="cb3-123"><a href="#cb3-123" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">F</span> <span class="ot">-&gt;</span> <span class="dt">F</span> <span class="co">--{B-Value}</span></span>
<span id="cb3-124"><a href="#cb3-124" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">O</span> <span class="ot">-&gt;</span> <span class="dt">O</span> <span class="co">--{B-Value}</span></span>
<span id="cb3-125"><a href="#cb3-125" aria-hidden="true" tabindex="-1"></a>                       (<span class="dt">IfThenElse</span> t1 t2 t3) <span class="ot">-&gt;</span> <span class="kw">case</span> (bigstep_eval t1) <span class="kw">of</span> </span>
<span id="cb3-126"><a href="#cb3-126" aria-hidden="true" tabindex="-1"></a>                                                               <span class="dt">T</span> <span class="ot">-&gt;</span> <span class="kw">let</span> v2 <span class="ot">=</span> (bigstep_eval t2) <span class="kw">in</span> v2 <span class="co">--{B-IfTrue}</span></span>
<span id="cb3-127"><a href="#cb3-127" aria-hidden="true" tabindex="-1"></a>                       (<span class="dt">IfThenElse</span> t1 t2 t3) <span class="ot">-&gt;</span> <span class="kw">case</span> (bigstep_eval t1) <span class="kw">of</span> </span>
<span id="cb3-128"><a href="#cb3-128" aria-hidden="true" tabindex="-1"></a>                                                               <span class="dt">F</span> <span class="ot">-&gt;</span> <span class="kw">let</span> v3 <span class="ot">=</span> (bigstep_eval t3) <span class="kw">in</span> v3 <span class="co">--{B-IfFalse}</span></span>
<span id="cb3-129"><a href="#cb3-129" aria-hidden="true" tabindex="-1"></a>                       (<span class="dt">S</span> t1) <span class="ot">-&gt;</span> <span class="kw">let</span> nv1 <span class="ot">=</span> (bigstep_eval t1) <span class="kw">in</span> (<span class="dt">S</span> nv1) <span class="co">--{B-Succ}</span></span>
<span id="cb3-130"><a href="#cb3-130" aria-hidden="true" tabindex="-1"></a>                       (<span class="dt">P</span> t1) <span class="ot">-&gt;</span> <span class="kw">case</span> (bigstep_eval t1) <span class="kw">of</span> </span>
<span id="cb3-131"><a href="#cb3-131" aria-hidden="true" tabindex="-1"></a>                                                       (<span class="dt">S</span> nv1) <span class="ot">-&gt;</span> nv1 <span class="co">--{B-PredSucc}</span></span>
<span id="cb3-132"><a href="#cb3-132" aria-hidden="true" tabindex="-1"></a>                                                       <span class="dt">O</span> <span class="ot">-&gt;</span> <span class="dt">O</span> <span class="co">--{B-PredZERO}                                                       </span></span>
<span id="cb3-133"><a href="#cb3-133" aria-hidden="true" tabindex="-1"></a>                       (<span class="dt">IsZ</span> t1) <span class="ot">-&gt;</span> <span class="kw">case</span> (bigstep_eval t1) <span class="kw">of</span> </span>
<span id="cb3-134"><a href="#cb3-134" aria-hidden="true" tabindex="-1"></a>                                                       (<span class="dt">S</span> nv1) <span class="ot">-&gt;</span> <span class="dt">F</span> <span class="co">--{B-IsZeroSucc}</span></span>
<span id="cb3-135"><a href="#cb3-135" aria-hidden="true" tabindex="-1"></a>                                                       <span class="dt">O</span> <span class="ot">-&gt;</span> <span class="dt">T</span>  <span class="co">--{B-IsZeroZERO}                                             </span></span>
<span id="cb3-136"><a href="#cb3-136" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-137"><a href="#cb3-137" aria-hidden="true" tabindex="-1"></a>                       <span class="co">-- Had to fuse the two case patterns below and the do the same with {B-IsZeroSucc} {B-IsZeroZERO}</span></span>
<span id="cb3-138"><a href="#cb3-138" aria-hidden="true" tabindex="-1"></a>                       <span class="co">-- (P t1) -&gt; case (bigstep_eval t1) of </span></span>
<span id="cb3-139"><a href="#cb3-139" aria-hidden="true" tabindex="-1"></a>                       <span class="co">--                                 (S nv1) -&gt; nv1 --{B-PredSucc}</span></span>
<span id="cb3-140"><a href="#cb3-140" aria-hidden="true" tabindex="-1"></a>                       <span class="co">-- (P t1) -&gt; case (bigstep_eval t1) of </span></span>
<span id="cb3-141"><a href="#cb3-141" aria-hidden="true" tabindex="-1"></a>                       <span class="co">--                                 O -&gt; O --{B-PredZERO}                       </span></span>
<span id="cb3-142"><a href="#cb3-142" aria-hidden="true" tabindex="-1"></a>                           </span>
<span id="cb3-143"><a href="#cb3-143" aria-hidden="true" tabindex="-1"></a>bigstep_eval (<span class="dt">IfThenElse</span> <span class="dt">T</span> <span class="dt">F</span> <span class="dt">T</span>) </span>
<span id="cb3-144"><a href="#cb3-144" aria-hidden="true" tabindex="-1"></a>bigstep_eval ( <span class="dt">P</span> ( <span class="dt">S</span> <span class="op">$</span> <span class="dt">S</span> <span class="op">$</span> <span class="dt">O</span>))</span>
<span id="cb3-145"><a href="#cb3-145" aria-hidden="true" tabindex="-1"></a>bigstep_eval (<span class="dt">S</span> <span class="op">$</span> <span class="dt">P</span> <span class="op">$</span> <span class="dt">O</span>)</span>
<span id="cb3-146"><a href="#cb3-146" aria-hidden="true" tabindex="-1"></a>bigstep_eval (<span class="dt">IsZ</span> <span class="dt">O</span>)</span></code></pre></div>
<div class="sourceCode" id="cb4"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Term</span> <span class="ot">=</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">TmTrue</span> </span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">TmFalse</span> </span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">TmIf</span> <span class="dt">Term</span> <span class="dt">Term</span> <span class="dt">Term</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">TmZero</span> </span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">TmSucc</span> <span class="dt">Term</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">TmPred</span> <span class="dt">Term</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">TmIsZero</span> <span class="dt">Term</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="ot">eval ::</span> <span class="dt">Term</span> <span class="ot">-&gt;</span> <span class="dt">Term</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>eval t <span class="ot">=</span> <span class="kw">case</span> eval1 t <span class="kw">of</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- I&#39;m not sure but it seems as though this is actually broken</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- in Pierce&#39;s original implementation so I&#39;ve added &quot;if t&#39; == t ..&quot;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Just</span> t&#39; <span class="ot">-&gt;</span> <span class="kw">if</span> t&#39; <span class="op">==</span> t <span class="kw">then</span> t <span class="kw">else</span> eval t&#39;</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> t</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="co">-- True if the given term is a numerical value. In short a Peano natural number</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="co">-- consisting of a chain of calls to succ terminating at a zero. Anything else</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="co">-- is either a type error or needs to be evaluated.</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a><span class="ot">isNumericVal ::</span> <span class="dt">Term</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>isNumericVal t <span class="ot">=</span> <span class="kw">case</span> t <span class="kw">of</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>  <span class="dt">TmZero</span> <span class="ot">-&gt;</span> <span class="dt">True</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>  <span class="dt">TmSucc</span> t1 <span class="ot">-&gt;</span> isNumericVal t1</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>  _ <span class="ot">-&gt;</span> <span class="dt">False</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a><span class="co">-- True if the given term represents a fully evaluated value.</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a><span class="ot">isVal ::</span> <span class="dt">Term</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>isVal t <span class="ot">=</span> <span class="kw">case</span> t <span class="kw">of</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>  <span class="dt">TmTrue</span> <span class="ot">-&gt;</span> <span class="dt">True</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>  <span class="dt">TmFalse</span> <span class="ot">-&gt;</span> <span class="dt">True</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>  t <span class="ot">-&gt;</span> isNumericVal t</span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a><span class="co">-- Evaluate the given term one step.</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a><span class="ot">eval1 ::</span> <span class="dt">Term</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Term</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmIf</span> <span class="dt">TmTrue</span> t2 t3) <span class="ot">=</span> <span class="fu">return</span> t2</span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmIf</span> <span class="dt">TmFalse</span> t2 t3) <span class="ot">=</span> <span class="fu">return</span> t3</span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmIf</span> t1 t2 t3) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a>  t1&#39; <span class="ot">&lt;-</span> eval1 t1</span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> <span class="op">$</span> <span class="dt">TmIf</span> t1&#39; t2 t3</span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmSucc</span> t1) <span class="ot">=</span> <span class="fu">fmap</span> <span class="dt">TmSucc</span> t1&#39;</span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> t1&#39; <span class="ot">=</span> eval1 t1</span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmPred</span> <span class="dt">TmZero</span>) <span class="ot">=</span> <span class="fu">return</span> <span class="dt">TmZero</span></span>
<span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmPred</span> (<span class="dt">TmSucc</span> nv1))</span>
<span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> isNumericVal nv1 <span class="ot">=</span> <span class="fu">return</span> nv1</span>
<span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmPred</span> t1) <span class="ot">=</span> <span class="fu">fmap</span> <span class="dt">TmPred</span> t1&#39;</span>
<span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> t1&#39; <span class="ot">=</span> eval1 t1</span>
<span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmIsZero</span> <span class="dt">TmZero</span>) <span class="ot">=</span> <span class="fu">return</span> <span class="dt">TmTrue</span></span>
<span id="cb4-49"><a href="#cb4-49" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmIsZero</span> (<span class="dt">TmSucc</span> nv1))</span>
<span id="cb4-50"><a href="#cb4-50" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> isNumericVal nv1 <span class="ot">=</span> <span class="fu">return</span> <span class="dt">TmFalse</span></span>
<span id="cb4-51"><a href="#cb4-51" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmIsZero</span> t1) <span class="ot">=</span> <span class="fu">fmap</span> <span class="dt">TmIsZero</span> t1&#39;</span>
<span id="cb4-52"><a href="#cb4-52" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> t1&#39; <span class="ot">=</span> eval1 t1</span>
<span id="cb4-53"><a href="#cb4-53" aria-hidden="true" tabindex="-1"></a>eval1 _ <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb4-54"><a href="#cb4-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-55"><a href="#cb4-55" aria-hidden="true" tabindex="-1"></a>eval1 (<span class="dt">TmSucc</span> <span class="op">$</span> <span class="dt">TmPred</span> <span class="op">$</span> <span class="dt">TmSucc</span> <span class="op">$</span> <span class="dt">TmZero</span>)</span></code></pre></div>
</section>
]]></description>
    <pubDate>Fri, 01 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2022-07-01-TypeTheoryInterpreter.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Categorical UML</title>
    <link>https://userjy.github.io/posts/2022-07-01-TypeTheory.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  1, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>
    
</div>
<div id="TOC"><ul>
<li><a href="#to-1"><span class="toc-section-number">1</span> 1 to 1</a></li>
<li><a href="#to-1-1"><span class="toc-section-number">2</span> 0..1 to 1</a></li>
<li><a href="#to-1-2"><span class="toc-section-number">3</span> 0..* to 1</a></li>
<li><a href="#to-1-3"><span class="toc-section-number">4</span> 1..* to 1</a></li>
<li><a href="#to-0..1"><span class="toc-section-number">5</span> 0..1 to 0..1</a></li>
<li><a href="#to-0.."><span class="toc-section-number">6</span> 0..1 to 0..*</a></li>
<li><a href="#to-1.."><span class="toc-section-number">7</span> 0..1 to 1..*</a></li>
<li><a href="#to-0..-1"><span class="toc-section-number">8</span> 0..* to 0..*</a></li>
<li><a href="#to-1..-1"><span class="toc-section-number">9</span> 0..* to 1..*</a></li>
<li><a href="#to-1..-2"><span class="toc-section-number">10</span> 1..* to 1..*</a></li>
</ul></div>
<ul>
<li><code>*</code> in uml means <code>0..*</code>
<ul>
<li>zero or more</li>
</ul></li>
</ul>
<section id="to-1" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> 1 to 1</h1>
<p><span class="math display">\[A\xlongequal{isomorphism}B\]</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6c65667420746f20726967687420646972656374696f6e0a4120223122202d2d2d202231222042'></figure>
</section>
<section id="to-1-1" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> 0..1 to 1</h1>
<p><span class="math display">\[A\xrightarrow{injective}B\]</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6c65667420746f20726967687420646972656374696f6e0a412022302e2e3122202d2d2d202231222042'></figure>
</section>
<section id="to-1-2" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> 0..* to 1</h1>
<p><span class="math display">\[A\xrightarrow{function}B\]</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6c65667420746f20726967687420646972656374696f6e0a4120222a22202d2d2d202231222042'></figure>
</section>
<section id="to-1-3" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> 1..* to 1</h1>
<p><span class="math display">\[A\xtwoheadrightarrow{surjective}B\]</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6c65667420746f20726967687420646972656374696f6e0a412022312e2e2a22202d2d2d202231222042'></figure>
</section>
<section id="to-0..1" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> 0..1 to 0..1</h1>
<p><span class="math display">\[A \xleftarrow{injective} R\xrightarrow{injective}B\]</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6c65667420746f20726967687420646972656374696f6e0a412022302e2e3122202d2d2d2022302e2e31222042'></figure>
</section>
<section id="to-0.." class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> 0..1 to 0..*</h1>
<p><span class="math display">\[A \xleftarrow{function} R\xrightarrow{injective}B\]</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6c65667420746f20726967687420646972656374696f6e0a412022302e2e3122202d2d2d20222a222042'></figure>
</section>
<section id="to-1.." class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> 0..1 to 1..*</h1>
<p><span class="math display">\[A \xtwoheadleftarrow{surjective} R\xrightarrow{injective}B\]</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6c65667420746f20726967687420646972656374696f6e0a412022302e2e3122202d2d2d2022312e2e2a222042'></figure>
</section>
<section id="to-0..-1" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> 0..* to 0..*</h1>
<p><span class="math display">\[A \xleftarrow{function} R\xrightarrow{function}B\]</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6c65667420746f20726967687420646972656374696f6e0a4120222a22202d2d2d20222a222042'></figure>
</section>
<section id="to-1..-1" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> 0..* to 1..*</h1>
<p><span class="math display">\[A \xtwoheadleftarrow{surjective} R\xrightarrow{function}B\]</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6c65667420746f20726967687420646972656374696f6e0a4120222a22202d2d2d2022312e2e2a222042'></figure>
</section>
<section id="to-1..-2" class="level1" data-number="10">
<h1 data-number="10"><span class="header-section-number">10</span> 1..* to 1..*</h1>
<p><span class="math display">\[A \xtwoheadleftarrow{surjective} R\xtwoheadrightarrow{surjective}B\]</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6c65667420746f20726967687420646972656374696f6e0a412022312e2e2a22202d2d2d2022312e2e2a222042'></figure>
</section>
]]></description>
    <pubDate>Fri, 01 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2022-07-01-TypeTheory.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Translate Sequent Calculus to ND</title>
    <link>https://userjy.github.io/posts/2022-07-01-SequentsNaturalDed.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  1, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;mathcs&#39;." href="/tags/mathcs.html">mathcs</a>, <a title="All pages tagged &#39;puremath&#39;." href="/tags/puremath.html">puremath</a>, <a title="All pages tagged &#39;logic&#39;." href="/tags/logic.html">logic</a>
    
</div>
<p>3 types of systems: LK or Sequent Calc, ND and my custom.</p>
<p>Visual proof trees with the root being the conclusion.<br />
The leafs on top (P,Q,R,S) are the assumptions or <span class="math inline">\(\Gamma\)</span></p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a6469677261706820776f726c64207b0a73697a653d22332c33223b0a097b72616e6b3d73616d653b20502051205220533b7d0a202020207b205020512052207d2d3e20540a2020202053202d3e20550a202020207b542055207d202d3e20436f6e636c7573696f6e0a090a7d0a40656e64756d6c'></figure>
<p>Each Sequent is it’s own proof tree. The rules tell us how to transform one tree to another.</p>
<p>ND:</p>
<p>elim-and</p>
<p><span class="math display">\[\frac{\Gamma \vdash A \land B  }{\Gamma \vdash A}\]</span></p>
<p>intro-and</p>
<p><span class="math display">\[\frac{\Gamma \vdash A \qquad \Pi \vdash B  }{\Gamma, \Pi \vdash A \land B}\]</span></p>
<ul>
<li>Given: Some set of assumptions <span class="math inline">\(\Gamma\)</span> can produce a proof for <span class="math inline">\(A\)</span></li>
<li>Given: another set of assumptions <span class="math inline">\(\Pi\)</span> can produce a proof for <span class="math inline">\(B\)</span>.<br />
</li>
<li>Therefore: we can produce a proof for <span class="math inline">\(A \land B\)</span> by combining the two set of assumptions <span class="math inline">\(\Gamma, \Pi\)</span>.</li>
</ul>
<p>LK:</p>
<p>left-and</p>
<p><span class="math display">\[\frac{\Gamma , A,B  \vdash \Delta  }{\Gamma, A \land B \vdash \Delta}\]</span></p>
<p>right-and</p>
<p><span class="math display">\[\frac{\Gamma \vdash A, \Delta \qquad \Sigma \vdash B, \Pi  }{\Gamma, \Sigma \vdash \Delta, \Pi, A \land B}\]</span></p>
<section id="lem" class="level4" data-number="0.0.0.1">
<h4 data-number="0.0.0.1"><span class="header-section-number">0.0.0.1</span> LEM</h4>
<p>ND:</p>
<p><span class="math display">\[\frac{\Gamma , A \vdash B \qquad \Pi , \neg A \vdash B  }{\Gamma, \Pi \vdash B}\]</span></p>
<p>custom:</p>
<p><span class="math display">\[\cfrac{\cfrac{[A \lor \neg A]^{lem}}{...}}{B} \]</span></p>
</section>
<section id="interlude" class="level4" data-number="0.0.0.2">
<h4 data-number="0.0.0.2"><span class="header-section-number">0.0.0.2</span> Interlude</h4>
<p>Notice that the right rules of LK, is very similar to the rules of ND.</p>
</section>
<section id="transformation" class="level4" data-number="0.0.0.3">
<h4 data-number="0.0.0.3"><span class="header-section-number">0.0.0.3</span> Transformation</h4>
<p>LK builds proof trees from bottom up using pattern matching.<br />
We want to prove</p>
<p><span class="math display">\[ \vdash \neg \neg A \rightarrow A \]</span></p>
<p>[look through LK table find a rule that looks like <span class="math inline">\(\cfrac{...}{... \vdash\ \fbox{}\rightarrow\fbox{}}\)</span>]<br />
[the right-implication rule matches <span class="math inline">\(\cfrac{A,\Gamma \vdash \Delta, B}{\Gamma \vdash \Delta, A \rightarrow B}\)</span> ]</p>
</section>
]]></description>
    <pubDate>Fri, 01 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2022-07-01-SequentsNaturalDed.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Compilers and REPL</title>
    <link>https://userjy.github.io/posts/2022-07-01-REPL.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  1, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;compiler&#39;." href="/tags/compiler.html">compiler</a>
    
</div>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a736b696e706172616d20736861646f77696e672066616c73650a73746174652022526561642220617320410a2020737461746520224576616c756174652220617320420a2020737461746520225072696e742220617320430a41202d2d3e2042200a42202d2d3e2043200a43202d2d3e20410a40656e64756d6c'></figure>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> REPL():</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    x <span class="op">=</span> <span class="bu">input</span>() <span class="co">#READ</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    y <span class="op">=</span> <span class="bu">eval</span>(x) <span class="co">#EVAL</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(y)    <span class="co">#PRINT</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    REPL()      <span class="co">#LOOP</span></span></code></pre></div>
<hr />
<section id="tokenizer" class="level3" data-number="0.0.1">
<h3 data-number="0.0.1"><span class="header-section-number">0.0.1</span> Tokenizer</h3>
<p>Tokenizing is simply the act of converting a string to a list of elements.</p>
<hr />
</section>
<section id="a-very-simple-lisp-math-eval-for-ast" class="level3" data-number="0.0.2">
<h3 data-number="0.0.2"><span class="header-section-number">0.0.2</span> A Very Simple LISP math eval for AST</h3>
<ul>
<li>Racket treats list like (+ 2 3) as AST.
<ul>
<li>Head of list is the operator.<br />
</li>
<li>Tail of list are the arguments</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> helperStr_Int(k):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="bu">int</span>(k)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span>:</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> k</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>str_to_OP<span class="op">=</span>{<span class="st">&quot;+&quot;</span>: <span class="kw">lambda</span> x,y: x<span class="op">+</span>y}</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> eval_naive(AST):</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    operator <span class="op">=</span> str_to_OP[AST[<span class="dv">0</span>]]</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    args <span class="op">=</span> <span class="bu">list</span>(<span class="bu">map</span>(<span class="kw">lambda</span> x: helperStr_Int(x),AST[<span class="dv">1</span>:]))</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> operator(<span class="op">*</span>args)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>test <span class="op">=</span> [<span class="st">&quot;+&quot;</span>,<span class="st">&quot;2&quot;</span>,<span class="st">&quot;3&quot;</span>]</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>eval_naive([<span class="st">&quot;+&quot;</span>,<span class="st">&quot;2&quot;</span>,<span class="st">&quot;3&quot;</span>])</span></code></pre></div>
</section>
<section id="eval-with-nested-ast" class="level3" data-number="0.0.3">
<h3 data-number="0.0.3"><span class="header-section-number">0.0.3</span> Eval with nested AST</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>str_to_OP<span class="op">=</span>{<span class="st">&quot;+&quot;</span>: <span class="kw">lambda</span> x,y: x<span class="op">+</span>y,</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot;define&quot;</span>: <span class="kw">lambda</span> x:<span class="dv">3</span>}</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> helperStr_Int(k):</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="bu">int</span>(k)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span>:</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> k</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> eval_naive(AST):</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    operator <span class="op">=</span> str_to_OP[AST[<span class="dv">0</span>]]</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    args <span class="op">=</span> <span class="bu">list</span>(<span class="bu">map</span>(<span class="kw">lambda</span> x: helperStr_Int(x) ,AST[<span class="dv">1</span>:]))</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    RECURSEargs <span class="op">=</span> <span class="bu">list</span>(<span class="bu">map</span>(<span class="kw">lambda</span> x: eval_naive(x) <span class="cf">if</span> <span class="bu">isinstance</span>(x,<span class="bu">list</span>) <span class="cf">else</span> x, args))</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">#Recursively calls eval if another AST is found in the args.</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> operator(<span class="op">*</span>RECURSEargs)</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>eval_naive([<span class="st">&quot;+&quot;</span>,[<span class="st">&quot;+&quot;</span>,<span class="st">&quot;1&quot;</span>,<span class="st">&quot;2&quot;</span>],<span class="st">&quot;3&quot;</span>])</span></code></pre></div>
<hr />
</section>
<section id="using-lambdas-to-define-a-local-environment" class="level3" data-number="0.0.4">
<h3 data-number="0.0.4"><span class="header-section-number">0.0.4</span> Using Lambdas to define a local environment</h3>
<p>In lambda calculus we can think of everything as a lambdas, everything including the local environment.</p>
<p><span class="math inline">\((\lambda x. sourceCode)(2) \Rightarrow sourceCode[2/variable]\)</span></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>x<span class="op">=</span><span class="dv">2</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co">###sourceCode</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span>(..):</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  doSomething(x)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  y<span class="op">=</span>x<span class="op">*</span>..</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>.....</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">###sourceCode</span></span></code></pre></div>
<p>We can’t do this naively in python because python does eager evaluation.</p>
<p>A way to get around that is converting everything to string then using <code class="sourceCode python"><span class="bu">eval</span></code> which simulates a lazy evaluation.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">#wrapCode builds our lazy lambda expression string</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> wrapCode(sourceCode,var,val):</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="ss">f&quot;(lambda </span><span class="sc">{</span>var<span class="sc">}</span><span class="ss">: </span><span class="sc">{</span>sourceCode<span class="sc">}</span><span class="ss">)(</span><span class="sc">{</span>val<span class="sc">}</span><span class="ss">)&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>wrapCode(wrapCode(<span class="st">&quot;print(x+y)&quot;</span>,<span class="st">&quot;x&quot;</span>,<span class="dv">2</span>),<span class="st">&quot;y&quot;</span>,<span class="dv">3</span>)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="co">#&gt; &#39;(lambda y: (lambda x: print(x+y))(2))(3)&#39;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="bu">eval</span>(wrapCode(wrapCode(<span class="st">&quot;print(x+y)&quot;</span>,<span class="st">&quot;x&quot;</span>,<span class="dv">2</span>),<span class="st">&quot;y&quot;</span>,<span class="dv">3</span>))</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="co">#&gt; 5</span></span></code></pre></div>
<hr />
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Expr</span> <span class="ot">=</span> <span class="dt">Var</span> <span class="dt">String</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="dt">Const</span> <span class="dt">Int</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="dt">Plus</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="dt">Times</span> <span class="dt">Expr</span> <span class="dt">Expr</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="dt">Sin</span> <span class="dt">Expr</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> <span class="dt">Cos</span> <span class="dt">Expr</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>          <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="ot">diff ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>diff (<span class="dt">Var</span> y) x <span class="op">|</span> y <span class="op">==</span> x <span class="ot">=</span> <span class="dt">Const</span> <span class="dv">1</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>               <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Const</span> <span class="dv">0</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>diff (<span class="dt">Const</span> _) _ <span class="ot">=</span> <span class="dt">Const</span> <span class="dv">0</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>diff (<span class="dt">Plus</span> e1 e2) x <span class="ot">=</span> <span class="dt">Plus</span> (diff e1 x) (diff e2 x)</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>diff (<span class="dt">Times</span> e1 e2) x <span class="ot">=</span> <span class="dt">Plus</span> (<span class="dt">Times</span> (diff e1 x) e2)</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>                            (<span class="dt">Times</span> (diff e2 x) e1)</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>diff (<span class="dt">Sin</span> e1) x <span class="ot">=</span> <span class="dt">Times</span> (<span class="dt">Cos</span> e1) (diff e1 x)</span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>diff (<span class="dt">Cos</span> e1) x <span class="ot">=</span> <span class="dt">Times</span> (<span class="dt">Times</span> (<span class="dt">Const</span> (<span class="op">-</span><span class="dv">1</span>)) (<span class="dt">Sin</span> e1)) (diff e1 x)</span></code></pre></div>
</section>
<section id="tokenizer-1" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Tokenizer</h1>
<p>Tokenize a math expression<br />
eg. “-2 * 4” =&gt; [“-2”, “*“,”4”]</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>isspace <span class="op">=</span> <span class="kw">lambda</span> k : k <span class="op">==</span> <span class="st">&#39; &#39;</span> <span class="kw">or</span> k <span class="op">==</span> <span class="st">&#39;</span><span class="ch">\t</span><span class="st">&#39;</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> is_number(k):</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">float</span>(k)</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">True</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> <span class="pp">ValueError</span>:</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">False</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> token_single(x):</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(x) <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> []</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">len</span>(x) <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> [x]</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> isspace(x[<span class="dv">0</span>]):</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> token_single(x[<span class="dv">1</span>:])</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> x[<span class="dv">0</span>].isdigit() <span class="kw">or</span> x[<span class="dv">0</span>] <span class="op">==</span> <span class="st">&#39;-&#39;</span>:</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> x[<span class="dv">0</span>].isdigit() <span class="kw">and</span> isspace(x[<span class="dv">1</span>]):</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> [x[<span class="dv">0</span>]] <span class="op">+</span> token_multi(x[<span class="dv">2</span>:])</span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>            t <span class="op">=</span> token_multi(x[<span class="dv">1</span>:])</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> t <span class="op">==</span> []:</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> [x[<span class="dv">0</span>]]</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> is_number(t[<span class="dv">0</span>]):</span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>                    t[<span class="dv">0</span>] <span class="op">=</span> x[<span class="dv">0</span>] <span class="op">+</span> t[<span class="dv">0</span>]</span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">return</span> t</span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>                <span class="cf">else</span>:</span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">return</span> [x[<span class="dv">0</span>]] <span class="op">+</span> t</span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> x[<span class="dv">0</span>] <span class="op">==</span> <span class="st">&#39;(&#39;</span>:</span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>            t <span class="op">=</span> token_single(x[<span class="dv">1</span>:])</span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>            t <span class="op">=</span> token_multi(x[<span class="dv">1</span>:])</span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> [x[<span class="dv">0</span>]] <span class="op">+</span> t</span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> token_multi(x):</span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(x) <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> []</span>
<span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> <span class="bu">len</span>(x) <span class="op">==</span> <span class="dv">1</span>:</span>
<span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> [x]</span>
<span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> isspace(x[<span class="dv">0</span>]):</span>
<span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> token_multi(x[<span class="dv">1</span>:])</span>
<span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> x[<span class="dv">0</span>].isdigit():</span>
<span id="cb7-45"><a href="#cb7-45" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> isspace(x[<span class="dv">1</span>]):</span>
<span id="cb7-46"><a href="#cb7-46" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> [x[<span class="dv">0</span>]] <span class="op">+</span> token_multi(x[<span class="dv">2</span>:])</span>
<span id="cb7-47"><a href="#cb7-47" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb7-48"><a href="#cb7-48" aria-hidden="true" tabindex="-1"></a>            t <span class="op">=</span> token_multi(x[<span class="dv">1</span>:])</span>
<span id="cb7-49"><a href="#cb7-49" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> t <span class="op">==</span> []:</span>
<span id="cb7-50"><a href="#cb7-50" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> [x[<span class="dv">0</span>]]</span>
<span id="cb7-51"><a href="#cb7-51" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span>
<span id="cb7-52"><a href="#cb7-52" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> is_number(t[<span class="dv">0</span>]):</span>
<span id="cb7-53"><a href="#cb7-53" aria-hidden="true" tabindex="-1"></a>                    t[<span class="dv">0</span>] <span class="op">=</span> x[<span class="dv">0</span>] <span class="op">+</span> t[<span class="dv">0</span>]</span>
<span id="cb7-54"><a href="#cb7-54" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">return</span> t</span>
<span id="cb7-55"><a href="#cb7-55" aria-hidden="true" tabindex="-1"></a>                <span class="cf">else</span>:</span>
<span id="cb7-56"><a href="#cb7-56" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">return</span> [x[<span class="dv">0</span>]] <span class="op">+</span> t</span>
<span id="cb7-57"><a href="#cb7-57" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb7-58"><a href="#cb7-58" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> x[<span class="dv">0</span>] <span class="op">==</span> <span class="st">&#39;(&#39;</span>:</span>
<span id="cb7-59"><a href="#cb7-59" aria-hidden="true" tabindex="-1"></a>            t <span class="op">=</span> token_single(x[<span class="dv">1</span>:])</span>
<span id="cb7-60"><a href="#cb7-60" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb7-61"><a href="#cb7-61" aria-hidden="true" tabindex="-1"></a>            t <span class="op">=</span> token_multi(x[<span class="dv">1</span>:])</span>
<span id="cb7-62"><a href="#cb7-62" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> [x[<span class="dv">0</span>]] <span class="op">+</span> t</span>
<span id="cb7-63"><a href="#cb7-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-64"><a href="#cb7-64" aria-hidden="true" tabindex="-1"></a>token_multi(<span class="st">&#39;-2&#39;</span>)</span></code></pre></div>
</section>
<section id="compiler" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Compiler</h1>
<section id="terminology" class="level2" data-number="2.1">
<h2 data-number="2.1"><span class="header-section-number">2.1</span> Terminology</h2>
<ol type="1">
<li>Lexer - reads input stream of characters and convert them to tokens</li>
</ol>
</section>
</section>
]]></description>
    <pubDate>Fri, 01 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2022-07-01-REPL.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>What is Pattern matching?</title>
    <link>https://userjy.github.io/posts/2022-07-01-PatternMatch.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  1, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;mathcs&#39;." href="/tags/mathcs.html">mathcs</a>, <a title="All pages tagged &#39;functional&#39;." href="/tags/functional.html">functional</a>, <a title="All pages tagged &#39;categorytheory&#39;." href="/tags/categorytheory.html">categorytheory</a>, <a title="All pages tagged &#39;puremath&#39;." href="/tags/puremath.html">puremath</a>
    
</div>
<section id="summary" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Summary</h1>
<div class="sourceCode" id="cb1"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>def somefunc <span class="op">:</span> <span class="op">...</span> <span class="op">:=</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>match (<span class="dt">FOCUS_ON_RESULTANT_TYPE</span>) with</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">|</span> (<span class="dt">Term</span><span class="op">-</span><span class="dt">Intro_RESULTANT_TYPE_1</span>) <span class="ot">=</span> <span class="op">&gt;</span> <span class="dt">Anything</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">|</span> (<span class="dt">Term</span><span class="op">-</span><span class="dt">Intro_RESULTANT_TYPE_2</span>) <span class="ot">=</span> <span class="op">&gt;</span> <span class="dt">Anything</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">|</span> (<span class="dt">Term</span><span class="op">-</span><span class="dt">Intro_RESULTANT_TYPE_3</span>) <span class="ot">=</span> <span class="op">&gt;</span> <span class="dt">Anything</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
<ul>
<li><code>List.get? xs 1</code> is our focus</li>
<li>RESULTANT_TYPE of <code>List.get? x 1</code> is <code>Option Nat</code></li>
<li>Term introduction rules of the RESULTANT_TYPE
<ul>
<li>Term-Intro 1 for <code>Option Nat</code> is constructor function Option.none</li>
<li>Term-Intro 2 for <code>Option Nat</code> is constructor function Option.some n</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb2"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#check @List.get? -- (List × Nat) -&gt; Option Nat </span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>def stringify (xs <span class="op">:</span> <span class="dt">List</span> <span class="dt">Nat</span> ) <span class="op">:</span> <span class="dt">Option</span> <span class="dt">String</span> <span class="op">:=</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>match List.get<span class="op">?</span> xs <span class="dv">1</span> with </span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">|</span> (Option.none    <span class="op">:</span> <span class="dt">Option</span> <span class="dt">Nat</span>) <span class="ot">=&gt;</span> <span class="op">...</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="op">|</span> (Option.some n <span class="op">:</span> <span class="dt">Option</span> <span class="dt">Nat</span>) <span class="ot">=&gt;</span> <span class="op">...</span></span></code></pre></div>
<ol type="1">
<li>Look at the match <code>match List.get? xs 1 with</code>
<ul>
<li>we only care about the resultant type of the match function <code>List.get?</code> which is <code>Option Nat</code></li>
<li><code>Option Nat</code> is deconstructed from it’s inductive term introduction</li>
</ul></li>
<li></li>
</ol>
</section>
<section id="extra" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Extra</h1>
<p><span class="math display">\[ \cfrac{String}{(Maybe\ String)} \qquad \cfrac{a \quad Tree\ a \quad Tree\ a}{(Node\ a\ (Tree\ a)\ (Tree\ a))}\]</span></p>
<p>Pattern matching gives us free deconstructive functions that breaks down inductive datatypes.<br />
Our goal is to make the implicit pattern-matching explicit.</p>
<p>Notation @ for forward composition</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">login::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ot">password ::</span> <span class="dt">String</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>login<span class="ot"> password ::</span> <span class="dt">String</span> <span class="op">@</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span> )</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>login<span class="ot"> password ::</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- @ represents forward function composition</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- x@f@g means g(f(x)) </span></span></code></pre></div>
<div class="sourceCode" id="cb4"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">case</span> (<span class="dt">Just</span><span class="ot"> x ::</span> <span class="dt">Maybe</span> <span class="dt">String</span>) <span class="kw">of</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="st">&quot;0&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> x <span class="ot">-&gt;</span> <span class="dt">Just</span> (<span class="st">&quot;3&quot;</span> <span class="op">++</span> x)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co">--lets deconstruct the type of &quot;case&quot;, it takes in a &quot;Just x&quot; meaning our first type is a &quot;Maybe String&quot; and outputs either Just &#39;0&#39; or Just x++&#39;3&#39; meaning it&#39;s output type is also &quot;Maybe String&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="kw">case</span><span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>         <span class="dt">Nothing</span>     <span class="ot">-&gt;</span>  <span class="dt">Just</span> <span class="dv">0</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>         <span class="dt">Just</span> x      <span class="ot">-&gt;</span>  <span class="dt">Just</span> (<span class="dv">1</span><span class="op">+</span><span class="dt">Int</span> x)  <span class="co">--(this is represented as the chain of compositions shown below)</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>         (patternMatch (<span class="dt">Just</span> x)) <span class="op">@</span> (<span class="dt">Int</span> _) <span class="op">@</span> (<span class="dv">1</span><span class="op">+</span> _ ) <span class="op">@</span> (<span class="dt">Just</span> _) <span class="co">--reduces to</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>                              x  <span class="op">@</span> (<span class="dt">Int</span> _) <span class="op">@</span> (<span class="dv">1</span><span class="op">+</span> _ ) <span class="op">@</span> (<span class="dt">Just</span> _)</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>                                   (<span class="dt">Int</span> x) <span class="op">@</span> (<span class="dv">1</span><span class="op">+</span> _ ) <span class="op">@</span> (<span class="dt">Just</span> _)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>                                            (<span class="dv">1</span><span class="op">+</span><span class="dt">Int</span> x)<span class="op">@</span> (<span class="dt">Just</span> _)</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>                                                       (<span class="dt">Just</span> <span class="dv">1</span><span class="op">+</span><span class="dt">Int</span> x) </span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="co">--however what allows us to pull out that &quot;x&quot; and rebuild it into (&quot;3&quot; ++ x)?</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="co">--This is the trivial pattern match function we get when we use a case </span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="ot">patternMatch ::</span> <span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>patternMatch (<span class="dt">Just</span> x) <span class="ot">=</span> x</span></code></pre></div>
<div class="sourceCode" id="cb5"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>     patternMatch      <span class="op">@</span>  <span class="dt">Int_Convert</span>  <span class="op">@</span>   <span class="dt">AddOne</span>   <span class="op">@</span>   <span class="dt">MaybeConstructor</span><span class="ot"> ::</span> </span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="op">@</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="op">@</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="op">@</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co">--see how we can represent are case function as a chain of compositions</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="kw">case</span> <span class="op">==</span> patternMatch <span class="op">@</span> <span class="dt">Int_Convert</span> <span class="op">@</span> <span class="dt">AddOne</span> <span class="op">@</span> <span class="dt">MaybeConstructor</span></span></code></pre></div>
<p>Takeaway</p>
<ul>
<li>Whenever we use <code>case :: X -&gt; _</code>
<ul>
<li>we get a free <code>patternMatch :: X -&gt; Deconstructed X</code></li>
</ul></li>
<li>Our example we had <code>case :: Maybe String -&gt; _</code> so we get a free <code>patternMatch :: Maybe String -&gt; String</code></li>
</ul>
<section id="trees" class="level2" data-number="2.1">
<h2 data-number="2.1"><span class="header-section-number">2.1</span> Trees</h2>
<p>Lets continue with the pattern match functions for tree paradigm.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Tree</span> a <span class="ot">=</span> <span class="dt">Leaf</span> <span class="op">|</span> <span class="dt">Node</span> a (<span class="dt">Tree</span> a) (<span class="dt">Tree</span> a)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="ot">patternmatch1 ::</span> <span class="dt">Tree</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ot">patternmatch2 ::</span> <span class="dt">Tree</span> a <span class="ot">-&gt;</span> <span class="dt">Tree</span> a</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ot">patternmatch3 ::</span> <span class="dt">Tree</span> a <span class="ot">-&gt;</span> <span class="dt">Tree</span> a</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="ot">mapTree ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Tree</span> a <span class="ot">-&gt;</span> <span class="dt">Tree</span> b</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>mapTree f <span class="dt">Leaf</span> <span class="ot">=</span> <span class="dt">Leaf</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>mapTree f (<span class="dt">Node</span> val left right) <span class="ot">=</span> <span class="dt">Node</span> (f val) (mapTree f left) (mapTree f right)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="co">--converted from implicit pattern matching to explicit pattern matching</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="ot">mapTree ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Tree</span> a <span class="ot">-&gt;</span> <span class="dt">Tree</span> b</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>mapTree f <span class="dt">Leaf</span> <span class="ot">=</span> <span class="dt">Leaf</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>mapTree f (<span class="dt">Node</span> val left right) <span class="ot">=</span> <span class="dt">Node</span> (f patternmatch1 (<span class="dt">Node</span> val left right)) (mapTree f patternmatch2 (<span class="dt">Node</span> val left right)) (mapTree f patternmatch3 (<span class="dt">Node</span> val left right))</span></code></pre></div>
<p><code>Node a (Tree a) (Tree a)</code> is a product type.</p>
<pre class="text"><code>a    Tree a     Tree a
\     |        /  
 |    |      /   
  |   |    /    
  | ProductType
   |  |  /        
    \ | /          
      *</code></pre>
<p>Pattern matching is powerful and it gives us free canonical projections of product types.</p>
<p>Pattern matching lets us deal with Sum types similar to Logical OR-elim
* By dealing with each Case/Constructor of the Disjunction/Sum type with multiple Implications/Functions by case-analysis/pattern-matching</p>
</section>
</section>
]]></description>
    <pubDate>Fri, 01 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2022-07-01-PatternMatch.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Operational Calculus</title>
    <link>https://userjy.github.io/posts/2022-07-01-OperationalCalculus.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  1, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>
    
</div>
<div id="TOC"><ul>
<li><a href="#fibonacci-example"><span class="toc-section-number">1</span> Fibonacci Example</a></li>
<li><a href="#operational-calculus-in-ode"><span class="toc-section-number">2</span> Operational Calculus in ODE</a></li>
<li><a href="#operational-calculus-in-differential-calculus"><span class="toc-section-number">3</span> Operational Calculus in Differential Calculus</a></li>
</ul></div>
<p><strong>Translations are Functors</strong></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode .txt"><code class="sourceCode default"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>       *</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  +2 /  \  +3 </span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    /    \</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>   *-----&gt;*</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>      +5</span></code></pre></div>
<section id="fibonacci-example" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Fibonacci Example</h1>
<p><span class="math display">\[ f(x+2) = f(x+1) + f(x)  \]</span></p>
<p>Translation Rules:</p>
<p><span class="math display">\[\displaylines{{\color{red}f(x) \overset{T}{\Rightarrow} T [f(x+1)] } \\ 
{\color{red}f(x) \overset{T^2}{\Rightarrow} T^2 [f(x+2)] }\\ 
{\color{red}f(x) \overset{T^0}{\Rightarrow} T^0 [f(x)]} } \]</span></p>
<p>Solve Inverse Translation Rule:</p>
<p><span class="math display">\[ let\ T = a*_\]</span></p>
<p><span class="math display">\[ f(x+1) = a * f(x)\]</span>
<span class="math display">\[ f(x) = a^{x} k\]</span></p>
<p>Translate Equation into Operations:</p>
<ul>
<li><strong><span class="math inline">\(T\)</span> is NOT a function, it is more like a functor</strong></li>
</ul>
<p><span class="math display">\[ f(x+2) = f(x+1) + f(x) \Rightarrow T^2[f(x)] = T^1 [f(x)] + T^0 [f(x)] \]</span>
<span class="math display">\[ T^2 [f(x)] = T [f(x)] + 1 [f(x)] \]</span></p>
<p>Solve Operational Eqn:</p>
<p><span class="math display">\[ ( T^2 - T - 1 ) [f(x)] = 0\]</span>
<span class="math display">\[ (T - \frac{1 + \sqrt{5}}{2})(T - \frac{1 - \sqrt{5}}{2}) [f(x)] = 0\]</span>
$$ (T - )(T - (-)^-1)[f(x)] = 0</p>
<p>Use Inverse Translation Rule:</p>
<p><span class="math display">\[ f(x) = \phi^x k_1 + (-\phi)^{-x}k_2\]</span></p>
</section>
<section id="operational-calculus-in-ode" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Operational Calculus in ODE</h1>
<p><span class="math display">\[ f&#39;&#39;(x) + 5 f&#39;(x) + 6 f(x) = 0 \]</span></p>
<p>Translation Rules:</p>
<p><span class="math display">\[ f&#39;&#39;(x) \Rightarrow T^2 f(x) \]</span>
<span class="math display">\[ f&#39;(x) \Rightarrow T^1 f(x) \]</span>
<span class="math display">\[ f(x) \Rightarrow T^0 f(x) \]</span></p>
<p>Translate Equation into Operations:</p>
<p><span class="math display">\[ T^2 [f(x)] + 5T^1 [f(x)] + 6T^0 [f(x)] = 0 \]</span>
<span class="math display">\[ (T^2 + 5T + 6) [f(x)] = 0\]</span></p>
<p>Solve Operational Eqn:</p>
<p><span class="math display">\[(T + 2)(T + 3)f(x) = 0\]</span></p>
<p><span class="math display">\[ T f(x) = -2 f(x) \]</span>
<span class="math display">\[ T f(x) = -3 f(x) \]</span></p>
<p>Solve:</p>
<p><span class="math display">\[ f&#39;(x) = -2 f(x) \]</span>
<span class="math display">\[ f&#39;(x) = -3 f(x) \]</span></p>
</section>
<section id="operational-calculus-in-differential-calculus" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Operational Calculus in Differential Calculus</h1>
<p>Lets focus on numerator of limit definition <span class="math inline">\(\lim_{\Delta \to 0}\frac{f(x+\Delta) - f(x)}{\Delta}\)</span></p>
<p><span class="math display">\[f(x+\Delta) - f(x)\]</span></p>
<p>Translation Rules:</p>
<p><span class="math display">\[ f(x+\Delta) \Rightarrow T f(x)\]</span>
<span class="math display">\[ f(x) \Rightarrow 1 f(x)\]</span></p>
<p>Translate Equation into Operations:</p>
<p><span class="math display">\[f(x+\Delta) - f(x) \Rightarrow T f(x) - 1 f(x)\]</span>
<span class="math display">\[T - 1\]</span></p>
</section>
]]></description>
    <pubDate>Fri, 01 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2022-07-01-OperationalCalculus.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>ND</title>
    <link>https://userjy.github.io/posts/2022-07-01-NatDed.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  1, 2022
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;mathcs&#39;." href="/tags/mathcs.html">mathcs</a>, <a title="All pages tagged &#39;logic&#39;." href="/tags/logic.html">logic</a>
    
</div>
<section id="what-do-propositions-actually-mean-in-logic" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> What do propositions actually mean in logic</h1>
</section>
<section id="conjunction" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Conjunction</h1>
<p><span class="math display">\[\frac{\Gamma \vdash M : A \qquad \Gamma \vdash N : B }{ \Gamma \vdash &lt;M,N&gt; : A \land B}\]</span></p>
<p><span class="math display">\[\frac{\Gamma \vdash M : A \land B}{\Gamma \vdash fst\ M : A}\]</span></p>
</section>
<section id="implication" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Implication</h1>
<p><span class="math display">\[ \frac{\Gamma, u: A \vdash M:B}{\Gamma \vdash (\lambda u: A. M): A \rightarrow B}\]</span></p>
<p><span class="math display">\[\frac{\Gamma \vdash M: A \rightarrow B \qquad \Gamma \vdash N: A}{\Gamma \vdash M\ N : B}\]</span></p>
<hr />
<p><span class="math display">\[\cfrac{[A]^u}{\cfrac{...}{\cfrac{B}{A \rightarrow B}}}\]</span></p>
<p><span class="math display">\[\cfrac{A \rightarrow B \qquad A}{B}\]</span></p>
</section>
<section id="disjunction" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Disjunction</h1>
<p><span class="math display">\[\cfrac{\Gamma \vdash M : A}{\Gamma \vdash inl\ M  : A \lor B}\]</span></p>
<p><span class="math display">\[\cfrac{\Gamma \vdash M : A \lor B \qquad \Gamma,u:A \vdash p : C \qquad \Gamma,w:B \vdash q: C}{\Gamma \vdash case\ M\ of\ (inl\ u \Rightarrow p\ |\ inr\ w \Rightarrow q): C}\]</span></p>
<hr />
<p><span class="math display">\[ \cfrac{A\lor B \qquad \cfrac{[A]^u}{\cfrac{...}{C}} \qquad \cfrac{[B]^w}{\cfrac{...}{C}} }{C}\]</span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE Rank2Types #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Void</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Bifunctor</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Functor.Identity</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Not</span> a <span class="ot">=</span> a <span class="ot">-&gt;</span> <span class="dt">Void</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Peirce</span> <span class="ot">=</span> <span class="kw">forall</span> a b<span class="op">.</span> ((a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">LEM</span> <span class="ot">=</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Either</span> (<span class="dt">Not</span> a) a</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="ot">callCC_lem ::</span> <span class="dt">Peirce</span> <span class="ot">-&gt;</span> <span class="dt">LEM</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>callCC_lem callCC <span class="ot">=</span> callCC <span class="op">$</span> \cc <span class="ot">-&gt;</span> <span class="dt">Left</span> (\a <span class="ot">-&gt;</span> cc (<span class="dt">Right</span> a))</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="ot">lem_callCC ::</span> <span class="dt">LEM</span> <span class="ot">-&gt;</span> <span class="dt">Peirce</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>lem_callCC lem <span class="ot">=</span> <span class="fu">either</span> (\n <span class="ot">-&gt;</span> \f <span class="ot">-&gt;</span> f (absurd <span class="op">.</span> n)) <span class="fu">const</span> lem</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="co">-- Bonus exercise: prove Peirce’s law &lt;=&gt; double negation elimination</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">DNE</span> <span class="ot">=</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Not</span> (<span class="dt">Not</span> a) <span class="ot">-&gt;</span> a</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="ot">lem_dne ::</span> <span class="dt">LEM</span> <span class="ot">-&gt;</span> <span class="dt">DNE</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>lem_dne lem <span class="ot">=</span> <span class="fu">either</span> (\f <span class="ot">-&gt;</span> \g <span class="ot">-&gt;</span> absurd (g f)) <span class="fu">const</span> lem</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="ot">dne_lem ::</span> <span class="dt">DNE</span> <span class="ot">-&gt;</span> <span class="dt">LEM</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>dne_lem dne <span class="ot">=</span> dne <span class="op">$</span> \n <span class="ot">-&gt;</span> n (<span class="dt">Right</span> <span class="op">.</span> dne <span class="op">$</span> \m <span class="ot">-&gt;</span> n (<span class="dt">Left</span> m))</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="ot">callCC_dne ::</span> <span class="dt">Peirce</span> <span class="ot">-&gt;</span> <span class="dt">DNE</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>callCC_dne callCC <span class="ot">=</span> \dn <span class="ot">-&gt;</span> callCC <span class="op">$</span> \cc <span class="ot">-&gt;</span> absurd (dn cc)</span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="ot">dne_callCC ::</span> <span class="dt">DNE</span> <span class="ot">-&gt;</span> <span class="dt">Peirce</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>dne_callCC dne f <span class="ot">=</span> dne <span class="op">$</span> \n <span class="ot">-&gt;</span> n (f <span class="op">.</span> dne <span class="op">$</span> \m <span class="ot">-&gt;</span> m (absurd <span class="op">.</span> n))</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="co">-- Self-inflicted exercise: prove dual Frobenius rule &lt;=&gt; everything else</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Voider</span> a <span class="ot">=</span> <span class="dt">Voider</span> {<span class="ot"> unVoider ::</span> <span class="dt">Void</span> }</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">DualFrobenius</span> <span class="ot">=</span> <span class="kw">forall</span> x p q<span class="op">.</span> (x <span class="ot">-&gt;</span> <span class="dt">Either</span> (p x) q) <span class="ot">-&gt;</span> <span class="dt">Either</span> (x <span class="ot">-&gt;</span> p x) q</span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a><span class="ot">lem_df ::</span> <span class="dt">LEM</span> <span class="ot">-&gt;</span> <span class="dt">DualFrobenius</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>lem_df lem f <span class="ot">=</span> bimap (\nq <span class="ot">-&gt;</span> <span class="fu">either</span> <span class="fu">id</span> (absurd <span class="op">.</span> nq) <span class="op">.</span> f) <span class="fu">id</span> lem</span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a><span class="ot">df_lem ::</span> <span class="dt">DualFrobenius</span> <span class="ot">-&gt;</span> <span class="dt">LEM</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>df_lem df <span class="ot">=</span> first (\f <span class="ot">-&gt;</span> unVoider <span class="op">.</span> f) (df <span class="dt">Right</span>)</span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a><span class="ot">callCC_df ::</span> <span class="dt">Peirce</span> <span class="ot">-&gt;</span> <span class="dt">DualFrobenius</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>callCC_df callCC f <span class="ot">=</span> callCC <span class="op">$</span> \cc <span class="ot">-&gt;</span> <span class="dt">Left</span> <span class="op">$</span> \x <span class="ot">-&gt;</span> <span class="fu">either</span> <span class="fu">id</span> (cc <span class="op">.</span> <span class="dt">Right</span>) (f x)</span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a><span class="ot">df_callCC ::</span> <span class="dt">DualFrobenius</span> <span class="ot">-&gt;</span> <span class="dt">Peirce</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>df_callCC df f <span class="ot">=</span> <span class="fu">either</span> (\g <span class="ot">-&gt;</span> f (absurd <span class="op">.</span> unVoider <span class="op">.</span> g)) <span class="fu">id</span> (df <span class="dt">Right</span>)</span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a><span class="ot">dne_df ::</span> <span class="dt">DNE</span> <span class="ot">-&gt;</span> <span class="dt">DualFrobenius</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>dne_df dne f <span class="ot">=</span> dne <span class="op">$</span> \n <span class="ot">-&gt;</span> n (<span class="dt">Left</span> <span class="op">$</span> \x <span class="ot">-&gt;</span> dne <span class="op">$</span> \m <span class="ot">-&gt;</span> <span class="fu">either</span> (m) (n <span class="op">.</span> <span class="dt">Right</span>) (f x))</span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a><span class="ot">df_dne ::</span> <span class="dt">DualFrobenius</span> <span class="ot">-&gt;</span> <span class="dt">DNE</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>df_dne df dn <span class="ot">=</span> <span class="fu">either</span> (\f <span class="ot">-&gt;</span> (absurd <span class="op">.</span> dn) (unVoider <span class="op">.</span> f)) <span class="fu">id</span> (df <span class="dt">Right</span>)</span></code></pre></div>
</section>
]]></description>
    <pubDate>Fri, 01 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2022-07-01-NatDed.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>

    </channel>
</rss>
