<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Jason Yang: Math and Computer Science Blog</title>
        <link>https://userjy.github.io</link>
        <description><![CDATA[Programming language theory, haskell, induction, combinatorics, Energy based models, time series analysis, differential equations, stochastic calculus, trading]]></description>
        <atom:link href="https://userjy.github.io/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 21 Sep 2021 00:00:00 UT</lastBuildDate>
        <item>
    <title>Panasonic SD-MDX102-K Breadmaker Translated</title>
    <link>https://userjy.github.io/posts/2021-09-21-Bread.html</link>
    <description><![CDATA[<div class="info">
    Posted on September 21, 2021
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;musings&#39;." href="/tags/musings.html">musings</a>
    
</div>
<p>RCCD = Raisins/Coarse-Mix/Crust/Delay</p>
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 20%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>Menu Num</th>
<th>Bread Type</th>
<th>RCCD</th>
<th>Time</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Pain de mie</td>
<td>YYYY</td>
<td>4hr50m</td>
<td>250g bread flour<br> 20g butter<br> 21.5g sugar<br> 15g salt<br> 190ml water<br> 1.4g yeast</td>
</tr>
<tr class="even">
<td>2</td>
<td>Plain Bread</td>
<td>YYYY</td>
<td>4hr</td>
<td>250g bread flour<br> 10g butter<br> 17g sugar(large 2)<br> 6g skim milk(large 1)<br> 5g salt (small 1)<br> 180ml water <br> 2.8g yeast (small 1)</td>
</tr>
<tr class="odd">
<td>3</td>
<td>Soft Bread</td>
<td>YYYY</td>
<td>4hr20m</td>
<td>250g bread flour<br> 15g butter<br> 17g sugar(large 2)<br> 6g skim milk(large 1)<br> 5g salt (small 1)<br> 180ml water <br> 2.8g yeast (small 1)</td>
</tr>
<tr class="even">
<td>4</td>
<td>Sandwich Bread</td>
<td>YNNY</td>
<td>3hr</td>
<td>250g bread flour<br> 10g butter<br> 17g sugar(large 2)<br> 6g skim milk(large 1)<br> 5g salt (small 1)<br> 170ml water <br> 2.8g yeast (small 1)</td>
</tr>
<tr class="odd">
<td>5</td>
<td>Fast-baked Bread</td>
<td>YYYN</td>
<td>1hr55m</td>
<td>280g bread flour<br> 10g butter<br> 17g sugar(large 2)<br> 6g skim milk(large 1)<br> 5g salt (small 1)<br> 200ml Cold water <br> 4.2g yeast (small 1+1/2)</td>
</tr>
<tr class="even">
<td>6</td>
<td>Sweet Bread</td>
<td>NNYN</td>
<td>2hr20m</td>
<td>285g bread flour<br> 15g butter<br> 21.5g sugar(large 2+1/2)<br> 10g Honey<br> 5g salt (small 1)<br> 140ml Cold water <br> 50ml cream <br> 3.5g yeast (small 1+1/4)</td>
</tr>
<tr class="odd">
<td>7</td>
<td>60 minute bread</td>
<td>NNNN</td>
<td>1hr</td>
<td>30 ml warm water + 4.2g yeast (small 1+1/2) <br>280g bread flour<br> 25g butter<br> 25.5g sugar(large 3)<br> 12g skim milk(large 2)<br>25g egg<br> 5g salt (small 1)<br> 140ml warm water</td>
</tr>
<tr class="even">
<td>8</td>
<td>Rice bread</td>
<td>YYYY</td>
<td>4hr</td>
<td>210g bread flour<br> 100~200g cooked rice<br> 10g butter <br> 17g sugar(large 2)<br> 6g skim milk(large 1)<br>5g salt (small 1)<br> 130ml water <br> 2.1g yeast (small 3/4)</td>
</tr>
<tr class="odd">
<td>9</td>
<td>Rice French bread</td>
<td>YYNY</td>
<td>4hr40m</td>
<td>210g bread flour<br> 80~130g rice<br> 6g sugar(small 2)<br> 5g salt (small 1)<br> 140ml Cold water <br> 2.1g yeast (small 3/4)</td>
</tr>
<tr class="even">
<td>10</td>
<td>French bread</td>
<td>YYNY</td>
<td>5hr</td>
<td>225g bread flour<br> 25g cake flour <br> 5g salt (small 1)<br> 190ml Cold water <br> 1.4g yeast (small 1/2)</td>
</tr>
<tr class="odd">
<td>11</td>
<td>Rye bread</td>
<td>YNNY</td>
<td>5hr</td>
<td>125g bread flour<br> 125g rye flour <br> 5g butter<br> 17g sugar(large 2)<br>5g salt(small 1)<br> 85g sugarless plain yogert<br> 80ml Cold water <br> 1.4g yeast (small 1/2)</td>
</tr>
<tr class="even">
<td>12</td>
<td>whole grain bread</td>
<td>YYNY</td>
<td>5hr</td>
<td>125g whole grain flour<br> 125g bread flour <br> 10g butter<br> 17g sugar(large 2)<br> 16g skim milk(large 1)<br>5g salt(small 1)<br> 200ml Cold water <br> 2.8g yeast (small 1)</td>
</tr>
<tr class="odd">
<td>13</td>
<td>Brioche</td>
<td>YYYN</td>
<td>3hr15m</td>
<td>170g bread flour <br> 30g cake flour <br> 30g butter<br> 25.5g sugar(large 3)<br> 6g skim milk(large 1)<br>3.8g salt(small 3/4)<br>140g 1 egg+yolk+coldwater <br> 2.1g yeast (small 3/4)<br> + There will be a pause beep =&gt; add 40g diced unsalted butter then hit start<br></td>
</tr>
<tr class="even">
<td>14</td>
<td>Marble bread</td>
<td>NNNN</td>
<td>4hr</td>
<td>250g bread flour <br> 10g butter<br> 21.5g sugar(large 2+1/2)<br> 6g skim milk(large 1)<br>5g salt(small 1)<br>180g water <br> 2.8g yeast (small 1)<br> + There will be a pause beep =&gt; add 3g instant coffee then hit start<br></td>
</tr>
<tr class="odd">
<td>15</td>
<td>Melon bread</td>
<td>YNNN</td>
<td>2hr15m</td>
<td>150g bread flour <br> 15g butter<br> 17g sugar(large 2)<br> 6g skim milk(large 1)<br>2.5g salt(small 1/2)<br>90g cold water <br> 2.1g yeast (small 3/4)<br> + There will be a pause beep =&gt; takeout bread, place Cookie dough skin,put back bread inside skin<br></td>
</tr>
<tr class="even">
<td>15cont</td>
<td>Melon bread(Cookie Dough Skin)</td>
<td>—</td>
<td>Manual</td>
<td>50g butter <br> 40g sugar <br> 25g egg <br> 100g cake flour <br> 3g baking powder <br> teaspoon vanilla Extract <br> mix ingredients, sit for 20 min<br> stretch to flat skin</td>
</tr>
<tr class="odd">
<td>16</td>
<td>White style bread</td>
<td>NNNY</td>
<td>3hr50m</td>
<td>180g bread flour <br> 15g butter<br> 3g sugar(small 1)<br> 6g skim milk(large 1)<br>2.5g salt(small 1/2)<br>130g water <br> 20g syrup <br> 2.1g yeast (small 3/4)</td>
</tr>
<tr class="even">
<td>17</td>
<td>Half bread</td>
<td>NNNY</td>
<td>3hr35m</td>
<td>180g bread flour <br> 10g butter<br> 12.5g sugar(large 1+1/2)<br> 6g skim milk(large 1)<br>2.5g salt(small 1/2)<br>130g water <br> 2.1g yeast (small 3/4)</td>
</tr>
<tr class="odd">
<td>18</td>
<td>Rice flour bread</td>
<td>YNYY</td>
<td>2hr30m</td>
<td>250g rice flour <br> 20g butter<br> 17g sugar(large 2)<br> 6g skim milk(large 1)<br>5g salt(small 1)<br>190g water <br> 4.2g yeast (small 1+1/2)</td>
</tr>
<tr class="even">
<td>19</td>
<td>Rice flour bread w/o wheat</td>
<td>YNNY</td>
<td>1hr15m</td>
<td>270g Mochi flour and starch syrup <br> 300g rice flour <br> 18g olive oil(2 teaspoon)<br> 8.5g sugar(large 1)<br> 6g skim milk(large 1)<br>5g salt(small 1) <br> 4.2g yeast (small 1+1/2)</td>
</tr>
<tr class="odd">
<td>19cont</td>
<td>Mochi flour and starch syrup</td>
<td>—-</td>
<td>—-</td>
<td>1/2 teaspoon Mochi flour <br> 45g syrup <br> 220mL water<br> dissolve mochi flour in 1 teaspoon water, put in microwave for 30-40s, stir 1 min, add 45g starch syrup, add 220mL water</td>
</tr>
<tr class="even">
<td>20</td>
<td>Dry natural yeast bread</td>
<td>YYYY</td>
<td>4hr10m</td>
<td>250g bread flour <br> 5g butter<br> 17g sugar(large 2)<br>5g salt(small 1)<br>190g water <br> 5g yeast (small 1+1/2)</td>
</tr>
<tr class="odd">
<td>21</td>
<td>Dry natural yeast bread(Ingredient)</td>
<td>NNNN</td>
<td>24m</td>
<td>30g yeast leavener(large 3) <br> 60mL warm water</td>
</tr>
<tr class="even">
<td>22</td>
<td>Dry natural yeast bread</td>
<td>YYYY</td>
<td>7m</td>
<td>25g Dry natural yeast bread(Ingredient)(large 2) <br> 300g bread flour <br> 17g sugar(large 2) <br> 5g salt(small 1)<br>180ml water</td>
</tr>
<tr class="odd">
<td>23</td>
<td>Quick bread</td>
<td>NNYN</td>
<td>54m</td>
<td>80g 1egg+milk mixture <br> 50g unsweet yogurt <br> 120g cake flour <br> 60 bread flour<br> 5g baking powder <br> 35g diced butter<br>25.5g sugar(large 3) <br> 2.5g salt(small 1/2) <br> AutoPause to shape bread</td>
</tr>
<tr class="even">
<td>24</td>
<td>Soycorn bread</td>
<td>NNYN</td>
<td>58m</td>
<td></td>
</tr>
<tr class="odd">
<td>25</td>
<td>rice flour cake</td>
<td>NNNN</td>
<td>1hr40m</td>
<td>100g vegetable oil <br> 100g or 2eggs<br> 80g milk <br> 120g sugar <br> 140g rice flour <br> 50g almond powder<br> 5g baking powder <br> 15g black tea or 4g earl tea <br> beeps =&gt; push back powder continue</td>
</tr>
<tr class="even">
<td>26</td>
<td>butter cake</td>
<td>NNYN</td>
<td>1hr30m</td>
<td>110g unsalted butter<br> 100g sugar<br> 15g milk(1 tablespoon)<br> 100g or 2eggs<br> 180g cake flour<br> 7g baking powder <br> 15g cocoa or 50g chocolate chip or 4g blacktea or 40g walnut <br> beeps =&gt; push back powder continue</td>
</tr>
<tr class="odd">
<td>27</td>
<td>Veggie bread</td>
<td>NNNN</td>
<td>55m</td>
<td></td>
</tr>
<tr class="even">
<td>28</td>
<td>milk choco Brownie</td>
<td>NNNN</td>
<td>17m</td>
<td>165~174g chocolate(3 bars)<br> 70mL Cream(35% fat)<br>10g honey</td>
</tr>
<tr class="odd">
<td>28</td>
<td>white choco Brownie</td>
<td>NNNN</td>
<td>17m</td>
<td>165~174g chocolate(3 bars)<br> 60mL Cream(35% fat)<br>10g honey</td>
</tr>
<tr class="even">
<td>28</td>
<td>dark choco Brownie</td>
<td>NNNN</td>
<td>17m</td>
<td>165~174g chocolate(3 bars)<br> 90mL Cream(35% fat)<br>10g honey</td>
</tr>
<tr class="odd">
<td>29</td>
<td>condensed milk</td>
<td>NNNN</td>
<td>1~2hr10m</td>
<td>80g sugar<br> 200mL Cream(35% fat)<br>60mL milk</td>
</tr>
<tr class="even">
<td>30</td>
<td>strawberry jam</td>
<td>NNNN</td>
<td>1~2hr30m</td>
<td>400g strawberry<br> 140g sugar<br>38g lemon juice(2+1/2 tablespoon)</td>
</tr>
<tr class="odd">
<td>31</td>
<td>apple compote</td>
<td>NNNN</td>
<td>1~2hr</td>
<td>200g or cut 1 apple into 4<br> 250mL water <br> 60g sugar<br>10g lemon juice(2 teaspoon)</td>
</tr>
<tr class="even">
<td>32</td>
<td>Veggie bread</td>
<td>NNNN</td>
<td>6~10m</td>
<td></td>
</tr>
<tr class="odd">
<td>33</td>
<td>Read bean</td>
<td>NNNN</td>
<td>1hr</td>
<td>1hr boiled 150g azuki beans<br> 450-600ml water<br> 200g sugar</td>
</tr>
<tr class="even">
<td>34</td>
<td>Rice cake</td>
<td>NNNN</td>
<td>1hr</td>
<td>1hr boiled 150g azuki beans<br> 450-600ml water<br> 200g sugar</td>
</tr>
</tbody>
</table>
]]></description>
    <pubDate>Tue, 21 Sep 2021 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2021-09-21-Bread.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>HTTP requests - Design proper headers in python</title>
    <link>https://userjy.github.io/posts/2021-08-25-RequestHeader.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 25, 2021
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;mathcs&#39;." href="/tags/mathcs.html">mathcs</a>, <a title="All pages tagged &#39;musings&#39;." href="/tags/musings.html">musings</a>, <a title="All pages tagged &#39;python&#39;." href="/tags/python.html">python</a>
    
</div>
<p>In python, headers are key-value pairs in dicts.</p>
<p>Some api’s require that headers must satisfy certain requirements: * “User-Agent”: “Mozilla/5.0 (Windows NT 10.0)” * messing with User-Agent; even using a valid one like “Mozilla/5.0 (X11; U; Linux i686)” can make your request hang or timeout. * “sec-fetch-mode”: “cors”</p>
<p>adding “accept-encoding”: “gzip, deflate, br”, will print out hex so leave it out of your header if you can</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="im">import</span> urllib.request</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>url <span class="op">=</span> <span class="st">&quot;https://api.example.com/api/endpoint&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>GOODheader <span class="op">=</span> {</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="st">&quot;Content-Type&quot;</span>: <span class="st">&quot;application/json&quot;</span>,</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="st">&#39;Accept&#39;</span>: <span class="st">&#39;application/json, text/plain, */*&#39;</span>,</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>                 <span class="st">&#39;DNT&#39;</span>: <span class="st">&quot;1&quot;</span>,</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>                 <span class="st">&#39;Origin&#39;</span>: <span class="st">&#39;https://www.example.com/&#39;</span>,</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>                 <span class="st">&#39;Sec-Fetch-Mode&#39;</span>: <span class="st">&#39;cors&#39;</span>,</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>                 <span class="st">&#39;User-Agent&#39;</span>: <span class="st">&#39;Mozilla/5.0 (Windows NT 10.0)&#39;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>    }</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>req <span class="op">=</span> urllib.request.Request(url,headers<span class="op">=</span>GOODheader,method<span class="op">=</span><span class="st">&quot;GET&quot;</span>)</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>page <span class="op">=</span> urllib.request.urlopen(req,timeout<span class="op">=</span><span class="dv">5</span>)</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a><span class="bu">print</span>(page.read(<span class="dv">300</span>))</span></code></pre></div>
<p>Here is another sample request header</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>SAMPLEheaderWithEncoding <span class="op">=</span> {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="st">&quot;Accept&quot;</span>: <span class="st">&quot;text/html,application/xhtml+xml, text/plain,application/xml;q=0.9,*/*;q=0.8&quot;</span>,</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="st">&quot;scheme&quot;</span>:<span class="st">&quot;https&quot;</span>,</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="st">&quot;Referrer Policy&quot;</span>: <span class="st">&quot;strict-origin-when-cross-origin&quot;</span>,</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="st">&quot;accept&quot;</span>: <span class="st">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="st">&quot;accept-encoding&quot;</span>: <span class="st">&quot;gzip, deflate, br&quot;</span>,</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="st">&quot;accept-language&quot;</span>: <span class="st">&quot;en-US,en;q=0.9&quot;</span>,</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="st">&quot;cache-control&quot;</span>: <span class="st">&quot;max-age=0&quot;</span>,</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="st">&quot;DNT&quot;</span>: <span class="st">&quot;1&quot;</span>,</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a><span class="st">&quot;sec-ch-ua&quot;</span>: <span class="st">&quot;&#39; Not A;Brand&#39;;v=&#39;99&#39;, &#39;Chromium&#39;;v=&#39;92&#39;&quot;</span>,</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a><span class="st">&quot;sec-ch-ua-mobile&quot;</span>: <span class="st">&quot;?0&quot;</span>,</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a><span class="st">&quot;sec-fetch-dest&quot;</span>: <span class="st">&quot;document&quot;</span>,</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a><span class="st">&quot;sec-fetch-mode&quot;</span>: <span class="st">&quot;cors&quot;</span>,</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a><span class="st">&quot;sec-fetch-site&quot;</span>: <span class="st">&quot;none&quot;</span>,</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a><span class="st">&quot;sec-fetch-user&quot;</span>: <span class="st">&quot;?1&quot;</span>,</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a><span class="st">&quot;upgrade-insecure-requests&quot;</span>: <span class="st">&quot;1&quot;</span>,</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a><span class="st">&quot;Content-Type&quot;</span>: <span class="st">&quot;application/json&quot;</span>,</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a><span class="st">&#39;Origin&#39;</span>: <span class="st">&#39;https://www.example.com/&#39;</span>,</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a><span class="st">&quot;user-agent&quot;</span>: <span class="st">&quot;Mozilla/5.0 (Windows NT 10.0)&quot;</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a>            }</span></code></pre></div>
]]></description>
    <pubDate>Wed, 25 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2021-08-25-RequestHeader.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>PlantUML diagram list</title>
    <link>https://userjy.github.io/posts/2021-08-25-PlantUMLkey.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 25, 2021
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;musings&#39;." href="/tags/musings.html">musings</a>, <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>
    
</div>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h6469677261706820677b0a202020206772617068205b0a72616e6b646972203d20224c52220a5d3b0a226e6f64653122205b0a6c6162656c203d20223c66303e20537472696e677c203c66313e204c697374207c203c66323e205365747c203c66333e20536f7274656420536574207c203c66343e2048617368220a7368617065203d20227265636f7264220a5d3b0a0a7d'></figure>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">digraph</span> g{</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="ex">graph</span> [</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="ex">rankdir</span> = <span class="st">&quot;LR&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>];</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="st">&quot;node1&quot;</span><span class="bu"> [</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>label <span class="ot">=</span> <span class="st">&quot;&lt;f0&gt; String| &lt;f1&gt; List | &lt;f2&gt; Set| &lt;f3&gt; Sorted Set | &lt;f4&gt; Hash&quot;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>shape <span class="ot">=</span> <span class="st">&quot;record&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="bu">]</span>;</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>}</span></code></pre></div>
<p>State Diagram only have 1 type of arrow. Activity Diagram has less control than state diagram.</p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a6162737472616374202020202020202061627374726163740a616273747261637420636c617373202022616273747261637420636c617373220a616e6e6f746174696f6e202020202020616e6e6f746174696f6e0a28292020202020202020202020202020636972636c650a636c6173732020202020202020202020636c6173730a3c3e20202020202020202020202020206469616d6f6e640a656e7469747920202020202020202020656e746974790a656e756d202020202020202020202020656e756d0a696e7465726661636520202020202020696e746572666163650a40656e64756d6c'></figure>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a0a7469746c652053696d706c65204f626a656374204469616772616d0a696e74657266616365206d616d6d616c207b0a20202d566f6964204272656174680a7d0a636c61737320506572736f6e207b0a20202e2e6c6966657374796c652e2e0a20202b496e74204167650a20202b766f69642054616c6b0a20202e2e766974616c732e2e0a20202b496e7420426c6f6f6470726573737572650a7d0a6d616d6d616c202d2d6f20506572736f6e0a40656e64756d6c'></figure>
<hr />
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a0a31202d2d2032203a20736f6c69640a31202e2e2033203a206461736865640a31202d5b68696464656e5d2d2034203a2068696464656e0a31207e7e2035203a20646f747465640a31203d3d2036203a20626f6c640a0a37202d2d20380a40656e64756d6c'></figure>
<hr />
<h3 id="sequence-diagram">Sequence diagram</h3>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a7061727469636970616e7420557365720a0a55736572202d3e20413a20446f576f726b0a616374697661746520410a0a41202d3e20413a202043616c6c2053656c660a0a41202d3e20423a203c3c2063726561746552657175657374203e3e0a616374697661746520420a0a42202d3e20433a20446f576f726b0a616374697661746520430a43202d2d3e20423a20576f726b446f6e650a64657374726f7920430a0a42202d2d3e20413a2052657175657374437265617465640a6465616374697661746520420a0a41202d3e20557365723a20446f6e650a6465616374697661746520410a0a40656e64756d6c'></figure>
<ul>
<li>Step into function call
<ul>
<li><code class="code">-&gt;</code></li>
</ul></li>
<li>Step out/return from call
<ul>
<li><code class="code">--&gt;</code></li>
</ul></li>
</ul>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a0a42202d3e20423a0a616374697661746520420a42202d3e20423a0a616374697661746520420a42202d3e20423a0a616374697661746520420a42202d2d3e20423a0a6465616374697661746520420a42202d2d3e20423a0a6465616374697661746520420a42202d2d3e20423a0a6465616374697661746520420a40656e64756d6c'></figure>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ex">@startuml</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="ex">B</span> -<span class="op">&gt;</span> B:</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="ex">activate</span> B</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="ex">B</span> -<span class="op">&gt;</span> B:</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="ex">activate</span> B</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="ex">B</span> -<span class="op">&gt;</span> B:</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="ex">activate</span> B</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="ex">B</span> --<span class="op">&gt;</span> B:</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="ex">deactivate</span> B</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="ex">B</span> --<span class="op">&gt;</span> B:</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a><span class="ex">deactivate</span> B</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a><span class="ex">B</span> --<span class="op">&gt;</span> B:</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a><span class="ex">deactivate</span> B</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a><span class="ex">@enduml</span></span></code></pre></div>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a6175746f6163746976617465206f6e0a42202d3e20423a0a0a0a42202d3e20423a0a42202d3e20423a0a0a72657475726e0a72657475726e0a72657475726e0a0a40656e64756d6c'></figure>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ex">@startuml</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="ex">autoactivate</span> on</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="ex">B</span> -<span class="op">&gt;</span> B:</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="ex">B</span> -<span class="op">&gt;</span> B:</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="ex">B</span> -<span class="op">&gt;</span> B:</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="bu">return</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="bu">return</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a><span class="bu">return</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a><span class="ex">@enduml</span></span></code></pre></div>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a416c696365202d3e20426f623a2041757468656e7469636174696f6e20526571756573740a616c74207375636365737366756c20636173650a426f62202d3e20416c6963653a2041757468656e7469636174696f6e2041636365707465640a656c736520736f6d65206b696e64206f66206661696c7572650a426f62202d3e20416c6963653a2041757468656e7469636174696f6e204661696c7572650a67726f7570204d79206f776e206c6162656c0a416c696365202d3e204c6f67203a204c6f672061747461636b2073746172740a6c6f6f7020313030302074696d65730a416c696365202d3e20426f623a20444e532041747461636b0a656e640a416c696365202d3e204c6f67203a204c6f672061747461636b20656e640a656e640a656c736520416e6f746865722074797065206f66206661696c7572650a426f62202d3e20416c6963653a20506c65617365207265706561740a656e640a40656e64756d6c'></figure>
<hr />
<h3 id="graphviz">graphviz</h3>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a6469677261706820776f726c64207b0a73697a653d22372c37223b0a097b72616e6b3d73616d653b203120323b7d0a097b72616e6b3d73616d653b203320343b7d0a097b72616e6b3d73616d653b203520363b7d0a097b72616e6b3d73616d653b203720383b7d0a31202d3e207b20322033207d205b636f6c6f723d626c75655d0a32202d3e207b2034207d205b636f6c6f723d726564206469723d626f74685d0a34202d3e207b203520367d205b636f6c6f723d677265656e206469723d6e6f6e6520636f6d6d656e743d68656c6c6f5d0a35202d3e207b20367d205b636f6c6f723d677265656e206c6162656c3d2268656c6c6f22207374796c653d646f747465645d0a7d0a40656e64756d6c'></figure>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ex">@startuml</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="ex">digraph</span> world {</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="va">size=</span><span class="st">&quot;7,7&quot;</span>;</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>	{<span class="va">rank=</span>same; <span class="ex">1</span> 2<span class="kw">;</span>}</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>	{<span class="va">rank=</span>same; <span class="ex">3</span> 4<span class="kw">;</span>}</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>	{<span class="va">rank=</span>same; <span class="ex">5</span> 6<span class="kw">;</span>}</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>	{<span class="va">rank=</span>same; <span class="ex">7</span> 8<span class="kw">;</span>}</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a><span class="ex">1</span> -<span class="op">&gt;</span> 2 </span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a><span class="ex">2</span> -<span class="op">&gt;</span> 3 [color=blue]</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>}</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a><span class="ex">@enduml</span></span></code></pre></div>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a6469677261706820776f726c64207b0a0a6e6f6465205b73686170653d7265636f72645d3b0a73747275637431205b6c6162656c3d223c66303e206c6566747c3c66313e206d6964646c657c3c66323e207269676874225d3b0a73747275637432205b6c6162656c3d223c66303e206f6e657c203c66313e2074776f225d3b0a0a737472756374313a6630202d3e20737472756374323a66313b0a7d0a0a40656e64756d6c'></figure>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ex">@startuml</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ex">digraph</span> world {</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="ex">node</span> [shape=record]<span class="kw">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="ex">struct1</span> [label=<span class="st">&quot;&lt;f0&gt; left|&lt;f1&gt; middle|&lt;f2&gt; right&quot;</span>]<span class="kw">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="ex">struct2</span> [label=<span class="st">&quot;&lt;f0&gt; one| &lt;f1&gt; two&quot;</span>]<span class="kw">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a><span class="ex">struct1</span>:f0 -<span class="op">&gt;</span> struct2:f1<span class="kw">;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>}</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a><span class="ex">@enduml</span></span></code></pre></div>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a6469677261706820776f726c64207b0a72616e6b6469723d4c520a6e6f646533205b73686170653d4d7265636f72642c206c6162656c3d227b2061207c2062207c2063207d225d0a7d0a40656e64756d6c'></figure>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ex">@startuml</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ex">digraph</span> world {</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="va">rankdir=</span>LR</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="ex">node3</span> [shape=Mrecord, label=<span class="st">&quot;{ a | b | c }&quot;</span>]</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>}</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="ex">@enduml</span></span></code></pre></div>
<p>rankdir will turn the whole tree left, to right as well as “a b c”</p>
<hr />
<h3 id="mindmap">Mindmap</h3>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h4073746172746d696e646d61700a0a2a20536f6c76696e67205c6e20476c6f62616c205c6e205761726d696e670a202a20456174696e6720646966666572656e746c790a20202a20566567616e0a20202a205665676574617269616e0a20202a204c6573732070726f63657373656420666f6f64730a20202a20427579206c6f63616c20666f6f640a202a2054726176656c0a20202a2042696b65206d6f72650a20202a20526964652062757365730a20202a2042757920616e20656c656374726963206361720a0a6c65667420736964650a202a20486f6d65200a20202a5f20456e657267792061756469740a20202a5f20557365206120636c6f746873206c696e650a20202a5f2041646420696e73756c6174696f6e0a20202a5f2047657420736f6c61722070616e656c730a202a204265206120726f6c65206d6f64656c0a20202a5f20566f74650a20202a5f20456e636f7572616765206f74686572730a20202a5f20546561636820796f7572206b6964730a0a40656e646d696e646d6170'></figure>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ex">@startmindmap</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="ex">*</span> Solving \n Global \n Warming</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a> <span class="ex">*</span> Eating differently</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>  <span class="ex">*</span> Vegan</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>  <span class="ex">*</span> Vegetarian</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>  <span class="ex">*</span> Less processed foods</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>  <span class="ex">*</span> Buy local food</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a> <span class="ex">*</span> Travel</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>  <span class="ex">*</span> Bike more</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>  <span class="ex">*</span> Ride buses</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>  <span class="ex">*</span> Buy an electric car</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a><span class="ex">left</span> side</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a> <span class="ex">*</span> Home</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a>  <span class="ex">*_</span> Energy audit</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a>  <span class="ex">*_</span> Use a cloths line</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true"></a>  <span class="ex">*_</span> Add insulation</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true"></a>  <span class="ex">*_</span> Get solar panels</span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true"></a> <span class="ex">*</span> Be a role model</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true"></a>  <span class="ex">*_</span> Vote</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true"></a>  <span class="ex">*_</span> Encourage others</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true"></a>  <span class="ex">*_</span> Teach your kids</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true"></a></span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true"></a><span class="ex">@endmindmap</span></span></code></pre></div>
<hr />
<h3 id="activity-diagram">Activity diagram</h3>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a73746172740a69662028636f6e646974696f6e204129207468656e2028796573290a20203a5465787420313b0a656c736569662028636f6e646974696f6e204229207468656e2028796573290a20203a5465787420323b0a202073746f700a656c736569662028636f6e646974696f6e204329207468656e2028796573290a20203a5465787420333b0a656c736569662028636f6e646974696f6e204429207468656e2028796573290a20203a5465787420343b0a656c736520286e6f7468696e67290a20203a5465787420656c73653b0a656e6469660a73746f700a40656e64756d6c'></figure>
<hr />
<h3 id="arrow-list">Arrow list</h3>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a6c65667420746f20726967687420646972656374696f6e0a736b696e706172616d206e6f646573657020350a6433207e7e207633203a2022227e7e22225c6e2f2f646f747465642f2f0a6432202e2e207632203a2022222e2e22225c6e2f2f6461736865642f2f0a6431203d3d207631203a2022223d3d22225c6e2f2f626f6c642f2f0a6430202d2d207630203a2022222d2d22225c6e2f2f706c61696e2f2f0a0a0a663133202d2d3020623133203a2022222d2d3022220a663132202d2d4020623132203a2022222d2d4022220a663131202d2d3a7c3e20623131203a2022222d2d3a7c3e22220a663130202d2d7c7c3e20623130203a2022222d2d7c7c3e22220a6639202d2d7c3e206239203a2022222d2d7c3e22220a6638202d2d5e206238203a2022222d2d5e2022220a6637202d2d5c5c206237203a2022222d2d5c5c5c5c22220a6636202d2d23206236203a2022222d2d232022220a6635202d2d2b206235203a2022222d2d2b2022220a6634202d2d6f206234203a2022222d2d6f2022220a6633202d2d2a206233203a2022222d2d2a2022220a6632202d2d3e3e206232203a2022222d2d3e3e22220a6631202d2d3e206231203a2022222d2d3e2022220a6630202d2d206230203a2022222d2d2022220a0a0a67313020302d2d3020723130203a20222220302d2d302022220a673920292d2d28207239203a20222220292d2d2822220a67382030292d2d2830207238203a2022222030292d2d283022220a67372030292d2d207237203a2022222030292d2d2022220a6736202d30292d207236203a202222202d30292d5c6e2022220a6735202d2830292d207235203a202222202d2830292d5c6e22220a6734202d28302d207234203a202222202d28302d5c6e2022220a6733202d2d2830207233203a202222202d2d28302022220a6732202d2d28207232203a202222202d2d282022220a6731202d2d30207231203a202222202d2d302022220a0a0a40656e64756d6c0a'></figure>
]]></description>
    <pubDate>Wed, 25 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2021-08-25-PlantUMLkey.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Alexa</title>
    <link>https://userjy.github.io/posts/2021-08-25-Alexa.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 25, 2021
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;musings&#39;." href="/tags/musings.html">musings</a>
    
</div>
<h3 id="alexa-example-action">Alexa example action</h3>
<p>“alexa ask bleh bot hello”</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="fu">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>	<span class="dt">&quot;version&quot;</span><span class="fu">:</span> <span class="st">&quot;1.0&quot;</span><span class="fu">,</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>	<span class="dt">&quot;session&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>		<span class="dt">&quot;new&quot;</span><span class="fu">:</span> <span class="kw">true</span><span class="fu">,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>		<span class="dt">&quot;sessionId&quot;</span><span class="fu">:</span> <span class="st">&quot;amzn1.echo-api.session.AAAAAAAAAAAAAAAAAAAAAAA&quot;</span><span class="fu">,</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>		<span class="dt">&quot;application&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>			<span class="dt">&quot;applicationId&quot;</span><span class="fu">:</span> <span class="st">&quot;amzn1.ask.skill.17d3bbb3-90c7-4c1e-b901-fc82f111ff3d&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>		<span class="fu">},</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>		<span class="dt">&quot;attributes&quot;</span><span class="fu">:</span> <span class="fu">{},</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>		<span class="dt">&quot;user&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>			<span class="dt">&quot;userId&quot;</span><span class="fu">:</span> <span class="st">&quot;amzn1.ask.account.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>		<span class="fu">}</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>	<span class="fu">},</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>	<span class="dt">&quot;context&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>		<span class="dt">&quot;Viewports&quot;</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>			<span class="fu">{</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>				<span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;APL&quot;</span><span class="fu">,</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>				<span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;main&quot;</span><span class="fu">,</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a>				<span class="dt">&quot;shape&quot;</span><span class="fu">:</span> <span class="st">&quot;RECTANGLE&quot;</span><span class="fu">,</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true"></a>				<span class="dt">&quot;dpi&quot;</span><span class="fu">:</span> <span class="dv">213</span><span class="fu">,</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true"></a>				<span class="dt">&quot;presentationType&quot;</span><span class="fu">:</span> <span class="st">&quot;STANDARD&quot;</span><span class="fu">,</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true"></a>				<span class="dt">&quot;canRotate&quot;</span><span class="fu">:</span> <span class="kw">false</span><span class="fu">,</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true"></a>				<span class="dt">&quot;configuration&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true"></a>					<span class="dt">&quot;current&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true"></a>						<span class="dt">&quot;mode&quot;</span><span class="fu">:</span> <span class="st">&quot;HUB&quot;</span><span class="fu">,</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true"></a>						<span class="dt">&quot;video&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true"></a>							<span class="dt">&quot;codecs&quot;</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true"></a>								<span class="st">&quot;H_264_42&quot;</span><span class="ot">,</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true"></a>								<span class="st">&quot;H_264_41&quot;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true"></a>							<span class="ot">]</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true"></a>						<span class="fu">},</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true"></a>						<span class="dt">&quot;size&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true"></a>							<span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;DISCRETE&quot;</span><span class="fu">,</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true"></a>							<span class="dt">&quot;pixelWidth&quot;</span><span class="fu">:</span> <span class="dv">1280</span><span class="fu">,</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true"></a>							<span class="dt">&quot;pixelHeight&quot;</span><span class="fu">:</span> <span class="dv">800</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true"></a>						<span class="fu">}</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true"></a>					<span class="fu">}</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true"></a>				<span class="fu">}</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true"></a>			<span class="fu">}</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true"></a>		<span class="ot">]</span><span class="fu">,</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true"></a>		<span class="dt">&quot;Viewport&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true"></a>			<span class="dt">&quot;experiences&quot;</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true"></a>				<span class="fu">{</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true"></a>					<span class="dt">&quot;arcMinuteWidth&quot;</span><span class="fu">:</span> <span class="dv">346</span><span class="fu">,</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true"></a>					<span class="dt">&quot;arcMinuteHeight&quot;</span><span class="fu">:</span> <span class="dv">216</span><span class="fu">,</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true"></a>					<span class="dt">&quot;canRotate&quot;</span><span class="fu">:</span> <span class="kw">false</span><span class="fu">,</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true"></a>					<span class="dt">&quot;canResize&quot;</span><span class="fu">:</span> <span class="kw">false</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true"></a>				<span class="fu">}</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true"></a>			<span class="ot">]</span><span class="fu">,</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true"></a>			<span class="dt">&quot;mode&quot;</span><span class="fu">:</span> <span class="st">&quot;HUB&quot;</span><span class="fu">,</span></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true"></a>			<span class="dt">&quot;shape&quot;</span><span class="fu">:</span> <span class="st">&quot;RECTANGLE&quot;</span><span class="fu">,</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true"></a>			<span class="dt">&quot;pixelWidth&quot;</span><span class="fu">:</span> <span class="dv">1280</span><span class="fu">,</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true"></a>			<span class="dt">&quot;pixelHeight&quot;</span><span class="fu">:</span> <span class="dv">800</span><span class="fu">,</span></span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true"></a>			<span class="dt">&quot;dpi&quot;</span><span class="fu">:</span> <span class="dv">213</span><span class="fu">,</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true"></a>			<span class="dt">&quot;currentPixelWidth&quot;</span><span class="fu">:</span> <span class="dv">1280</span><span class="fu">,</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true"></a>			<span class="dt">&quot;currentPixelHeight&quot;</span><span class="fu">:</span> <span class="dv">800</span><span class="fu">,</span></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true"></a>			<span class="dt">&quot;touch&quot;</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true"></a>				<span class="st">&quot;SINGLE&quot;</span></span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true"></a>			<span class="ot">]</span><span class="fu">,</span></span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true"></a>			<span class="dt">&quot;video&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true"></a>				<span class="dt">&quot;codecs&quot;</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true"></a>					<span class="st">&quot;H_264_42&quot;</span><span class="ot">,</span></span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true"></a>					<span class="st">&quot;H_264_41&quot;</span></span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true"></a>				<span class="ot">]</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true"></a>			<span class="fu">}</span></span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true"></a>		<span class="fu">},</span></span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true"></a>		<span class="dt">&quot;Extensions&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true"></a>			<span class="dt">&quot;available&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true"></a>				<span class="dt">&quot;aplext:backstack:10&quot;</span><span class="fu">:</span> <span class="fu">{}</span></span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true"></a>			<span class="fu">}</span></span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true"></a>		<span class="fu">},</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true"></a>		<span class="dt">&quot;System&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true"></a>			<span class="dt">&quot;application&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true"></a>				<span class="dt">&quot;applicationId&quot;</span><span class="fu">:</span> <span class="st">&quot;amzn1.ask.skill.17d3bbb3-90c7-4c1e-b901-fc82f111ff3d&quot;</span></span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true"></a>			<span class="fu">},</span></span>
<span id="cb1-76"><a href="#cb1-76" aria-hidden="true"></a>			<span class="dt">&quot;user&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-77"><a href="#cb1-77" aria-hidden="true"></a>				<span class="dt">&quot;userId&quot;</span><span class="fu">:</span> <span class="st">&quot;amzn1.ask.account.AAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span></span>
<span id="cb1-78"><a href="#cb1-78" aria-hidden="true"></a>			<span class="fu">},</span></span>
<span id="cb1-79"><a href="#cb1-79" aria-hidden="true"></a>			<span class="dt">&quot;device&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-80"><a href="#cb1-80" aria-hidden="true"></a>				<span class="dt">&quot;deviceId&quot;</span><span class="fu">:</span> <span class="st">&quot;amzn1.ask.device.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><span class="fu">,</span></span>
<span id="cb1-81"><a href="#cb1-81" aria-hidden="true"></a>				<span class="dt">&quot;supportedInterfaces&quot;</span><span class="fu">:</span> <span class="fu">{}</span></span>
<span id="cb1-82"><a href="#cb1-82" aria-hidden="true"></a>			<span class="fu">},</span></span>
<span id="cb1-83"><a href="#cb1-83" aria-hidden="true"></a>			<span class="dt">&quot;apiEndpoint&quot;</span><span class="fu">:</span> <span class="st">&quot;https://api.amazonalexa.com&quot;</span><span class="fu">,</span></span>
<span id="cb1-84"><a href="#cb1-84" aria-hidden="true"></a>			<span class="dt">&quot;apiAccessToken&quot;</span><span class="fu">:</span> <span class="st">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span></span>
<span id="cb1-85"><a href="#cb1-85" aria-hidden="true"></a>		<span class="fu">}</span></span>
<span id="cb1-86"><a href="#cb1-86" aria-hidden="true"></a>	<span class="fu">},</span></span>
<span id="cb1-87"><a href="#cb1-87" aria-hidden="true"></a>	<span class="dt">&quot;request&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-88"><a href="#cb1-88" aria-hidden="true"></a>		<span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;IntentRequest&quot;</span><span class="fu">,</span></span>
<span id="cb1-89"><a href="#cb1-89" aria-hidden="true"></a>		<span class="dt">&quot;requestId&quot;</span><span class="fu">:</span> <span class="st">&quot;amzn1.echo-api.request.9999-9999-9999&quot;</span><span class="fu">,</span></span>
<span id="cb1-90"><a href="#cb1-90" aria-hidden="true"></a>		<span class="dt">&quot;locale&quot;</span><span class="fu">:</span> <span class="st">&quot;en-US&quot;</span><span class="fu">,</span></span>
<span id="cb1-91"><a href="#cb1-91" aria-hidden="true"></a>		<span class="dt">&quot;timestamp&quot;</span><span class="fu">:</span> <span class="st">&quot;2021-08-31T18:37:26Z&quot;</span><span class="fu">,</span></span>
<span id="cb1-92"><a href="#cb1-92" aria-hidden="true"></a>		<span class="dt">&quot;intent&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-93"><a href="#cb1-93" aria-hidden="true"></a>			<span class="dt">&quot;name&quot;</span><span class="fu">:</span> <span class="st">&quot;HelloWorldIntent&quot;</span><span class="fu">,</span></span>
<span id="cb1-94"><a href="#cb1-94" aria-hidden="true"></a>			<span class="dt">&quot;confirmationStatus&quot;</span><span class="fu">:</span> <span class="st">&quot;NONE&quot;</span></span>
<span id="cb1-95"><a href="#cb1-95" aria-hidden="true"></a>		<span class="fu">}</span></span>
<span id="cb1-96"><a href="#cb1-96" aria-hidden="true"></a>	<span class="fu">}</span></span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">class</span> HelloWorldIntentHandler(AbstractRequestHandler):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="co">&quot;&quot;&quot;Handler for Hello World Intent.&quot;&quot;&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    <span class="kw">def</span> can_handle(<span class="va">self</span>, handler_input):</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>        <span class="co"># type: (HandlerInput) -&gt; bool</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>        <span class="cf">return</span> ask_utils.is_intent_name(<span class="st">&quot;HelloWorldIntent&quot;</span>)(handler_input)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    <span class="kw">def</span> handle(<span class="va">self</span>, handler_input):</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>        <span class="co"># type: (HandlerInput) -&gt; Response</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>        speak_output <span class="op">=</span> <span class="st">&quot;Hello World Boo!&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>        <span class="cf">return</span> (</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>            handler_input.response_builder</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>                .speak(speak_output)</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>                <span class="co"># .ask(&quot;add a reprompt if you want to keep the session open for the user to respond&quot;)</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>                .response</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>        )</span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="fu">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>	<span class="dt">&quot;body&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>		<span class="dt">&quot;version&quot;</span><span class="fu">:</span> <span class="st">&quot;1.0&quot;</span><span class="fu">,</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>		<span class="dt">&quot;response&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>			<span class="dt">&quot;outputSpeech&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>				<span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;SSML&quot;</span><span class="fu">,</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>				<span class="dt">&quot;ssml&quot;</span><span class="fu">:</span> <span class="st">&quot;&lt;speak&gt;Hello World Boo!&lt;/speak&gt;&quot;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>			<span class="fu">},</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>			<span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;_DEFAULT_RESPONSE&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>		<span class="fu">},</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>		<span class="dt">&quot;sessionAttributes&quot;</span><span class="fu">:</span> <span class="fu">{},</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>		<span class="dt">&quot;userAgent&quot;</span><span class="fu">:</span> <span class="st">&quot;ask-python/1.11.0 Python/3.7.11&quot;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>	<span class="fu">}</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a><span class="fu">}</span></span></code></pre></div>
]]></description>
    <pubDate>Wed, 25 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2021-08-25-Alexa.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Integrate PlantUML diagrams into Hakyll (Updated)</title>
    <link>https://userjy.github.io/posts/2021-08-24-HakyllPlantUML2.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 24, 2021
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;tech&#39;." href="/tags/tech.html">tech</a>, <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;HakyllSetupSeries&#39;." href="/tags/HakyllSetupSeries.html">HakyllSetupSeries</a>
    
</div>
<h4 id="hakyll-setup-series">Hakyll Setup Series</h4>
<ol type="1">
<li><a href="2021-08-23-HakyllSetupMathjax.html">Setup Mathjax</a></li>
<li><a href="2021-08-24-HakyllPlantUML2.html">Setup PlantUML</a></li>
<li><a href="2021-06-28-HakyllGitAction.html">Setup autobuild Hakyll site Git action CI</a></li>
<li><a href="2021-08-23-PandocFiltering.html">Very Simple Hakyll Pandoc Filtering Example</a></li>
</ol>
<h3 id="plant-uml-hex-image-link">Plant UML hex image link</h3>
<p>Plant UML allows us to draw UML diagram using simple code.</p>
<p>Our goal is to allow us to write code in our pandocs markdown files in hakyll that will automatically generate the UML.<br />
PlantUML has a server that can convert links to image urls.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">http</span>://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a416c6963652d3e426f62203a204920616d207573696e67206865780a40656e64756d6c</span></code></pre></div>
<ol type="1">
<li>Converts code into ASCII decimal</li>
<li>Converts ASCII decimal into hex</li>
<li>Hex is part of URL of planttext which will generate our image</li>
</ol>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">C</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.ByteString.Base16</span> (encode, decode)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text</span> <span class="kw">as</span> <span class="dt">T</span></span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">mhexCode ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>mhexCode y <span class="ot">=</span> <span class="fu">tail</span> <span class="op">$</span> <span class="fu">init</span> ( <span class="fu">show</span> ( encode <span class="op">$</span> C.pack <span class="op">$</span> T.unpack y ))</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="ot">planthtml ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> </span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>planthtml y <span class="ot">=</span> T.pack (<span class="st">&quot;&lt;figure&gt;&lt;img src=&#39;http://www.plantuml.com/plantuml/svg/~h&quot;</span> <span class="op">&lt;&gt;</span> (mhexCode <span class="op">$</span> y) <span class="op">&lt;&gt;</span><span class="st">&quot;&#39;&gt;&lt;/figure&gt;&quot;</span>) </span></code></pre></div>
<p>Above is our helper functions that will be used to generate the hex of our code.</p>
<p>example:<br />
INPUT Markdown codeblock content : <code class="sourceCode bash"><span class="ex">@startuml</span></code></p>
<ol type="1">
<li><code class="sourceCode haskell">encode</code> - Convert <code class="sourceCode bash"><span class="ex">@startuml</span></code> to “407374617274756D6C”</li>
<li>intermediate hex result: “407374617274756D6C”</li>
<li><code class="sourceCode haskell">planthtml</code> - Use hex result to create a ‘http://www.plantuml.com…’ img src DOM string.</li>
</ol>
<p>Notice in the plantuml image link above http://www.plantuml.com/plantuml/svg/~h407374617274756d6c…<br />
the string after “~h” begins with “407374617274756D6C” which is our result.</p>
<h3 id="pandocs-filtering">Pandocs filtering</h3>
<p>Now we need to modify site.hs so that Hakyll will transform a PlantUML code block into a html img that links to the Planttext generated image.<br />
We can do this with Hakyll’s Pandocs Filtering.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="co">--Pandoc filtering, </span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="ot">addToCodeBlock ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span> </span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>addToCodeBlock  <span class="ot">=</span> walk ftranslate </span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>  <span class="kw">where</span><span class="ot"> ftranslate ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> <span class="dt">Block</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>        ftranslate (<span class="dt">CodeBlock</span> (<span class="st">&quot;&quot;</span>,[<span class="st">&quot;plantuml&quot;</span>],[]) txt ) <span class="ot">=</span> <span class="dt">RawBlock</span> (<span class="dt">Format</span> <span class="st">&quot;html&quot;</span>) (planthtml txt)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>        ftranslate x <span class="ot">=</span> x </span></code></pre></div>
<p><code class="sourceCode haskell">ftranslate (<span class="dt">CodeBlock</span> (<span class="st">&quot;&quot;</span>,[<span class="st">&quot;plantuml&quot;</span>],[]) txt )</code> pattern matches CodeBlock objects in pandoc and finds “plantuml” annotations denoted by the Attr object <code class="sourceCode haskell">(<span class="st">&quot;&quot;</span>,[<span class="st">&quot;plantuml&quot;</span>],[])</code><br />
The Content of our CodeBlock is pattern matched as <code class="sourceCode haskell">txt</code>.</p>
<p>After pattern matching it converts it into a raw html block, and applies our “Code to Img DOM” transformation function <code class="sourceCode haskell">planthtml</code> on the content.</p>
<p>INPUT Markdown codeblock :</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="st">&#39;&#39;&#39;plantuml</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="st">@startuml  </span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="st">Alice-&gt;Bob : I am using hex  </span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="st">@enduml</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="st">&#39;&#39;&#39;</span></span></code></pre></div>
<p>Output DOM element :</p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a416c6963652d3e426f62203a204920616d207573696e67206865780a40656e64756d6c'></figure>
<h3 id="full-code">Full Code</h3>
<p>add under “build-depends” in your .cabal file</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ex">pandoc</span>,</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ex">pandoc-types</span>,</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="ex">text</span>,</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="ex">base16-bytestring</span>,</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="ex">bytestring</span>,  </span></code></pre></div>
<p>Add to your site.hs</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Text.Pandoc.Definition</span>  </span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Text.Pandoc.Walk</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Data.Text</span>  </span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">C</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.ByteString.Base16</span> (encode, decode)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text</span> <span class="kw">as</span> <span class="dt">T</span></span></code></pre></div>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ot">mhexCode ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>mhexCode y <span class="ot">=</span> <span class="fu">tail</span> <span class="op">$</span> <span class="fu">init</span> ( <span class="fu">show</span> ( encode <span class="op">$</span> C.pack <span class="op">$</span> T.unpack y ))</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="ot">planthtml ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> </span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>planthtml y <span class="ot">=</span> T.pack (<span class="st">&quot;&lt;figure&gt;&lt;img src=&#39;http://www.plantuml.com/plantuml/svg/~h&quot;</span> <span class="op">&lt;&gt;</span> (mhexCode <span class="op">$</span> y) <span class="op">&lt;&gt;</span><span class="st">&quot;&#39;&gt;&lt;/figure&gt;&quot;</span>) </span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a><span class="co">--Pandoc filtering, </span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a><span class="ot">addToCodeBlock ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span> </span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a>addToCodeBlock  <span class="ot">=</span> walk ftranslate </span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a>  <span class="kw">where</span><span class="ot"> ftranslate ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> <span class="dt">Block</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>        ftranslate (<span class="dt">CodeBlock</span> (<span class="st">&quot;&quot;</span>,[<span class="st">&quot;plantuml&quot;</span>],[]) txt ) <span class="ot">=</span> <span class="dt">RawBlock</span> (<span class="dt">Format</span> <span class="st">&quot;html&quot;</span>) (planthtml txt)</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>        ftranslate x <span class="ot">=</span> x </span></code></pre></div>
<ul>
<li>If you’ve followed my <a href="2021-08-23-HakyllSetupMathjax.html">mathjax hakyll tutorial</a>, simply add the code below:</li>
</ul>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">mathJaxAddedCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>mathJaxAddedCompiler <span class="ot">=</span> pandocCompilerWithTransform readMathjaxOptions writeMathjaxOptions addToCodeBlock</span></code></pre></div>
<ul>
<li>If you didn’t follow my mathjax hakyll tutorial, then add the code below:</li>
</ul>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="ot">simpleCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>simpleCompiler <span class="ot">=</span> pandocCompilerWithTransform defaultHakyllReaderOptions defaultHakyllWriterOptions addToCodeBlock</span></code></pre></div>
]]></description>
    <pubDate>Tue, 24 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2021-08-24-HakyllPlantUML2.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Hakyll Pandoc filtering</title>
    <link>https://userjy.github.io/posts/2021-08-23-PandocFiltering.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 23, 2021
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;tech&#39;." href="/tags/tech.html">tech</a>, <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;HakyllSetupSeries&#39;." href="/tags/HakyllSetupSeries.html">HakyllSetupSeries</a>
    
</div>
<h4 id="hakyll-setup-series">Hakyll Setup Series</h4>
<ol type="1">
<li><a href="2021-08-23-HakyllSetupMathjax.html">Setup Mathjax</a></li>
<li><a href="2021-08-24-HakyllPlantUML2.html">Setup PlantUML</a></li>
<li><a href="2021-06-28-HakyllGitAction.html">Setup autobuild Hakyll site Git action CI</a></li>
<li><a href="2021-08-23-PandocFiltering.html">Very Simple Hakyll Pandoc Filtering Example</a></li>
</ol>
<p>Pandoc filtering - when I type up a blog post,<br />
I can control whether I want some pattern or group of text to be transformed in some manner when the site is rebuilt.</p>
<p>Here I will show the simplest example:</p>
<p>Lets append a text “EOF” to all of our codeblocks.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Text.Pandoc.Definition</span>  </span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Text.Pandoc.Walk</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Data.Text</span>  </span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">addToCodeBlock ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span> </span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>addToCodeBlock  <span class="ot">=</span> walk ftranslate </span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>  <span class="kw">where</span><span class="ot"> ftranslate ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> <span class="dt">Block</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>        ftranslate (<span class="dt">CodeBlock</span> attr txt ) <span class="ot">=</span> <span class="dt">CodeBlock</span> attr (txt <span class="op">&lt;&gt;</span> <span class="st">&quot;EOF&quot;</span>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>        ftranslate x <span class="ot">=</span> x </span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>		</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="ot">simpleCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>simpleCompiler <span class="ot">=</span> pandocCompilerWithTransform defaultHakyllReaderOptions defaultHakyllWriterOptions addToCodeBlock</span></code></pre></div>
<p>For example in my hakyll folder, I create a new file “2099-01-01-NewBlogPost.markdown” and the contents are</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="an">title:</span><span class="co"> Hello World</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="an">tags:</span><span class="co"> tech</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co">---</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>This is my blog post.</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>&#39;&#39;&#39;python</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>print(&quot;Hello World&quot;)</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>&#39;&#39;&#39;</span></code></pre></div>
<p>note: the triple single quotes <code class="sourceCode python"><span class="co">&#39;&#39;&#39;</span></code> above are actually backticks but pandocs won’t let me escape triple backticks.</p>
<p>The python codeblock will show:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="bu">print</span>(<span class="st">&quot;Hello World&quot;</span>)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>EOF</span></code></pre></div>
<h3 id="aside">Aside</h3>
<p>CodeBlock Attr Text CodeBlock takes a Attr type and Text type.<br />
type Attr = (Text, [Text], [(Text, Text)])</p>
<p>Text type is a Data.Text and holds the content of the codeblock. To convert to string do “unpack Text”</p>
<p>We can also convert CodeBlock to Dom Elements with RawBlock.</p>
<p>RawBlock Format Text</p>
<p>example: RawBlock (Format “html”) Text</p>
]]></description>
    <pubDate>Mon, 23 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2021-08-23-PandocFiltering.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Adding Mathjax to Hakyll in 2021</title>
    <link>https://userjy.github.io/posts/2021-08-23-HakyllSetupMathjax.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 23, 2021
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;tech&#39;." href="/tags/tech.html">tech</a>, <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;HakyllSetupSeries&#39;." href="/tags/HakyllSetupSeries.html">HakyllSetupSeries</a>
    
</div>
<h4 id="hakyll-setup-series">Hakyll Setup Series</h4>
<ol type="1">
<li><a href="2021-08-23-HakyllSetupMathjax.html">Setup Mathjax</a></li>
<li><a href="2021-08-24-HakyllPlantUML2.html">Setup PlantUML</a></li>
<li><a href="2021-06-28-HakyllGitAction.html">Setup autobuild Hakyll site Git action CI</a></li>
<li><a href="2021-08-23-PandocFiltering.html">Very Simple Hakyll Pandoc Filtering Example</a></li>
</ol>
<h3 id="js-setup">JS setup</h3>
<p>Add mathjax js to &lt;head&gt; in /templates/default.html</p>
<p>Insert line 3,4,5</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource html numberLines"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">&lt;head&gt;</span>...</span>
<span id="cb1-2"><a href="#cb1-2"></a></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">&lt;script</span><span class="ot"> id=</span><span class="st">&quot;MathJax-script&quot;</span><span class="ot"> async</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="ot">    src=</span><span class="st">&quot;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js&quot;</span><span class="kw">&gt;</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="kw">&lt;/script&gt;</span></span>
<span id="cb1-6"><a href="#cb1-6"></a></span>
<span id="cb1-7"><a href="#cb1-7"></a>...<span class="kw">&lt;/head&gt;</span></span></code></pre></div>
<h3 id="add-dependencies">Add dependencies</h3>
<p>Modify myblog.cabal<br />
Note For you it is named myblog.cabal or what you named your hakyll project.</p>
<p>Add “pandoc, containers” under build-depends in myblog.cabal</p>
<p>Insert line 7,8</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode numberSource sh numberLines"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a><span class="ex">executable</span> myblog</span>
<span id="cb2-2"><a href="#cb2-2"></a>  <span class="ex">...</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>  <span class="ex">...</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>  <span class="ex">build-depends</span>:       </span>
<span id="cb2-5"><a href="#cb2-5"></a>    <span class="ex">base</span> <span class="op">&gt;</span>= 4.7 <span class="kw">&amp;&amp;</span> <span class="op">&lt;</span> <span class="ex">5</span>,</span>
<span id="cb2-6"><a href="#cb2-6"></a>    <span class="ex">hakyll</span>,</span>
<span id="cb2-7"><a href="#cb2-7"></a>    <span class="ex">pandoc</span>,</span>
<span id="cb2-8"><a href="#cb2-8"></a>    <span class="ex">containers</span>   </span></code></pre></div>
<h3 id="setup-functions-in-site.hs">Setup functions in site.hs</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>   </span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co">--Step 0: Add &quot;import Text.Pandoc.Options&quot; in site.hs</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Text.Pandoc.Options</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="op">--..</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="co">--Step 1: Get the mathjax Extensions that recognizes single $ in our pandocs</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="ot">mathjaxExtensions ::</span> <span class="dt">Extensions</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>mathjaxExtensions <span class="ot">=</span> extensionsFromList </span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>                    [<span class="dt">Ext_tex_math_dollars</span> <span class="co">--  $...$ or $$...$$</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>                    ,<span class="dt">Ext_tex_math_double_backslash</span> <span class="co">--  \(...\) or \[...\]</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>                    ,<span class="dt">Ext_latex_macros</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>                    ,<span class="dt">Ext_inline_code_attributes</span> </span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>                    ]</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a><span class="co">--Step 2: Setup ReaderOptions using the Extensions from Step 1</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a><span class="ot">readMathjaxOptions ::</span> <span class="dt">ReaderOptions</span> </span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a>readMathjaxOptions <span class="ot">=</span> defaultHakyllReaderOptions</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>                {</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a>                    readerExtensions <span class="ot">=</span> (readerExtensions defaultHakyllReaderOptions) <span class="op">&lt;&gt;</span> mathjaxExtensions</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true"></a>                }</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true"></a><span class="co">--Step 3: Setup WriterOptions</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true"></a><span class="ot">writeMathjaxOptions ::</span> <span class="dt">WriterOptions</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true"></a>writeMathjaxOptions <span class="ot">=</span> defaultHakyllWriterOptions </span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true"></a>                {</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true"></a>                    writerHTMLMathMethod <span class="ot">=</span> <span class="dt">MathJax</span> <span class="st">&quot;&quot;</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true"></a>                }</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true"></a><span class="co">--Step 4: Build the compiler using the ReaderOption and Writer Option from Step 2, 3.</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true"></a><span class="ot">mathJaxAddedCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true"></a>mathJaxAddedCompiler <span class="ot">=</span> pandocCompilerWith readMathjaxOptions writeMathjaxOptions</span></code></pre></div>
<h3 id="modifying-compiler-in-site.hs">Modifying compiler in site.hs</h3>
<p>Replace the line <code class="sourceCode haskell">compile <span class="op">$</span> pandocCompiler</code> with<br />
<code class="sourceCode haskell">compiler <span class="op">$</span> mathJaxAddedCompiler</code><br />
As shown in line 8</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource haskell numberLines"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="op">...</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb4-3"><a href="#cb4-3"></a>main <span class="ot">=</span> <span class="kw">do</span>    </span>
<span id="cb4-4"><a href="#cb4-4"></a>    hakyllWith config <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-5"><a href="#cb4-5"></a>        <span class="op">...</span></span>
<span id="cb4-6"><a href="#cb4-6"></a>        match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>            route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb4-8"><a href="#cb4-8"></a>            compile <span class="op">$</span> mathJaxAddedCompiler</span>
<span id="cb4-9"><a href="#cb4-9"></a>               <span class="op">...</span></span></code></pre></div>
<p>remember to call</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ex">stack</span> build</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ex">stack</span> exec myblog rebuild</span></code></pre></div>
<p>to rebuild your site.hs<br />
replace “myblog” with the name of your hakyll project</p>
<h3 id="conclusion">Conclusion</h3>
<p>After doing all this you should be able to simply write your latex using</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode md"><code class="sourceCode markdown"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>$$ x \in Set $$</span></code></pre></div>
<p><span class="math display">\[ x \in Set \]</span></p>
<h4 id="aside">Aside</h4>
<p>You can just do the first part(add mathjax js to &lt;head&gt;) for a working mathjax BUT then you would have to escape characters frequently and this would make it unportable to other editors.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="fu">\\</span>[ x <span class="fu">\\</span>in Set <span class="fu">\\</span>]</span></code></pre></div>
]]></description>
    <pubDate>Mon, 23 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2021-08-23-HakyllSetupMathjax.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Integrate PlantUML diagrams into Hakyll (Old)</title>
    <link>https://userjy.github.io/posts/2021-08-23-HakyllPlantUML.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 23, 2021
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;tech&#39;." href="/tags/tech.html">tech</a>, <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>, <a title="All pages tagged &#39;HakyllSetupSeries&#39;." href="/tags/HakyllSetupSeries.html">HakyllSetupSeries</a>
    
</div>
<p>** Go here <a href="2021-08-24-HakyllPlantUML2.html">Integrate PlantUML diagrams into Hakyll (Updated)</a> that uses Hakyll libraries rather than my reinvent-the-wheel-bad implementations**</p>
<h3 id="plant-uml-hex-image-link">Plant UML hex image link</h3>
<p>Plant UML allows us to draw UML diagram using simple code.</p>
<p>Our goal is to allow us to write code in our pandocs markdown files in hakyll that will automatically generate the UML.<br />
PlantUML has a server that can convert links to image urls.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">http</span>://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a416c6963652d3e426f62203a204920616d207573696e67206865780a40656e64756d6c</span></code></pre></div>
<ol type="1">
<li>Converts code into ASCII decimal</li>
<li>Converts ASCII decimal into hex</li>
<li>Hex is part of URL of planttext which will generate our image</li>
</ol>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">strToASCII ::</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>strToASCII xs <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">ord</span> xs</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="ot">asciiToHex ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>asciiToHex xs <span class="ot">=</span> <span class="fu">fmap</span> (\x <span class="ot">-&gt;</span> showHex x <span class="st">&quot;&quot;</span>) xs</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="ot">plantUMLhex ::</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> <span class="dt">String</span> </span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>plantUMLhex xs <span class="ot">=</span> (<span class="fu">concat</span><span class="op">.</span>  asciiToHex  <span class="op">.</span> strToASCII) xs</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="co">-- replaceLF replaces markdown doublespace newlines hex with plantUML compatible newline hex</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a><span class="ot">replaceLF ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> </span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>replaceLF xs <span class="ot">=</span>  (T.replace <span class="st">&quot;20200&quot;</span> <span class="st">&quot;0a&quot;</span>) xs</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a><span class="ot">hexCode ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> </span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>hexCode y <span class="ot">=</span> (replaceLF (T.pack ( plantUMLhex (T.unpack y))))</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a><span class="ot">planthtml ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> </span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a>planthtml y <span class="ot">=</span> T.pack (<span class="st">&quot;&lt;figure&gt;&lt;img src=&#39;http://www.plantuml.com/plantuml/svg/~h&quot;</span> <span class="op">&lt;&gt;</span> (T.unpack <span class="op">$</span> hexCode y) <span class="op">&lt;&gt;</span><span class="st">&quot;&#39;&gt;&lt;/figure&gt;&quot;</span>) </span></code></pre></div>
<p>Above is our helper functions that will be used to generate the hex of our code.</p>
<p>example:<br />
INPUT Markdown codeblock content : <code class="sourceCode bash"><span class="ex">@startuml</span></code></p>
<ol type="1">
<li><code class="sourceCode haskell">strToASCII</code> - Convert <code class="sourceCode bash"><span class="ex">@startuml</span></code> to [64,115,116,97,114,116,117,109,108]</li>
<li><code class="sourceCode haskell">asciiToHex</code> - Convert ASCII decimal encoding with [40,73,74,61,72,74,75,6D,6C]</li>
<li><code class="sourceCode haskell"><span class="fu">concat</span></code> - [40,73,74,61,72,74,75,6D,6C] to “407374617274756D6C”</li>
<li><code class="sourceCode haskell">replaceLF</code> - replace “20200” substrings with “0a”, in this case there are none.</li>
<li>intermediate hex result: “407374617274756D6C”</li>
<li><code class="sourceCode haskell">planthtml</code> - Use hex result to create a ‘http://www.plantuml.com…’ img src DOM string.</li>
</ol>
<p>Notice in the plantuml image link above http://www.plantuml.com/plantuml/svg/~h407374617274756d6c…<br />
the string after “~h” begins with “407374617274756D6C” which is our result.</p>
<p>replaceLF is neccessary because the LineFeed of our Pandocs doesn’t match PlantUML server’s LineFeed. Therefore we design a function that replaces our LineFeed hex with a suitable hex. This means in your markdown file you must add double space at the end of a line for a new line. NOTE: Updated post fixes this problem <a href="2021-08-24-HakyllPlantUML2.html">Integrate PlantUML diagrams into Hakyll (Updated)</a></p>
<h3 id="pandocs-filtering">Pandocs filtering</h3>
<p>Now we need to modify site.hs so that Hakyll will transform a PlantUML code block into a html img that links to the Planttext generated image.<br />
We can do this with Hakyll’s Pandocs Filtering.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co">--Pandoc filtering, </span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="ot">addToCodeBlock ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span> </span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>addToCodeBlock  <span class="ot">=</span> walk ftranslate </span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>  <span class="kw">where</span><span class="ot"> ftranslate ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> <span class="dt">Block</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>        ftranslate (<span class="dt">CodeBlock</span> (<span class="st">&quot;&quot;</span>,[<span class="st">&quot;plantuml&quot;</span>],[]) txt ) <span class="ot">=</span> <span class="dt">RawBlock</span> (<span class="dt">Format</span> <span class="st">&quot;html&quot;</span>) (planthtml txt)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>        ftranslate x <span class="ot">=</span> x </span></code></pre></div>
<p><code class="sourceCode haskell">ftranslate (<span class="dt">CodeBlock</span> (<span class="st">&quot;&quot;</span>,[<span class="st">&quot;plantuml&quot;</span>],[]) txt )</code> pattern matches CodeBlock objects in pandoc and finds “plantuml” annotations denoted by the Attr object <code class="sourceCode haskell">(<span class="st">&quot;&quot;</span>,[<span class="st">&quot;plantuml&quot;</span>],[])</code><br />
The Content of our CodeBlock is pattern matched as <code class="sourceCode haskell">txt</code>.</p>
<p>After pattern matching it converts it into a raw html block, and applies our “Code to Img DOM” transformation function <code class="sourceCode haskell">planthtml</code> on the content.</p>
<p>INPUT Markdown codeblock :</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="st">&#39;&#39;&#39;plantuml</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="st">@startuml  </span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="st">Alice-&gt;Bob : I am using hex  </span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="st">@enduml</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="st">&#39;&#39;&#39;</span></span></code></pre></div>
<p>Output DOM element :</p>
<figure><img src='http://www.plantuml.com/plantuml/svg/~h407374617274756d6c0a416c6963652d3e426f62203a204920616d207573696e67206865780a40656e64756d6c'></figure>
<h3 id="full-code">Full Code</h3>
<p>add under “build-depends” in your .cabal file</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ex">pandoc</span>,</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ex">pandoc-types</span>,</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="ex">text</span>  </span></code></pre></div>
<p>Add to your site.hs</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Text.Pandoc.Definition</span>  </span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Text.Pandoc.Walk</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Data.Text</span>  </span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Numeric</span> (showHex)</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.Char</span> (ord)</span></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">strToASCII ::</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>strToASCII xs <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">ord</span> xs</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a><span class="ot">asciiToHex ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>asciiToHex xs <span class="ot">=</span> <span class="fu">fmap</span> (\x <span class="ot">-&gt;</span> showHex x <span class="st">&quot;&quot;</span>) xs</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a><span class="ot">plantUMLhex ::</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> <span class="dt">String</span> </span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>plantUMLhex xs <span class="ot">=</span> (<span class="fu">concat</span><span class="op">.</span>  asciiToHex <span class="op">.</span> strToASCII) xs</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a><span class="co">-- replaceLF replaces markdown doublespace newlines hex with plantUML compatible newline hex</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a><span class="ot">replaceLF ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> </span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>replaceLF xs <span class="ot">=</span>  (T.replace <span class="st">&quot;20200&quot;</span> <span class="st">&quot;0a&quot;</span>) xs</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a><span class="ot">hexCode ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> </span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a>hexCode y <span class="ot">=</span> (replaceLF (T.pack ( plantUMLhex (T.unpack y))))</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a><span class="ot">planthtml ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> </span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true"></a>planthtml y <span class="ot">=</span> T.pack (<span class="st">&quot;&lt;figure&gt;&lt;img src=&#39;http://www.plantuml.com/plantuml/svg/~h&quot;</span> <span class="op">&lt;&gt;</span> (T.unpack <span class="op">$</span> hexCode y) <span class="op">&lt;&gt;</span><span class="st">&quot;&#39;&gt;&lt;/figure&gt;&quot;</span>) </span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true"></a></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true"></a><span class="co">--Pandoc filtering, </span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true"></a><span class="ot">addToCodeBlock ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span> </span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true"></a>addToCodeBlock  <span class="ot">=</span> walk ftranslate </span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true"></a>  <span class="kw">where</span><span class="ot"> ftranslate ::</span> <span class="dt">Block</span> <span class="ot">-&gt;</span> <span class="dt">Block</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true"></a>        ftranslate (<span class="dt">CodeBlock</span> (<span class="st">&quot;&quot;</span>,[<span class="st">&quot;plantuml&quot;</span>],[]) txt ) <span class="ot">=</span> <span class="dt">RawBlock</span> (<span class="dt">Format</span> <span class="st">&quot;html&quot;</span>) (planthtml txt)</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true"></a>        ftranslate x <span class="ot">=</span> x </span></code></pre></div>
<ul>
<li>If you’ve followed my mathjax hakyll tutorial, simply add the code below:</li>
</ul>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ot">mathJaxAddedCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>mathJaxAddedCompiler <span class="ot">=</span> pandocCompilerWithTransform readMathjaxOptions writeMathjaxOptions addToCodeBlock</span></code></pre></div>
<ul>
<li>If you didn’t follow my mathjax hakyll tutorial, then add the code below:</li>
</ul>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">simpleCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>simpleCompiler <span class="ot">=</span> pandocCompilerWithTransform defaultHakyllReaderOptions defaultHakyllWriterOptions addToCodeBlock</span></code></pre></div>
]]></description>
    <pubDate>Mon, 23 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2021-08-23-HakyllPlantUML.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Trace and Decorators</title>
    <link>https://userjy.github.io/posts/2021-08-10-trace.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 10, 2021
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;prog&#39;." href="/tags/prog.html">prog</a>
    
</div>
<h3 id="decorators-mutate-the-target-function">Decorators Mutate the target function</h3>
<p>Decorators are impure by default.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">def</span> logged(func):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="kw">def</span> with_logging(<span class="op">*</span>args, <span class="op">**</span>kwargs):</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>        <span class="bu">print</span>(func.<span class="va">__name__</span> <span class="op">+</span> <span class="st">&quot; was called&quot;</span>)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>        <span class="cf">return</span> func(<span class="op">*</span>args, <span class="op">**</span>kwargs)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="cf">return</span> with_logging</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="co">#################</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="at">@logged</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="kw">def</span> f(x):</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>    <span class="cf">return</span> x</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a><span class="co"># # # the decorator above is the same as doing the below</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a><span class="kw">def</span> f(x):</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>    <span class="cf">return</span> x</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>f <span class="op">=</span> logged(f) </span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a><span class="co">#logged(f) returns a function with_logging</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a><span class="co">#with_logging gets stored in f</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a><span class="bu">print</span>(f.<span class="va">__name__</span>)</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a><span class="co">#&gt; with_logging</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true"></a><span class="co">##################</span></span></code></pre></div>
<h5 id="functool-wraps-to-prevent-sideeffect">functool wraps to prevent sideeffect</h5>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">def</span> trace(func):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    separate <span class="op">=</span> <span class="st">&quot;| &quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    trace.recursionDepth <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>    <span class="at">@wraps</span>(func)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    <span class="kw">def</span> trace_helper(<span class="op">*</span>args, <span class="op">**</span>kwargs):</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>        <span class="bu">print</span>(<span class="ss">f&#39;</span><span class="sc">{</span>separate <span class="op">*</span> trace<span class="sc">.</span>recursionDepth<span class="sc">}</span><span class="ss">|--&gt; </span><span class="sc">{</span>func<span class="sc">.</span><span class="va">__name__</span><span class="sc">}</span><span class="ss">(</span><span class="sc">{</span><span class="st">&quot;, &quot;</span><span class="sc">.</span>join(<span class="bu">map</span>(<span class="bu">str</span>, args))<span class="sc">}</span><span class="ss">)&#39;</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>        trace.recursionDepth <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>        output <span class="op">=</span> func(<span class="op">*</span>args,<span class="op">**</span>kwargs)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>        trace.recursionDepth <span class="op">-=</span> <span class="dv">1</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>        <span class="bu">print</span>(<span class="ss">f&#39;</span><span class="sc">{</span>separate <span class="op">*</span> (trace.recursionDepth <span class="op">+</span> <span class="dv">1</span>)<span class="sc">}</span><span class="ss">|--&gt; return </span><span class="sc">{</span>output<span class="sc">}</span><span class="ss">&#39;</span>)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>        <span class="cf">return</span> output</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>    <span class="cf">return</span> trace_helper</span></code></pre></div>
<hr />
<h3 id="tracing">Tracing</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>#lang racket</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>(<span class="kw">require</span> racket/trace)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>(define (fac x))</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>    (<span class="kw">if</span> (<span class="op">&lt;</span> x <span class="dv">1</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>        <span class="dv">1</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>        (<span class="op">*</span> x (fac (-x <span class="dv">1</span>)))</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>(<span class="kw">trace</span> fac)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a><span class="co">;&gt; (fac 3)</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a><span class="co">;&gt; &gt; (fac 2)</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a><span class="co">;&gt; &gt; &gt; (fac 1)</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a><span class="co">;&lt; &lt; &lt; 1</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a><span class="co">;&lt; &lt; 2</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a><span class="co">;&lt; 6</span></span></code></pre></div>
]]></description>
    <pubDate>Tue, 10 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2021-08-10-trace.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>
<item>
    <title>Why Hakyll</title>
    <link>https://userjy.github.io/posts/2021-08-10-WhyHakyll.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 10, 2021
    
</div>
<div class="info">
    
    Tags: <a title="All pages tagged &#39;musings&#39;." href="/tags/musings.html">musings</a>
    
</div>
<p>It’s minimalistic.<br />
It’s fast.<br />
Plus it’s a good excuse to find a more applied use for Haskell.</p>
]]></description>
    <pubDate>Tue, 10 Aug 2021 00:00:00 UT</pubDate>
    <guid>https://userjy.github.io/posts/2021-08-10-WhyHakyll.html</guid>
    <dc:creator>Jason Yang</dc:creator>
</item>

    </channel>
</rss>
